{
  "Paragraph": {
    "desc": "A block (paragraph) of text.\n\n    This Bokeh model corresponds to an HTML ``<p>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_paragraph.py\n        :source-position: below",
    "name": "Paragraph",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f4b332a0-0608-4daa-826c-8a79505c717d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The contents of the widget.",
        "name": "text",
        "type": "String",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Range": {
    "desc": "A base class for all range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Range",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"callback\": null, \"id\": \"068f1622-afca-43f1-81b5-7e45aa55c89c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      }
    ]
  },
  "Arc": {
    "desc": "Render arcs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Arc.py\n        :source-position: below",
    "name": "Arc",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"id\": \"a43c2dd6-77a0-4eb9-b866-af37367a2b64\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the arcs.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The angles to start the arcs, as measured from the horizontal.",
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "Which direction to stroke between the start and end angles.",
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "default": "anticlock"
      },
      {
        "desc": "",
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The angles to end the arcs, as measured from the horizontal.",
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "The line width values for the arcs.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the arcs.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Radius of the arc.",
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line dash offset values for the arcs.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The x-coordinates of the center of the arcs.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates of the center of the arcs.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line cap values for the arcs.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line dash values for the arcs.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the arcs.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "",
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      }
    ]
  },
  "WMTSTileSource": {
    "desc": "The ``WMTSTileSource`` behaves much like ``TMSTileSource`` but has its\n    tile-origin in the top-left.\n\n    This is the most common used tile source for web mapping applications.\n    Such companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\n    service which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``.",
    "name": "WMTSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"6a69de87-dd59-4d59-ba86-0ff45bd7a3ba\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "type": "Float",
        "default": 156543.03392804097
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "type": "Int",
        "default": 256
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "LayoutDOM": {
    "desc": "An abstract base class for layout components.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "LayoutDOM",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ab2d2e9e-d0d5-458a-9201-874169c5da98\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "PanTool": {
    "desc": "*toolbar icon*: |pan_icon|\n\n    The pan tool allows the user to pan a Plot by left-dragging\n    a mouse, or on touch devices by dragging a finger or stylus, across\n    the plot region.\n\n    The pan tool also activates the border regions of a Plot for \"single\n    axis\" panning. For instance, dragging in the vertical border or axis\n    will effect a pan in the vertical direction only, with the horizontal\n    dimension kept fixed.\n\n    .. |pan_icon| image:: /_images/icons/Pan.png\n        :height: 18pt",
    "name": "PanTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"8ff6cb12-0336-430e-a80e-93b37f8bda2b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the pan tool is constrained to act in. By default\n    the pan tool will pan in any dimension, but can be configured to only\n    pan horizontally across the width of the plot, or vertically across the\n    height of the plot.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Patch": {
    "desc": "Render a single patch.\n\n    The ``Patch`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Patch.py\n        :source-position: below",
    "name": "Patch",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"285bc21a-ed93-4efc-b668-dcf734e1742f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        x-coordinates for each polygon should be separated by NaN\n        values in the sequence.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line join values for the patch.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        y-coordinates for each polygon should be separated by NaN\n        values in the sequence.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the patch.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the patch.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the patch.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the patch.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the patch.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the patch.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the patch.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the patch.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "AjaxDataSource": {
    "desc": "",
    "name": "AjaxDataSource",
    "bases": [
      "bokeh.models.sources.RemoteSource"
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"content_type\": \"application/json\", \"data\": {}, \"data_url\": null, \"http_headers\": {}, \"id\": \"ea3d6db1-af8a-4317-829f-92c326a97cb9\", \"if_modified\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_size\": null, \"method\": \"POST\", \"mode\": \"replace\", \"name\": null, \"polling_interval\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "http method - GET or POST",
        "name": "method",
        "type": "Enum('POST', 'GET')",
        "default": "POST"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Set the \"contentType\" parameter for the Ajax request.",
        "name": "content_type",
        "type": "String",
        "default": "application/json"
      },
      {
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "default": {}
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether to include an ``If-Modified-Since`` header in AJAX requests\n    to the server. If this header is supported by the server, then only\n    new data since the last request will be returned.",
        "name": "if_modified",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Whether to append new data to existing data (up to ``max_size``),\n    or to replace existing data entirely.",
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "default": "replace"
      },
      {
        "desc": "HTTP headers to set for the Ajax request.",
        "name": "http_headers",
        "type": "Dict(String, String)",
        "default": {}
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "type": "Dict(String, Dict(String, Any))",
        "default": {
          "2d": {
            "indices": {}
          },
          "0d": {
            "indices": [],
            "glyph": null
          },
          "1d": {
            "indices": []
          }
        }
      },
      {
        "desc": "The URL to the endpoint for the data.",
        "name": "data_url",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Maximum size of the data array being kept after each pull requests.\n    Larger than that size, the data will be right shifted.",
        "name": "max_size",
        "type": "Int",
        "default": null
      },
      {
        "desc": "polling interval for updating data source in milliseconds",
        "name": "polling_interval",
        "type": "Int",
        "default": null
      }
    ]
  },
  "UndoTool": {
    "desc": "*toolbar icon*: |undo_icon|\n\n    Undo tool allows to restore previous state of the plot.\n\n    .. |undo_icon| image:: /_images/icons/Undo.png\n        :height: 18pt",
    "name": "UndoTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"id\": \"01e43129-09a7-43dd-90c9-4cac51babdd1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "DateFormatter": {
    "desc": "Date cell formatter.",
    "name": "DateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "proto": "{\"format\": \"yy M d\", \"id\": \"8dc43541-63c7-4a5b-8f44-6b6042497e1e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The date format can be combinations of the following:\n\n    d\n        day of month (no leading zero)\n\n    dd\n        day of month (two digit)\n\n    o\n        day of year (no leading zeros)\n\n    oo\n        day of year (three digit)\n\n    D\n        day name short\n\n    DD\n        day name long\n\n    m\n        month of year (no leading zero)\n\n    mm\n        month of year (two digit)\n\n    M\n        month name short\n\n    MM\n        month name long\n\n    y\n        year (two digit)\n\n    yy\n        year (four digit)\n\n    @\n        Unix timestamp (ms since 01/01/1970)\n\n    !\n        Windows ticks (100ns since 01/01/0001)\n\n    \"...\"\n        literal text\n\n    ''\n        single quote",
        "name": "format",
        "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TICKS', 'TIMESTAMP'), String)",
        "default": "yy M d"
      }
    ]
  },
  "Bezier": {
    "desc": "Render B\u00e9zier curves.\n\n    For more information consult the `Wikipedia article for B\u00e9zier curve`_.\n\n    .. _Wikipedia article for B\u00e9zier curve: http://en.wikipedia.org/wiki/B\u00e9zier_curve\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Bezier.py\n        :source-position: below",
    "name": "Bezier",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"cx0\": null, \"cx1\": null, \"cy0\": null, \"cy1\": null, \"id\": \"ad787f72-29df-4943-9dac-545dfed4f164\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the B\u00e9zier curves.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The x-coordinates of the ending points.",
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates of the starting points.",
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The x-coordinates of second control points.",
        "name": "cx1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The y-coordinates of second control points.",
        "name": "cy1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The x-coordinates of first control points.",
        "name": "cx0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates of the ending points.",
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The x-coordinates of the starting points.",
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the B\u00e9zier curves.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the B\u00e9zier curves.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the B\u00e9zier curves.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the B\u00e9zier curves.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line dash offset values for the B\u00e9zier curves.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the B\u00e9zier curves.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-coordinates of first control points.",
        "name": "cy0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      }
    ]
  },
  "ColumnDataSource": {
    "desc": "Maps names of columns to sequences or arrays.\n\n    If the ColumnDataSource initializer is called with a single argument that\n    is a dict or pandas.DataFrame, that argument is used as the value for the\n    \"data\" attribute. For example::\n\n        ColumnDataSource(mydict) # same as ColumnDataSource(data=mydict)\n        ColumnDataSource(df) # same as ColumnDataSource(data=df)\n\n    .. note::\n        There is an implicit assumption that all the columns in a\n        a given ColumnDataSource have the same length.",
    "name": "ColumnDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"data\": {}, \"id\": \"753d506c-6cc2-40b5-8e0d-5445413528ca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "type": "Dict(String, Dict(String, Any))",
        "default": {
          "2d": {
            "indices": {}
          },
          "0d": {
            "indices": [],
            "glyph": null
          },
          "1d": {
            "indices": []
          }
        }
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      }
    ]
  },
  "Annotation": {
    "desc": "Base class for all annotation models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Annotation",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "proto": "{\"id\": \"735118f0-6f6e-48b8-90e5-48153dcd95e6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "ArrowHead": {
    "desc": "Base class for arrow heads.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ArrowHead",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"id\": \"eb0d35ca-230f-4433-bfb5-fff8f770a9af\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Triangle": {
    "desc": "Render triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Triangle.py\n        :source-position: below",
    "name": "Triangle",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"3d7e826b-0b8d-48de-bc9f-a8b0e8e49026\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "LogAxis": {
    "desc": "An axis that picks nice numbers for tick locations on a\n    log scale. Configured with a ``LogTickFormatter`` by default.",
    "name": "LogAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"8addf6f2-a76e-40df-acc9-7c28d3734116\", \"type\": \"LogTickFormatter\"}, \"id\": \"08534909-db4b-4a7e-b75a-f9dd7099af2f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"76b995f8-4dfb-4f85-a7cc-bf7ac7b2ef64\", \"type\": \"LogTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": "{\"id\": \"7af06a2e-6ec0-4532-8ee3-91ec27623766\"}"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": "{\"id\": \"900c6d11-54b3-4ed0-bb4f-4f1874893b79\"}"
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), String)",
        "default": {}
      },
      {
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "type": "String",
        "default": ""
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "default": "horizontal"
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "alphabetic"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      }
    ]
  },
  "Plot": {
    "desc": "Model representing a plot, containing glyphs, guides, annotations.",
    "name": "Plot",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "proto": "{\"above\": [], \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"c4ae8fc5-b1f6-47b9-8c06-3d0a88ee50ab\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"f09cd56e-aede-488b-9b1d-e199ae832972\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"dc5b1fde-15e0-4e18-938e-25aba3b80e43\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"0e12ed6e-68af-4955-9685-62187a648faa\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"ba1ef009-5257-43db-9039-e35002155426\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"ecb9a630-98e2-44ab-99f7-afec3bf65cbb\", \"type\": \"LinearScale\"}}",
    "props": [
      {
        "desc": "The fill alpha for the plot border style.",
        "name": "border_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "name": "h_symmetry",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether to use HiDPI mode when available.",
        "name": "hidpi",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "name": "x_scale",
        "type": "Instance(Scale)",
        "default": "{\"id\": \"96320a88-59c2-4438-8e16-54ef28fe0dc2\"}"
      },
      {
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "name": "right",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "default": {}
      },
      {
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_top",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The fill alpha for the plot background style.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "default": {}
      },
      {
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "name": "title_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "above"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A ToolEvents object to share and report tool events.",
        "name": "tool_events",
        "type": "Instance(ToolEvents)",
        "default": null
      },
      {
        "desc": "The fill color for the plot border style.",
        "name": "border_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "name": "v_symmetry",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "name": "plot_width",
        "type": "Int",
        "default": 600
      },
      {
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_right",
        "type": "Int",
        "default": null
      },
      {
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line alpha for the plot border outline.",
        "name": "outline_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "name": "lod_factor",
        "type": "Int",
        "default": 10
      },
      {
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "name": "y_scale",
        "type": "Instance(Scale)",
        "default": "{\"id\": \"2e215ef0-0ce9-4b01-b55a-a2ecb1c3b18d\"}"
      },
      {
        "desc": "The line dash for the plot border outline.",
        "name": "outline_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line dash offset for the plot border outline.",
        "name": "outline_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_bottom",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "default": "canvas"
      },
      {
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "name": "min_border",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "name": "toolbar_sticky",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line color for the plot border outline.",
        "name": "outline_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#e5e5e5"
      },
      {
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "name": "title",
        "type": "Instance(Title)",
        "default": "{\"id\": \"a15fef6f-32bd-4683-8d0b-693360b1421c\", \"text\": \"\"}"
      },
      {
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "name": "toolbar_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "right"
      },
      {
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "name": "y_range",
        "type": "Instance(Range)",
        "default": null
      },
      {
        "desc": "The line cap for the plot border outline.",
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color for the plot background style.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "name": "x_range",
        "type": "Instance(Range)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "name": "plot_height",
        "type": "Int",
        "default": 600
      },
      {
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_left",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The line width for the plot border outline.",
        "name": "outline_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "name": "lod_interval",
        "type": "Int",
        "default": 300
      },
      {
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "name": "lod_threshold",
        "type": "Int",
        "default": 2000
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area below of the plot.",
        "name": "below",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "name": "lod_timeout",
        "type": "Int",
        "default": 500
      },
      {
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "name": "left",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "The line join for the plot border outline.",
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A list of renderers to occupy the area above of the plot.",
        "name": "above",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "MapOptions": {
    "desc": "Abstract base class for map options' models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "MapOptions",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"74f8b2bb-4e6d-4c5c-b22d-48189c1d5bee\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The latitude where the map should be centered.",
        "name": "lat",
        "type": "Float",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The longitude where the map should be centered.",
        "name": "lng",
        "type": "Float",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The initial zoom level to use when displaying the map.",
        "name": "zoom",
        "type": "Int",
        "default": 12
      }
    ]
  },
  "DateRangeSlider": {
    "desc": "Slider-based date range selection widget.",
    "name": "DateRangeSlider",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"arrows\": true, \"bounds\": null, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"enabled\": true, \"height\": null, \"id\": \"16b9e399-cc13-4be4-b5d7-492fbbbf0366\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"range\": null, \"sizing_mode\": \"fixed\", \"step\": {}, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": null, \"value_labels\": \"show\", \"wheel_mode\": null, \"width\": null}",
    "props": [
      {
        "desc": "[TDB]",
        "name": "range",
        "type": "Tuple(RelativeDelta, RelativeDelta)",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether mouse zoom should scroll or zoom selected range (or\n    do nothing).",
        "name": "wheel_mode",
        "type": "Enum('scroll', 'zoom')",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The step between consecutive dates.",
        "name": "step",
        "type": "RelativeDelta",
        "default": {}
      },
      {
        "desc": "Enable or disable this widget.",
        "name": "enabled",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "Show or hide value labels on both sides of the slider.",
        "name": "value_labels",
        "type": "Enum('show', 'hide', 'change')",
        "default": "show"
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "The initial or selected date range.",
        "name": "value",
        "type": "Tuple(Date, Date)",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever either slider's value changes.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether to show clickable arrows on both ends of the slider.",
        "name": "arrows",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The earliest and latest allowable dates.",
        "name": "bounds",
        "type": "Tuple(Date, Date)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "X": {
    "desc": "Render a 'X' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/X.py\n        :source-position: below",
    "name": "X",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"cbcfe434-c91e-48ba-a28e-29fae3a2fe23\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "TMSTileSource": {
    "desc": "The TMSTileSource contains tile config info and provides urls for\n    tiles based on a templated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``.\n    The defining feature of TMS is the tile-origin in located at the bottom-left.\n\n    The TMSTileSource can also be helpful in implementing tile renderers for\n    custom tile sets, including non-spatial datasets.",
    "name": "TMSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"e6953de0-01db-4223-8e71-3db350c116af\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "type": "Float",
        "default": 156543.03392804097
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "type": "Int",
        "default": 256
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "SquareX": {
    "desc": "Render square markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/SquareX.py\n        :source-position: below",
    "name": "SquareX",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"be3c517c-678c-43fe-b51d-283933af1725\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "TableColumn": {
    "desc": "Table column widget.",
    "name": "TableColumn",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"default_sort\": \"ascending\", \"editor\": {\"id\": \"4ae653fb-6887-4a83-848d-3cd1d9dc5a62\", \"type\": \"StringEditor\"}, \"field\": null, \"formatter\": {\"id\": \"ddcd73f2-d400-4454-9d96-e954b0419281\", \"type\": \"StringFormatter\"}, \"id\": \"533cf1b9-fd55-42e2-aeee-735f1768fe5c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sortable\": true, \"subscribed_events\": [], \"tags\": [], \"title\": null, \"width\": 300}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The cell editor for this column. By default, a simple string editor\n    is used.",
        "name": "editor",
        "type": "Instance(CellEditor)",
        "default": "{\"id\": \"4c46d5cd-9613-4185-afc0-6da26a970010\"}"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The width or maximum width (depending on data table's configuration)\n    in pixels of this column.",
        "name": "width",
        "type": "Int",
        "default": 300
      },
      {
        "desc": "The cell formatter for this column. By default, a simple string\n    formatter is used.",
        "name": "formatter",
        "type": "Instance(CellFormatter)",
        "default": "{\"id\": \"1544d0c9-e1f8-45d8-9986-97fdb16c387c\"}"
      },
      {
        "desc": "The title of this column. If not set, column's data field is\n    used instead.",
        "name": "title",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The default sorting order. By default ``ascending`` order is used.",
        "name": "default_sort",
        "type": "Enum('ascending', 'descending')",
        "default": "ascending"
      },
      {
        "desc": "Whether this column is sortable or not. Note that data table has\n    to have sorting enabled to allow sorting in general.",
        "name": "sortable",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The name of the field mapping to a column in the data source.",
        "name": "field",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "Image": {
    "desc": "Render images given as scalar data together with a color mapper.\n\n    In addition to the defined model properties, ``Image`` also can accept\n    a keyword argument ``palette`` in place of an explicit ``color_mapper``.\n    The value should be a list of colors, or the name of one of the built-in\n    palettes in ``bokeh.palettes``. This palette will be used to automatically\n    construct a ``ColorMapper`` model for the ``color_mapper`` property.\n\n    If both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\n    exception will be raised. If neither is passed, then the ``Greys9``\n    palette will be used as a default.",
    "name": "Image",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"color_mapper\": {\"id\": \"4bb411f0-961b-47ae-97e4-64a4a045618f\", \"type\": \"LinearColorMapper\"}, \"dh\": null, \"dilate\": false, \"dw\": null, \"id\": \"075eb89b-8cdc-4658-a6eb-6e5ba0301ddb\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates to locate the image anchors.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "",
        "name": "dw_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "A ``ColorMapper`` to use to map the scalar data from ``image``\n    into RGBA values for display.\n\n    .. note::\n        The color mapping step happens on the client.",
        "name": "color_mapper",
        "type": "Instance(ColorMapper)",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-coordinates to locate the image anchors.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The arrays of scalar data for the images to be colormapped.",
        "name": "image",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "name": "dilate",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "",
        "name": "dh_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.",
        "name": "dh",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.",
        "name": "dw",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      }
    ]
  },
  "HelpTool": {
    "desc": "A button tool to provide a \"help\" link to users.\n\n    The hover text can be customized through the ``help_tooltip`` attribute\n    and the redirect site overridden as well.",
    "name": "HelpTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"help_tooltip\": \"Click the question mark to learn more about Bokeh plot tools.\", \"id\": \"3a2c2b4e-4646-4e51-8cdf-11635fcfd0ce\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"redirect\": \"http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools\", \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Tooltip displayed when hovering over the help icon.",
        "name": "help_tooltip",
        "type": "String",
        "default": "Click the question mark to learn more about Bokeh plot tools."
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Site to be redirected through upon click.",
        "name": "redirect",
        "type": "String",
        "default": "http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools"
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "TeeHead": {
    "desc": "Render a tee-style arrow head.",
    "name": "TeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "proto": "{\"id\": \"25111ab4-a0ce-4710-8090-9e45f2649247\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "type": "Float",
        "default": 25
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "ZoomInTool": {
    "desc": "*toolbar icon*: |zoom_in_icon|\n\n    The zoom-in tool allows users to click a button to zoom in\n    by a fixed amount.\n\n    .. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n        :height: 18pt",
    "name": "ZoomInTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"80469c42-f586-44b1-bd06-060bd40fa492\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the zoom-in tool is constrained to act in. By\n    default the zoom-in zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "name": "factor",
        "type": "Percent",
        "default": 0.1
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Marker": {
    "desc": "Base class for glyphs that are simple markers with line and\n    fill properties, located at an (x, y) location with a specified\n    size.\n\n    .. note::\n        For simplicity, all markers have both line and fill properties\n        declared, however some markers (`Asterisk`, `Cross`, `X`) only\n        draw lines. For these markers, the fill values are simply\n        ignored.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Marker",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"1a3c8c81-5f06-493d-b72d-13c212e0b034\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "TableWidget": {
    "desc": "Abstract base class for data table (data grid) widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "TableWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d1b7f1cf-4333-433e-b8d8-d8e91498a86a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"source\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The source of data for the widget.",
        "name": "source",
        "type": "Instance(DataSource)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "LinearAxis": {
    "desc": "An axis that picks nice numbers for tick locations on a\n    linear scale. Configured with a ``BasicTickFormatter`` by default.",
    "name": "LinearAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"01463d29-9e17-4b25-9f1e-9411603b5ad1\", \"type\": \"BasicTickFormatter\"}, \"id\": \"10fcab9a-0b6c-48cd-ba99-54a89090e4ed\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"40f23e89-ea39-4dcc-9822-12c06ac14891\", \"type\": \"BasicTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": "{\"id\": \"c9aa648b-9b20-4d39-92da-4392fefb904b\"}"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": "{\"id\": \"a6903d69-09e0-4392-8341-a80d0b43bb33\"}"
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), String)",
        "default": {}
      },
      {
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "type": "String",
        "default": ""
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "default": "horizontal"
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "alphabetic"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      }
    ]
  },
  "DatetimeTicker": {
    "desc": "Generate nice ticks across different date and time scales.",
    "name": "DatetimeTicker",
    "bases": [
      "bokeh.models.tickers.CompositeTicker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"6e73aaf7-f2f1-4b1b-93ae-ea7785d36cc2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 0, \"subscribed_events\": [], \"tags\": [], \"tickers\": [{\"id\": \"913cbd71-8c92-4f59-b908-2220b6483284\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"a1a863e9-81d2-4300-a805-5faa81b0ff61\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"59c49cb3-2bfb-40f9-861a-305a022f603d\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"554ae758-b249-496c-8e00-10b1f37df827\", \"type\": \"DaysTicker\"}, {\"id\": \"2a17300a-2881-416a-91dd-72360f38c0dc\", \"type\": \"DaysTicker\"}, {\"id\": \"d99ce69e-8737-4c7c-ad20-6d6c6f2630af\", \"type\": \"DaysTicker\"}, {\"id\": \"29e01c9c-f7aa-4547-9ca3-31f07ca2cfb2\", \"type\": \"DaysTicker\"}, {\"id\": \"264a492f-04cf-4c67-9add-f39c43b2aec8\", \"type\": \"MonthsTicker\"}, {\"id\": \"b4e97d8f-8c0d-4825-aeca-e163889befe1\", \"type\": \"MonthsTicker\"}, {\"id\": \"e0830f86-9cb9-4293-aa94-dae8339ce986\", \"type\": \"MonthsTicker\"}, {\"id\": \"a8301706-b243-441f-9fb1-c25051dcfc4b\", \"type\": \"MonthsTicker\"}, {\"id\": \"076743da-ce2b-4c75-9c45-000c2e3b77c4\", \"type\": \"YearsTicker\"}]}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()",
        "name": "tickers",
        "type": "Seq(Instance(Ticker))",
        "default": [
          "{\"id\": \"ee59e7fd-8fa6-481e-9f77-3ca2416484a5\", \"max_interval\": 500.0, \"num_minor_ticks\": 0}",
          "{\"base\": 60, \"id\": \"7ec1e0e7-c79a-4887-95b8-9e70528c70d2\", \"mantissas\": [1, 2, 5, 10, 15, 20, 30], \"max_interval\": 1800000.0, \"min_interval\": 1000.0, \"num_minor_ticks\": 0}",
          "{\"base\": 24, \"id\": \"9a7e8b04-e5a7-4fa8-a698-c93ef95b97e3\", \"mantissas\": [1, 2, 4, 6, 8, 12], \"max_interval\": 43200000.0, \"min_interval\": 3600000.0, \"num_minor_ticks\": 0}",
          "{\"days\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], \"id\": \"265db74f-2122-4883-a600-4603f1673bce\"}",
          "{\"days\": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], \"id\": \"bb52dea3-f2da-40ea-9330-f42f04e0c0c1\"}",
          "{\"days\": [1, 8, 15, 22], \"id\": \"6ceb3df2-8d84-43e5-b498-040da3c0cc70\"}",
          "{\"days\": [1, 15], \"id\": \"a96d3a93-32fc-4489-8311-0f5a93888da7\"}",
          "{\"id\": \"31eaa469-8de8-4739-90a4-94d34af88ce7\", \"months\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}",
          "{\"id\": \"8eeeef58-3c0a-46c2-be75-14976be7a55f\", \"months\": [0, 2, 4, 6, 8, 10]}",
          "{\"id\": \"9249ece2-c2fb-4d8a-984e-21ccc4a68841\", \"months\": [0, 4, 8]}",
          "{\"id\": \"8442ce66-1edd-4da3-8b3d-305b2f64dc94\", \"months\": [0, 6]}",
          "{\"id\": \"93dc5307-3020-433d-bb9d-bae4fc29d40f\"}"
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "StepInterpolator": {
    "desc": "Compute a step-wise interpolation between the points provided through\n    the ``x``, ``y``, and ``data`` parameters.",
    "name": "StepInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"ea390d6e-c763-456b-a0a4-84e41512736b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mode\": \"after\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "Independant coordiante denoting the location of a point.",
        "name": "x",
        "type": "Either(String, Seq(Float))",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "name": "y",
        "type": "Either(String, Seq(Float))",
        "default": null
      },
      {
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "name": "data",
        "type": "Instance(ColumnarDataSource)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "name": "clip",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n    * ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n    * ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n    * ``center``: Assume the y-value associated with the nearest x-value to the point to transform.",
        "name": "mode",
        "type": "Enum('before', 'after', 'center')",
        "default": "after"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "Tap": {
    "desc": "A base class for tools that respond to tap/click events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Tap",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "proto": "{\"id\": \"9ef1858a-8041-46ca-b66c-1a42d84b933f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Text": {
    "desc": "Render text.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Text.py\n        :source-position: below",
    "name": "Text",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"id\": \"54fe459f-af39-44c9-aaca-5d65db77910b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"x\": null, \"x_offset\": {\"value\": 0}, \"y\": null, \"y_offset\": {\"value\": 0}}",
    "props": [
      {
        "desc": "The x-coordinates to locate the text anchors.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the text, as measured from the horizontal.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0
      },
      {
        "desc": "The text align values for the text.",
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-coordinates to locate the text anchors.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "y_offset",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "The text baseline values for the text.",
        "name": "text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The text color values for the text.",
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The text font size values for the text.",
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "12pt"
        }
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text alpha values for the text.",
        "name": "text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text values to render.",
        "name": "text",
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": "text"
      },
      {
        "desc": "The text font values for the text.",
        "name": "text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "x_offset",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text font style values for the text.",
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      }
    ]
  },
  "MercatorTileSource": {
    "desc": "A base class for Mercator tile services (e.g.``WMTSTileSource``).",
    "name": "MercatorTileSource",
    "bases": [
      "bokeh.models.tiles.TileSource"
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"46965a2d-dbfb-44c5-a41a-8d52672b482c\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "type": "Float",
        "default": 156543.03392804097
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "type": "Int",
        "default": 256
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "DiamondCross": {
    "desc": "Render diamond markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/DiamondCross.py\n        :source-position: below",
    "name": "DiamondCross",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"953f7cd8-224d-437e-aff1-5578bf84a97e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "CategoricalColorMapper": {
    "desc": "Map categories to colors. Values that are passed to\n    this mapper that aren't in factors will be assigned the nan_color.",
    "name": "CategoricalColorMapper",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ],
    "proto": "{\"factors\": null, \"id\": \"4f111d36-ee1f-410a-b195-c442d14116cb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "type": "Seq(Color)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "type": "Color",
        "default": "gray"
      },
      {
        "desc": "A sequence of factors / categories that map to the color palette.",
        "name": "factors",
        "type": "Either(Seq(String), Seq(Int), Seq(Float), Seq(Datetime), Seq(Date))",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "HTMLTemplateFormatter": {
    "desc": "HTML formatter using a template.\n    This uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\n    The formatter has access other items in the row via the `dataContext` object passed to the formatter.\n    So, for example, if another column in the datasource was named `url`, the template could access it as:\n\n        <a href=\"<%= url %>\"><%= value %></a>\n\n    To use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\n    or `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\n    Example: Simple HTML template to format the column value as code.\n\n        HTMLTemplateFormatter(template='<code><%= value %></code>')\n\n    Example: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n        HTMLTemplateFormatter(template='<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>')",
    "name": "HTMLTemplateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "proto": "{\"id\": \"6243aa94-31fb-468b-91b1-27feaf59cbf7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"template\": \"<%= value %>\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Template string to be used by Underscore's template method.",
        "name": "template",
        "type": "String",
        "default": "<%= value %>"
      }
    ]
  },
  "Grid": {
    "desc": "Display horizontal or vertical grid lines at locations\n    given by a supplied ``Ticker``.",
    "name": "Grid",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "proto": "{\"band_fill_alpha\": {\"value\": 0}, \"band_fill_color\": {\"value\": null}, \"bounds\": \"auto\", \"dimension\": 0, \"grid_line_alpha\": {\"value\": 1.0}, \"grid_line_cap\": \"butt\", \"grid_line_color\": {\"value\": \"#e5e5e5\"}, \"grid_line_dash\": [], \"grid_line_dash_offset\": 0, \"grid_line_join\": \"miter\", \"grid_line_width\": {\"value\": 1}, \"id\": \"971d35b1-d627-4ef4-a9ec-9470b577f555\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"minor_grid_line_alpha\": {\"value\": 1.0}, \"minor_grid_line_cap\": \"butt\", \"minor_grid_line_color\": {\"value\": null}, \"minor_grid_line_dash\": [], \"minor_grid_line_dash_offset\": 0, \"minor_grid_line_join\": \"miter\", \"minor_grid_line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "The Ticker to use for computing locations for the Grid lines.",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line cap of the minor Grid lines.",
        "name": "minor_grid_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color of alternating bands between Grid lines.",
        "name": "band_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "The line alpha of the minor Grid lines.",
        "name": "minor_grid_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash of the minor Grid lines.",
        "name": "minor_grid_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the Grid lines.",
        "name": "grid_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#e5e5e5"
      },
      {
        "desc": "The line alpha of the Grid lines.",
        "name": "grid_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line width of the minor Grid lines.",
        "name": "minor_grid_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join of the minor Grid lines.",
        "name": "minor_grid_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "Bounds for the rendered grid lines. If unset, the grid\n    lines will span the entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float))",
        "default": "auto"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the Grid lines.",
        "name": "grid_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill alpha of alternating bands between Grid lines.",
        "name": "band_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The line dash of the Grid lines.",
        "name": "grid_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line join of the Grid lines.",
        "name": "grid_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor Grid lines.",
        "name": "minor_grid_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line color of the minor Grid lines.",
        "name": "minor_grid_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "Which dimension the Axis Grid lines will intersect. The\n    x-axis is dimension 0 (vertical Grid lines) and the y-axis\n    is dimension 1 (horizontal Grid lines).",
        "name": "dimension",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line cap of the Grid lines.",
        "name": "grid_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line dash offset of the Grid lines.",
        "name": "grid_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "underlay"
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "CircleCross": {
    "desc": "Render circle markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/CircleCross.py\n        :source-position: below",
    "name": "CircleCross",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"ac1f46a0-622c-4a4a-8ae9-1ef6ada1e10a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "LegendItem": {
    "desc": "",
    "name": "LegendItem",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"20309ab6-3343-48fc-9d49-36aed0e47d6d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": null, \"name\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A label for this legend. Can be a string, or a column of a\n    ColumnDataSource. If ``label`` is a field, then it must\n    be in the renderers' data_source.",
        "name": "label",
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A list of the glyph renderers to draw in the legend. If ``label`` is a field,\n    then all data_sources of renderers must be the same.",
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "default": []
      }
    ]
  },
  "Dropdown": {
    "desc": "A dropdown button.",
    "name": "Dropdown",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"default_value\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"e44b9bb0-0812-4b32-93ed-3214edc6f1ad\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Dropdown\", \"menu\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"value\": null, \"width\": null}",
    "props": [
      {
        "desc": "The default value, otherwise the first item in ``menu`` will be used.",
        "name": "default_value",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Button's dropdown menu consisting of entries containing item's text and\n    value name. Use ``None`` as a menu separator.",
        "name": "menu",
        "type": "List(Tuple(String, String))",
        "default": []
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "name": "label",
        "type": "String",
        "default": "Dropdown"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A private property used to trigger ``on_click`` event handler.",
        "name": "value",
        "type": "String",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "type": "Instance(AbstractIcon)",
        "default": null
      }
    ]
  },
  "ToolEvents": {
    "desc": "A class for reporting tools geometries from BokehJS.\n\n    .. warning::\n        This class will be superceded by a new general events system in the\n        near future.",
    "name": "ToolEvents",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"geometries\": [], \"id\": \"adf1dc0d-c65f-4c82-b057-ae8fd521767f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "",
        "name": "geometries",
        "type": "List(Dict(String, Any))",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "PolySelectTool": {
    "desc": "*toolbar icon*: |poly_select_icon|\n\n    The polygon selection tool allows users to make selections on a\n    Plot by indicating a polygonal region with mouse clicks. single\n    clicks (or taps) add successive points to the definition of the\n    polygon, and a double click (or tap) indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n        :height: 18pt",
    "name": "PolySelectTool",
    "bases": [
      "bokeh.models.tools.Tap"
    ],
    "proto": "{\"id\": \"518bb82b-a4b1-433b-aeaa-f14a5abdfe09\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"e0cd96ce-19ea-4dba-9228-88a57ca2572f\", \"type\": \"PolyAnnotation\"}, \"plot\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "type": "Instance(PolyAnnotation)",
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"f0c0b1dc-2553-412f-8e29-26ef940ad6a9\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "ZoomOutTool": {
    "desc": "*toolbar icon*: |zoom_out_icon|\n\n    The zoom-out tool allows users to click a button to zoom out\n    by a fixed amount.\n\n    .. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n        :height: 18pt",
    "name": "ZoomOutTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"ed549d7f-7503-4842-8049-c97f4b1906ad\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the zoom-out tool is constrained to act in. By\n    default the zoom-out tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "name": "factor",
        "type": "Percent",
        "default": 0.1
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "DatetimeAxis": {
    "desc": "An LinearAxis that picks nice numbers for tick locations on\n    a datetime scale. Configured with a ``DatetimeTickFormatter`` by\n    default.",
    "name": "DatetimeAxis",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"dda7cb38-e2c4-4e5c-84a3-a9b99500217f\", \"type\": \"DatetimeTickFormatter\"}, \"id\": \"84f6457e-efc7-4538-90dd-b635a4cc1e09\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"703ffdb7-80f7-4efd-ac03-780b322e573d\", \"type\": \"DatetimeTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": "{\"id\": \"2bca52d8-bcc7-4a88-98dc-b4e9572ee608\"}"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": "{\"id\": \"03d57f05-5d8d-4ac1-8675-6ec6b3d32eaa\"}"
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), String)",
        "default": {}
      },
      {
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "type": "String",
        "default": ""
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "default": "horizontal"
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "alphabetic"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      }
    ]
  },
  "AbstractButton": {
    "desc": "A base class that defines common properties for all button types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "AbstractButton",
    "bases": [
      "bokeh.models.widgets.widget.Widget",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"1698d3cf-089c-484c-bd71-d3738440df46\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "name": "label",
        "type": "String",
        "default": "Button"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "type": "Instance(AbstractIcon)",
        "default": null
      }
    ]
  },
  "AbstractIcon": {
    "desc": "An abstract base class for icon widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "AbstractIcon",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"7f42bcd1-c220-4fd7-864c-85c1fd963411\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "BasicTicker": {
    "desc": "Generate ticks on a linear scale.\n\n    .. note::\n        This class may be renamed to ``LinearTicker`` in the future.",
    "name": "BasicTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"16a0adc7-f40e-499e-acd4-498e8bcf1c40\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "type": "Float",
        "default": 10.0
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "type": "Float",
        "default": 0.0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "type": "Seq(Float)",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "SaveTool": {
    "desc": "*toolbar icon*: |save_icon|\n\n    The save tool is an action. When activated, the tool opens a download dialog\n    which allows to save an image reproduction of the plot in PNG format. If\n    automatic download is not support by a web browser, the tool falls back to\n    opening the generated image in a new tab or window. User then can manually\n    save it by right clicking on the image and choosing \"Save As\" (or similar)\n    menu item.\n\n    .. |save_icon| image:: /_images/icons/Save.png\n        :height: 18pt",
    "name": "SaveTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"id\": \"daf8f0f2-d972-434e-93c6-5a33691c5938\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "AutocompleteInput": {
    "desc": "Single-line input widget with auto-completion.",
    "name": "AutocompleteInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ],
    "proto": "{\"callback\": null, \"completions\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d1248cb8-06b8-42b5-a72b-3fd1b7b3fd65\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A list of completion strings. This will be used to guide the\n    user upon typing the beginning of a desired value.",
        "name": "completions",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Placeholder for empty input field",
        "name": "placeholder",
        "type": "String",
        "default": ""
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Initial or entered text value.",
        "name": "value",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "DateEditor": {
    "desc": "Calendar-based date cell editor.",
    "name": "DateEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"39ff0acc-da8d-41dc-9ec2-0af72c0d1ca9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "CheckboxGroup": {
    "desc": "A group of check boxes.",
    "name": "CheckboxGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "proto": "{\"active\": [], \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f7901009-4c1a-4d7b-9004-bcc26b952cba\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The list of indices of selected check boxes.",
        "name": "active",
        "type": "List(Int)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "name": "inline",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "PreText": {
    "desc": "A block (paragraph) of pre-formatted text.\n\n    This Bokeh model corresponds to an HTML ``<pre>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_pretext.py\n        :source-position: below",
    "name": "PreText",
    "bases": [
      "bokeh.models.widgets.markups.Paragraph"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"4a3bbcc0-4686-4be2-ae14-4d85325ae0e5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The contents of the widget.",
        "name": "text",
        "type": "String",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "CellEditor": {
    "desc": "Abstract base class for data table's cell editors.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "CellEditor",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"779fe5e7-b71c-4d02-992d-d85337b10c6f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Whisker": {
    "desc": "Render a whisker along a dimension.",
    "name": "Whisker",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"base\": null, \"dimension\": \"height\", \"id\": \"a94a5adb-22e9-441a-981b-df5fed04b5ae\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"lower\": null, \"lower_head\": {\"id\": \"4ae1b07c-6c1f-4897-afc2-c324329f60b7\", \"type\": \"TeeHead\"}, \"name\": null, \"plot\": null, \"source\": {\"id\": \"ed1c9bf3-1510-4fa2-831c-128909545c35\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"upper_head\": {\"id\": \"0132d370-1a6d-4fb8-b3ce-40cf6086d3a5\", \"type\": \"TeeHead\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "type": "Instance(DataSource)",
        "default": "{\"data\": {}, \"id\": \"cee0cf71-7792-46b0-afa1-362017994355\"}"
      },
      {
        "desc": "The line join values for the whisker body.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "Instance of ArrowHead.",
        "name": "upper_head",
        "type": "Instance(ArrowHead)",
        "default": "{\"id\": \"7c215b81-12f8-46ec-8b76-6567d5ddc80e\", \"level\": \"underlay\", \"size\": 10}"
      },
      {
        "desc": "The coordinations of the upper end of the whiskers.",
        "name": "upper",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "Instance of ArrowHead.",
        "name": "lower_head",
        "type": "Instance(ArrowHead)",
        "default": "{\"id\": \"e01625e2-65b7-4044-a7b5-591ec5d7890c\", \"level\": \"underlay\", \"size\": 10}"
      },
      {
        "desc": "The line width values for the whisker body.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the whisker body.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the whisker body.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "",
        "name": "base_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "",
        "name": "lower_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "upper_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "name": "base",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The direction of the band.",
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "default": "height"
      },
      {
        "desc": "The line cap values for the whisker body.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line dash values for the whisker body.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the whisker body.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The coordinates of the lower end of the whiskers.",
        "name": "lower",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "underlay"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "LogTicker": {
    "desc": "Generate ticks on a log scale.",
    "name": "LogTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"119e5047-cbc0-4f80-9bd3-947c9a5b8cec\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "type": "Float",
        "default": 10.0
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "type": "Float",
        "default": 0.0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "type": "Seq(Float)",
        "default": [
          1,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "ResetTool": {
    "desc": "*toolbar icon*: |reset_icon|\n\n    The reset tool is an action. When activated in the toolbar, the tool\n    resets the data bounds of the plot to their values when the plot was\n    initially created.\n\n    Optionally, the reset tool also resets the plat canvas dimensions to\n    their original size\n\n    .. |reset_icon| image:: /_images/icons/Reset.png\n        :height: 18pt",
    "name": "ResetTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"id\": \"0f69660f-abd6-4fb0-8a76-82f08dde9c63\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"reset_size\": true, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether activating the Reset tool should also reset the plot's canvas\n    dimensions to their original size.",
        "name": "reset_size",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "FixedTicker": {
    "desc": "Generate ticks at fixed, explicitly supplied locations.\n\n    .. note::\n        The ``desired_num_ticks`` property is ignored by this Ticker.",
    "name": "FixedTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"d827b801-1559-4174-9292-5fd2d2f0d142\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"ticks\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of tick locations.",
        "name": "ticks",
        "type": "Seq(Float)",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "Circle": {
    "desc": "Render circle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Circle.py\n        :source-position: below",
    "name": "Circle",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"2938dd61-53e5-484c-a1c0-4f124610e76f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"radius_dimension\": \"x\", \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "What dimension to measure circle radii along.\n\n    When the data space aspect ratio is not 1-1, then the size of the drawn\n    circles depends on what direction is used to measure the \"distance\" of\n    the radius. This property allows that direction to be controlled.",
        "name": "radius_dimension",
        "type": "Enum('x', 'y')",
        "default": "x"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The radius values for circle markers (in \"data space\" units, by default).\n\n    .. note::\n        Circle markers are slightly unusual in that they support specifying\n        a radius in addition to a size. Only one of ``radius`` or ``size``\n        should be given.\n\n    .. warning::\n        Note that ``Circle`` glyphs are always drawn as circles on the screen,\n        even in cases where the data space aspect ratio is not 1-1. In all\n        cases where radius values are specified, the \"distance\" for the radius\n        is measured along the dimension specified by ``radius_dimension``. If\n        the aspect ratio is very large or small, the drawn circles may appear\n        much larger or smaller than expected. See :bokeh-issue:`626` for more\n        information.",
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      }
    ]
  },
  "RadioButtonGroup": {
    "desc": "A group of radio boxes rendered as toggle buttons.",
    "name": "RadioButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "proto": "{\"active\": null, \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"183fa1bf-ea8f-4fe6-a95c-8d84c00efb37\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected.",
        "name": "active",
        "type": "Int",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "GuideRenderer": {
    "desc": "A base class for all guide renderer types. ``GuideRenderer`` is\n    not generally useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "GuideRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "proto": "{\"id\": \"32f2838f-bf9d-4205-9ee0-9082e78213b3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "SelectEditor": {
    "desc": "Select cell editor.",
    "name": "SelectEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"eed38211-80d1-42ba-ba02-ef1dc38e1821\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The list of options to select from.",
        "name": "options",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "ButtonGroup": {
    "desc": "Abstract base class for groups with items rendered as buttons.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"e0dd611a-ea3a-4642-ad4b-ab9804b4d9d4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "SquareCross": {
    "desc": "Render square markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/SquareCross.py\n        :source-position: below",
    "name": "SquareCross",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"24675acc-df36-457b-aff2-23a6763fa586\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "MultiSelect": {
    "desc": "Multi-select widget.",
    "name": "MultiSelect",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"b1532b5f-a18f-4b38-882e-347a0fb52c53\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"size\": 4, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.",
        "name": "options",
        "type": "List(Either(String, Tuple(String, String)))",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Initial or selected values.",
        "name": "value",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A callback to run in the browser whenever the current selection value\n    changes.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "The number of visible options in the dropdown list. (This uses the\n    ``select`` HTML element's ``size`` attribute. Some browsers might not\n    show less than 3 options.)",
        "name": "size",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "CustomJS": {
    "desc": "Execute a JavaScript function.",
    "name": "CustomJS",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"1b20773c-183e-49f6-b8de-6be9fe66ca35\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback.",
        "name": "args",
        "type": "Dict(String, Instance(Model))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A snippet of JavaScript code to execute in the browser. The\n    code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. Additionally,\n    a ``cb_obj`` parameter contains the object that triggered the callback\n    and an optional ``cb_data`` parameter that contains any tool-specific data\n    (i.e. mouse coordinates and hovered glyph indices for the HoverTool).\n\n    .. note:: Use ``CustomJS.from_coffeescript()`` for CoffeeScript source code.",
        "name": "code",
        "type": "String",
        "default": ""
      }
    ]
  },
  "LabelSet": {
    "desc": "Render multiple text labels as annotations.\n\n    ``LabelSet`` will render multiple text labels at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space. In this case (as opposed to the single ``Label`` model),\n    ``x`` and ``y`` can also be the name of a column from a\n    :class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\n    will be \"vectorized\" using coordinate values from the specified columns.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\n    may be vectorized by giving the name of a data source column.\n\n    Additionally, the label can be rotated with the ``angle`` property (which\n    may also be a column name.)\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.\n\n    The data source is provided by setting the ``source`` property.",
    "name": "LabelSet",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"e89aa3bf-2d01-4f5f-b265-6cdf702c033e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"source\": {\"id\": \"dc0a2458-cbe3-4af3-9cf1-613d1aa6ae18\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"visible\": true, \"x\": null, \"x_offset\": {\"value\": 0}, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": {\"value\": 0}, \"y_range_name\": \"default\", \"y_units\": \"data\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "type": "Instance(DataSource)",
        "default": "{\"data\": {}, \"id\": \"6b193dfa-ce7d-4f35-811e-14418add007d\"}"
      },
      {
        "desc": "The line width values for the text bounding box.",
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "y_offset",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "The line cap values for the text bounding box.",
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The text font size values for the text.",
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "12pt"
        }
      },
      {
        "desc": "The line alpha values for the text bounding box.",
        "name": "border_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset values for the text bounding box.",
        "name": "border_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text alpha values for the text.",
        "name": "text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the text bounding box.",
        "name": "border_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "y_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The text values to render.",
        "name": "text",
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": "text"
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The fill alpha values for the text bounding box.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The fill color values for the text bounding box.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The angles to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0
      },
      {
        "desc": "The x-coordinates to locate the text anchors.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The text align values for the text.",
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The y-coordinates to locate the text anchors.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "default": "canvas"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The text baseline values for the text.",
        "name": "text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line join values for the text bounding box.",
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The text color values for the text.",
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "x_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font values for the text.",
        "name": "text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The line color values for the text bounding box.",
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "x_offset",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The text font style values for the text.",
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      }
    ]
  },
  "PolyAnnotation": {
    "desc": "Render a shaded polygonal region as an annotation.",
    "name": "PolyAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"4762ad47-d778-47b6-b42f-41345c759ff6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"xs\": [], \"xs_units\": \"data\", \"y_range_name\": \"default\", \"ys\": [], \"ys_units\": \"data\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the polygon.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "ys_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line width values for the polygon.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the polygon.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.3
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the polygon.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The fill alpha values for the polygon.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "xs_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The y-coordinates of the region to draw.",
        "name": "ys",
        "type": "Seq(Float)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The x-coordinates of the region to draw.",
        "name": "xs",
        "type": "Seq(Float)",
        "default": []
      },
      {
        "desc": "The line cap values for the polygon.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the polygon.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the polygon.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#cccccc"
      },
      {
        "desc": "The fill color values for the polygon.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#fff9ba"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "ColorMapper": {
    "desc": "Base class for color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ColorMapper",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "proto": "{\"id\": \"68b0cdbb-154a-4d86-8c1b-ef9fef754131\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "type": "Seq(Color)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "type": "Color",
        "default": "gray"
      }
    ]
  },
  "BoxSelectTool": {
    "desc": "*toolbar icon*: |box_select_icon|\n\n    The box selection tool allows users to make selections on a\n    Plot by indicating a rectangular region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n\n    .. |box_select_icon| image:: /_images/icons/BoxSelect.png\n        :height: 18pt",
    "name": "BoxSelectTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "proto": "{\"callback\": null, \"dimensions\": \"both\", \"id\": \"39620e7e-50ee-4831-b6cb-08a80d38c2db\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"a7479123-64b2-4c9a-a3ab-5a92204fc943\", \"type\": \"BoxAnnotation\"}, \"plot\": null, \"renderers\": [], \"select_every_mousemove\": false, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the box selection is to be free in. By default,\n    users may freely draw selections boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "A callback to run in the browser on completion of drawing a selection box.\n    The cb_data parameter that is available to the Callback code will contain\n    one BoxSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the selection box",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: False",
        "name": "select_every_mousemove",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"cf829606-9088-4678-b52d-77d067db54f9\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}"
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Span": {
    "desc": "Render a horizontal or vertical line span.",
    "name": "Span",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"dimension\": \"width\", \"id\": \"6e9157f7-30f3-4bd1-bf9e-33f01212a24d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"location\": null, \"location_units\": \"data\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the span.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "Specifies whether the span is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\"",
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "default": "canvas"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The unit type for the location attribute. Interpreted as \"data space\"\n    units by default.",
        "name": "location_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The location of the span, along ``dimension``.",
        "name": "location",
        "type": "Float",
        "default": null
      },
      {
        "desc": "The direction of the span.",
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "default": "width"
      },
      {
        "desc": "The line cap values for the span.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line dash values for the span.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the span.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the span.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line alpha values for the span.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The line dash offset values for the span.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "NormalHead": {
    "desc": "Render a closed-body arrow head.",
    "name": "NormalHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"eee2820d-3079-4889-b5e1-7b1627544f6c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the arrow head interior.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "type": "Float",
        "default": 25
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The fill alpha values for the arrow head interior.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "CategoricalTicker": {
    "desc": "Generate ticks for categorical ranges.",
    "name": "CategoricalTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "proto": "{\"id\": \"9562d2fc-85c7-4581-b30a-a83e566c70f4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "TickFormatter": {
    "desc": "A base class for all tick formatter types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "TickFormatter",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"267b1e58-7bfc-4efd-861b-f0747ea48946\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Column": {
    "desc": "Lay out child components in a single vertical row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.",
    "name": "Column",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f3396bc4-d60d-428e-bce2-0900f27fa6a2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Box": {
    "desc": "Abstract base class for Row and Column. Do not use directly.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Box",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"122218d2-ba23-42ad-9caa-2ebea2322c68\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "NumeralTickFormatter": {
    "desc": "Tick formatter based on a human-readable format string.",
    "name": "NumeralTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"format\": \"0,0\", \"id\": \"53df921b-19b9-442a-bd2c-1b1fcbe11982\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "name": "rounding",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "default": "round"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html",
        "name": "format",
        "type": "String",
        "default": "0,0"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "name": "language",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "default": "en"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "DataRange1d": {
    "desc": "An auto-fitting range in a continuous scalar dimension.\n    The upper and lower bounds are set to the min and max of the data.",
    "name": "DataRange1d",
    "bases": [
      "bokeh.models.ranges.DataRange"
    ],
    "proto": "{\"bounds\": null, \"callback\": null, \"default_span\": 2.0, \"end\": null, \"flipped\": false, \"follow\": null, \"follow_interval\": null, \"id\": \"3fd47c00-84b6-4376-9c1d-41a30c592402\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"names\": [], \"range_padding\": 0.1, \"range_padding_units\": \"percent\", \"renderers\": [], \"start\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\n    always be constrained to that::\n\n         abs(r.start - r.end) <= follow_interval\n\n    is maintained.",
        "name": "follow_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)",
        "name": "range_padding_units",
        "type": "Enum('percent', 'absolute')",
        "default": "percent"
      },
      {
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the DataRange1d.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether\n    your range is increasing or decreasing, the first item should be the\n    minimum value of the range and the second item should be the maximum.\n    Setting ``min > max`` will result in a ``ValueError``.\n\n    If you only want to constrain one end of the plot, you can set ``min`` or\n    ``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``",
        "name": "bounds",
        "type": "MinMaxBounds(Auto, Tuple(Float, Float))",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether the range should be \"flipped\" from its normal direction when\n    auto-ranging.",
        "name": "flipped",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound.",
        "name": "min_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "An explicitly supplied range start. If provided, will override\n    automatically computed start value.",
        "name": "start",
        "type": "Float",
        "default": null
      },
      {
        "desc": "How much padding to add around the computed data bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``.",
        "name": "range_padding",
        "type": "Float",
        "default": 0.1
      },
      {
        "desc": "Configure the data to follow one or the other data extreme, with a\n    maximum range size of ``follow_interval``.\n\n    If set to ``\"start\"`` then the range will adjust so that ``start`` always\n    corresponds to the minimum data value (or maximum, if ``flipped`` is\n    ``True``).\n\n    If set to ``\"end\"`` then the range will adjust so that ``end`` always\n    corresponds to the maximum data value (or minimum, if ``flipped`` is\n    ``True``).\n\n    If set to ``None`` (default), then auto-ranging does not follow, and\n    the range will encompass both the minimum and maximum data values.\n\n    ``follow`` cannot be used with bounds, and if set, bounds will be set to\n    ``None``.",
        "name": "follow",
        "type": "Enum('start', 'end')",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Note that ``bounds`` can impose an\n    implicit constraint on the maximum interval as well.",
        "name": "max_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "An explicitly supplied range end. If provided, will override\n    automatically computed end value.",
        "name": "end",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A default width for the interval, in case ``start`` is equal to ``end``\n    (if used with a log axis, default_span is in powers of 10).",
        "name": "default_span",
        "type": "Float",
        "default": 2.0
      }
    ]
  },
  "BooleanFormatter": {
    "desc": "Boolean (check mark) cell formatter.",
    "name": "BooleanFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "proto": "{\"icon\": \"check\", \"id\": \"c6d121b8-0682-4ded-b022-04b2b0389b6b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The icon visualizing the check mark.",
        "name": "icon",
        "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')",
        "default": "check"
      }
    ]
  },
  "GlyphRenderer": {
    "desc": "",
    "name": "GlyphRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "proto": "{\"data_source\": null, \"glyph\": null, \"hover_glyph\": null, \"id\": \"c23d6163-d89f-43ed-ba25-a4294a7f732d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"glyph\", \"muted\": false, \"muted_glyph\": null, \"name\": null, \"nonselection_glyph\": \"auto\", \"selection_glyph\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "",
        "name": "muted",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional glyph used for selected points.\n\n    If set to \"auto\" then the standard glyph will be used for selected\n    points.",
        "name": "selection_glyph",
        "type": "Either(Auto, Instance(Glyph))",
        "default": "auto"
      },
      {
        "desc": "An optional glyph used for inspected points, e.g., those that are\n    being hovered over by a HoverTool.",
        "name": "hover_glyph",
        "type": "Instance(Glyph)",
        "default": null
      },
      {
        "desc": "",
        "name": "muted_glyph",
        "type": "Instance(Glyph)",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "name": "data_source",
        "type": "Instance(DataSource)",
        "default": null
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default -range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The glyph to render, in conjunction with the supplied data source\n    and ranges.",
        "name": "glyph",
        "type": "Instance(Glyph)",
        "default": null
      },
      {
        "desc": "An optional glyph used for explicitly non-selected points\n    (i.e., non-selected when there are other points that are selected,\n    but not when no points at all are selected.)\n\n    If set to \"auto\" then a glyph with a low alpha value (0.1) will\n    be used for non-selected points.",
        "name": "nonselection_glyph",
        "type": "Either(Auto, Instance(Glyph))",
        "default": "auto"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "glyph"
      }
    ]
  },
  "Widget": {
    "desc": "A base class for all interactive widget types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Widget",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"63da48f5-2835-4d48-896d-238e7a7efee3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "CategoricalTickFormatter": {
    "desc": "Display tick values from categorical ranges as string\n    values.",
    "name": "CategoricalTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"id\": \"63622a8f-a546-4dbd-bd0f-3bf5fc842285\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "CategoricalAxis": {
    "desc": "An axis that picks evenly spaced tick locations for a\n    collection of categories/factors.",
    "name": "CategoricalAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"d95a5a57-0b45-46aa-8bfa-e2b529d3aab9\", \"type\": \"CategoricalTickFormatter\"}, \"id\": \"4388e0bc-a919-406e-9649-d6464af0b46d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"b6c57856-4341-4f7d-970e-dbff4ec39a73\", \"type\": \"CategoricalTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": "{\"id\": \"522e411d-c885-49f5-827a-6ddf2cab903a\"}"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": "{\"id\": \"0b617fe0-ab08-48ce-8d1f-15042f98dcd9\"}"
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), String)",
        "default": {}
      },
      {
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "type": "String",
        "default": ""
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "default": "horizontal"
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "alphabetic"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      }
    ]
  },
  "Title": {
    "desc": "Render a single title box as an annotation.",
    "name": "Title",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "proto": "{\"align\": \"left\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"26618c02-25e2-4d18-a60d-56ca3f16a15f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"offset\": 0, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_alpha\": {\"value\": 1.0}, \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"10pt\"}, \"text_font_style\": \"bold\", \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line width values for the text bounding box.",
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line cap values for the text bounding box.",
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "",
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The line alpha values for the text bounding box.",
        "name": "border_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset values for the text bounding box.",
        "name": "border_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "Location to align the title text.",
        "name": "align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The line dash values for the text bounding box.",
        "name": "border_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "An alpha value to use to fill text with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).",
        "name": "text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text value to render.",
        "name": "text",
        "type": "String",
        "default": null
      },
      {
        "desc": "The fill color values for the text bounding box.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "The fill alpha values for the text bounding box.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "default": "canvas"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The line join values for the text bounding box.",
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A color to use to fill text with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp",
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\n    different directions based on the location of the title:\n\n        * above: shifts title right\n        * right: shifts title down\n        * below: shifts title right\n        * left: shifts title up",
        "name": "offset",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Name of a font to use for rendering text, e.g., ``'times'``,\n    ``'helvetica'``.",
        "name": "text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The line color values for the text bounding box.",
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "A style to use for rendering text.\n\n    Acceptable values are:\n\n    - ``'normal'`` normal text\n    - ``'italic'`` *italic text*\n    - ``'bold'`` **bold text**",
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "bold"
      }
    ]
  },
  "Square": {
    "desc": "Render a square marker, optionally rotated. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Square.py\n        :source-position: below",
    "name": "Square",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"a04bf84f-38f2-47fe-b631-fc3279a626d3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "Div": {
    "desc": "A block (div) of text.\n\n    This Bokeh model corresponds to an HTML ``<div>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_div.py\n        :source-position: below",
    "name": "Div",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ff4e8934-12dc-4fd0-b96e-173c6a1d5d98\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"render_as_text\": false, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Whether the contents should be rendered as raw text or as interpreted HTML.\n    The default value is ``False``, meaning contents are rendered as HTML.",
        "name": "render_as_text",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The contents of the widget.",
        "name": "text",
        "type": "String",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "TileSource": {
    "desc": "A base class for all tile source types.\n\n    In general, tile sources are used as a required input for ``TileRenderer``.",
    "name": "TileSource",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"8b765e8e-51ab-4490-a9b6-c59d4c178680\", \"initial_resolution\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"x_origin_offset\": null, \"y_origin_offset\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "type": "Int",
        "default": 256
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "QUADKEYTileSource": {
    "desc": "The QUADKEYTileSource has the same tile origin as the WMTSTileSource\n    but requests tiles using a `quadkey` argument instead of X, Y, Z e.g. ``http://your.quadkey.tile.host/{Q}.png``",
    "name": "QUADKEYTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"d5a4f775-43e6-42ef-93d1-aff7e5ce79e7\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "type": "Float",
        "default": 156543.03392804097
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "type": "Int",
        "default": 256
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "MercatorTickFormatter": {
    "desc": "TickFormatter for values in WebMercator units.\n\n    Some map plot types internally use WebMercator to describe coordinates,\n    plot bounds, etc. These units are not very human-friendly. This tick\n    formatter will convert WebMercator units into Latitude and Longitude\n    for display on axes.",
    "name": "MercatorTickFormatter",
    "bases": [
      "bokeh.models.formatters.BasicTickFormatter"
    ],
    "proto": "{\"dimension\": null, \"id\": \"740b2301-420b-47f7-9ba4-21f36a4ee815\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high",
        "name": "power_limit_high",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "Specify whether to format ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick labels from Web Mercator requires considering coordinates from both\n    dimensions together. Use this property to specify which result should be\n    used for display.\n\n    Typically, if the formatter is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the formatter is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTickFormatter will result in\n    a validation error and a JavaScript console error.",
        "name": "dimension",
        "type": "Enum('lat', 'lon')",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "How many digits of precision to display in tick labels.",
        "name": "precision",
        "type": "Either(Auto, Int)",
        "default": "auto"
      },
      {
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.",
        "name": "use_scientific",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low",
        "name": "power_limit_low",
        "type": "Int",
        "default": -3
      }
    ]
  },
  "Action": {
    "desc": "A base class for tools that are buttons in the toolbar.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Action",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "proto": "{\"id\": \"bd4f6081-9175-4ad2-b94d-25b2fe8bc299\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Ellipse": {
    "desc": "Render ellipses.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Ellipse.py\n        :source-position: below",
    "name": "Ellipse",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"1e9bd417-808f-4cf1-838c-887b44896394\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the ovals.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The widths of each ellipse.",
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line width values for the ovals.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the ovals.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the ovals.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The x-coordinates of the centers of the ellipses.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angle the ellipses are rotated from horizontal. [rad]",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "",
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line dash offset values for the ovals.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the centers of the ellipses.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the ovals.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the ovals.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The heights of each ellipse.",
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line color values for the ovals.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "",
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The fill color values for the ovals.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      }
    ]
  },
  "Interpolator": {
    "desc": "Base class for interpolator transforms.\n\n    Interpolators return the value of a function which has been evaluated\n    between specified (x, y) pairs of data.  As an example, if two control\n    point pairs were provided to the interpolator, a linear interpolaction\n    at a specific value of 'x' would result in the value of 'y' which existed\n    on the line conneting the two control points.\n\n    The control point pairs for the interpolators can be specified through either\n\n    * A literal sequence of values:\n\n    .. code-block: python\n\n        interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n    * or a pair of columns defined in a `ColumnDataSource` object:\n\n    .. code-block: python\n\n        interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\n    This is the base class and is not intended to end use.  Please see the\n    documentation for the final derived classes (Jitter, LineraInterpolator,\n    StepInterpolator) for mor information on their specific methods of\n    interpolation.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Interpolator",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"4134b051-5026-41c0-a5b8-44f9aec7450e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "Independant coordiante denoting the location of a point.",
        "name": "x",
        "type": "Either(String, Seq(Float))",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "name": "y",
        "type": "Either(String, Seq(Float))",
        "default": null
      },
      {
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "name": "data",
        "type": "Instance(ColumnarDataSource)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "name": "clip",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "StringEditor": {
    "desc": "Basic string cell editor with auto-completion.",
    "name": "StringEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"completions\": [], \"id\": \"6dd5dc94-b6b2-4f03-9d97-4fc78db60a04\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of completion strings.",
        "name": "completions",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "Slider": {
    "desc": "Slider-based number selection widget.",
    "name": "Slider",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": null, \"disabled\": false, \"end\": 1, \"height\": null, \"id\": \"0ed76f84-0828-43fd-a24a-9663675d64f0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"sizing_mode\": \"fixed\", \"start\": 0, \"step\": 0.1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": 0.5, \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The step between consecutive values.",
        "name": "step",
        "type": "Float",
        "default": 0.1
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time.",
        "name": "callback_policy",
        "type": "Enum('continuous', 'throttle', 'mouseup')",
        "default": "throttle"
      },
      {
        "desc": "Number of microseconds to pause between callback calls as the slider is moved.",
        "name": "callback_throttle",
        "type": "Float",
        "default": 200
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Initial or selected value.",
        "name": "value",
        "type": "Float",
        "default": 0.5
      },
      {
        "desc": "A callback to run in the browser whenever the current Slider value changes.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "The minimum allowable value.",
        "name": "start",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "The maximum allowable value.",
        "name": "end",
        "type": "Float",
        "default": 1
      },
      {
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "default": "horizontal"
      }
    ]
  },
  "Tooltip": {
    "desc": "Render a tooltip.\n\n    .. note::\n        This model is currently managed by BokehJS and is not useful\n        directly from python.",
    "name": "Tooltip",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"attachment\": \"horizontal\", \"id\": \"1c15ab16-ae09-4066-add0-a7ca332c604e\", \"inner_only\": true, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether tooltip's arrow should be showed.",
        "name": "show_arrow",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Whether the tooltip should display to the left or right off the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension.",
        "name": "attachment",
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "default": "horizontal"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Whether to display outside a central plot frame area.",
        "name": "inner_only",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Line": {
    "desc": "Render a single line.\n\n    The ``Line`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Line.py\n        :source-position: below",
    "name": "Line",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"id\": \"c83880fc-8ae9-4dc3-b060-3d24e9d4d8df\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates for the points of the line.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line join values for the line.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates for the points of the line.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the line.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the line.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the line.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the line.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the line.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the line.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "Group": {
    "desc": "Abstract base class for groups with items rendered as check/radio\n    boxes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Group",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup"
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ab5c101d-34bf-479f-8d4b-6f169917970e\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "name": "inline",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Ray": {
    "desc": "Render rays.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Ray.py\n        :source-position: below",
    "name": "Ray",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"angle\": null, \"id\": \"02a6d456-3d28-4d37-a6a0-6529f26c4d50\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"length\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates to start the rays.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles in radians to extend the rays, as measured from the horizontal.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "The line join values for the rays.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-coordinates to start the rays.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The length to extend the ray. Note that this ``length`` defaults\n    to screen units.",
        "name": "length",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "",
        "name": "length_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the rays.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the rays.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the rays.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the rays.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the rays.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The line dash offset values for the rays.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "ContinuousAxis": {
    "desc": "A base class for all numeric, non-categorical axes types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ContinuousAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": null, \"id\": \"9177adc4-dc5c-4345-859c-803d0be3067b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": null
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": null
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), String)",
        "default": {}
      },
      {
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "type": "String",
        "default": ""
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "default": "horizontal"
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "alphabetic"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      }
    ]
  },
  "WheelPanTool": {
    "desc": "*toolbar icon*: |wheel_pan_icon|\n\n    The wheel pan tool allows the user to pan the plot along the configured\n    dimension using the scroll wheel.\n\n    .. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n        :height: 18pt",
    "name": "WheelPanTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "proto": "{\"dimension\": \"width\", \"id\": \"f32ee669-3a0b-4e04-a550-225189548b4a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "Which dimension the wheel pan tool is constrained to act in. By\n    default the wheel pan tool will pan the plot along the x-axis.",
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "default": "width"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Drag": {
    "desc": "A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Drag",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "proto": "{\"id\": \"6b2f1e00-01c3-4b17-9888-0b535d7805df\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "LinearInterpolator": {
    "desc": "Compute a linear interpolation between the control points provided through\n    the ``x``, ``y``, and ``data`` parameters.",
    "name": "LinearInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"b8c2b4b0-cbbd-48f8-a132-f5d4da7f15a1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "Independant coordiante denoting the location of a point.",
        "name": "x",
        "type": "Either(String, Seq(Float))",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "name": "y",
        "type": "Either(String, Seq(Float))",
        "default": null
      },
      {
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "name": "data",
        "type": "Instance(ColumnarDataSource)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "name": "clip",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "ResizeTool": {
    "desc": "*toolbar icon*: |resize_icon|\n\n    The resize tool allows the user to left-drag a mouse or drag a finger\n    to resize the entire plot area on the screen.\n\n    .. |resize_icon| image:: /_images/icons/Resize.png\n        :height: 18pt",
    "name": "ResizeTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "proto": "{\"id\": \"7d276c2d-f223-42b8-982b-f5d662b085cd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "LinearScale": {
    "desc": "",
    "name": "LinearScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "proto": "{\"id\": \"28fa5c2f-e952-4fbe-ab07-763250c4ebca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "RadioGroup": {
    "desc": "A group of radio boxes.",
    "name": "RadioGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "proto": "{\"active\": null, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"49920b5e-31dd-494a-a412-2ee7b3b86e93\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected.",
        "name": "active",
        "type": "Int",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "name": "inline",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "ToolbarBase": {
    "desc": "A base class for different toolbars.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ToolbarBase",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"67a9bb1a-a321-4340-81a9-e337e36590a6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"sizing_mode\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of tools to add to the plot.",
        "name": "tools",
        "type": "List(Instance(Tool))",
        "default": []
      },
      {
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "name": "logo",
        "type": "Enum('normal', 'grey')",
        "default": "normal"
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "BoxAnnotation": {
    "desc": "Render a shaded rectangular region as an annotation.",
    "name": "BoxAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"bottom\": null, \"bottom_units\": \"data\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"3ee9071a-d123-4de8-8696-503a44400ed6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"left_units\": \"data\", \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"right\": null, \"right_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"top\": null, \"top_units\": \"data\", \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the box.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The unit type for the right attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "right_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The unit type for the top attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "top_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The x-coordinates of the right edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "right",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "default": null
      },
      {
        "desc": "The line width values for the box.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the box.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.3
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The unit type for the bottom attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "bottom_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The fill alpha values for the box.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.4
      },
      {
        "desc": "The line dash offset values for the box.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Specifies whether the box is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\"",
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "default": "canvas"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The unit type for the left attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "left_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The y-coordinates of the top edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "top",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the box.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color values for the box.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#fff9ba"
      },
      {
        "desc": "The line dash values for the box.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the box.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#cccccc"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The y-coordinates of the bottom edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "bottom",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The x-coordinates of the left edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "left",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Renderer": {
    "desc": "An abstract base class for renderer types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Renderer",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"447b4991-bd46-4435-a3d6-a67cc1499279\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "image"
      }
    ]
  },
  "Inspection": {
    "desc": "A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Inspection",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "proto": "{\"id\": \"394039ae-2df8-40d3-a62d-8a29dea53066\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "name": "toggleable",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "RangeSlider": {
    "desc": "Range-slider based range selection widget",
    "name": "RangeSlider",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": null, \"disabled\": false, \"end\": 1, \"height\": null, \"id\": \"6a35694d-7621-4e3f-b900-6f5c2731de92\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"range\": [0.1, 0.9], \"sizing_mode\": \"fixed\", \"start\": 0, \"step\": 0.1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "Initial or selected range.",
        "name": "range",
        "type": "Tuple(Float, Float)",
        "default": [
          0.1,
          0.9
        ]
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The step between consecutive values.",
        "name": "step",
        "type": "Float",
        "default": 0.1
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time.",
        "name": "callback_policy",
        "type": "Enum('continuous', 'throttle', 'mouseup')",
        "default": "throttle"
      },
      {
        "desc": "Number of microseconds to pause between callback calls as the slider is moved.",
        "name": "callback_throttle",
        "type": "Float",
        "default": 200
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A callback to run in the browser whenever the current Slider value changes.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "The minimum allowable value.",
        "name": "start",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "The maximum allowable value.",
        "name": "end",
        "type": "Float",
        "default": 1
      },
      {
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "default": "horizontal"
      }
    ]
  },
  "PercentEditor": {
    "desc": "``IntEditor`` optimized for editing percentages.",
    "name": "PercentEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"8750b474-f832-4c63-ae35-179a2ff8b82c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Arrow": {
    "desc": "Render an arrow as an annotation.",
    "name": "Arrow",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"end\": {\"id\": \"feb3e8a4-6c51-4d8b-9617-454a42744631\", \"type\": \"OpenHead\"}, \"end_units\": \"data\", \"id\": \"2644f242-3c0e-4100-8d39-677e771ab536\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"source\": null, \"start\": null, \"start_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_end\": null, \"x_range_name\": \"default\", \"x_start\": null, \"y_end\": null, \"y_range_name\": \"default\", \"y_start\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the arrow body.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The y-coordinates to locate the start of the arrows.",
        "name": "y_start",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "type": "Instance(DataSource)",
        "default": null
      },
      {
        "desc": "The unit type for the end_x and end_y attributes. Interpreted as \"data\n    space\" units by default.",
        "name": "end_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The y-coordinates to locate the end of the arrows.",
        "name": "y_end",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line width values for the arrow body.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the arrow body.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Instance of ArrowHead.",
        "name": "end",
        "type": "Instance(ArrowHead)",
        "default": "{\"id\": \"21d2ccc0-f131-4abb-9b82-59a8e44c4c04\"}"
      },
      {
        "desc": "The line dash offset values for the arrow body.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The x-coordinates to locate the start of the arrows.",
        "name": "x_start",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The x-coordinates to locate the end of the arrows.",
        "name": "x_end",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the arrow body.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the arrow body.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the arrow body.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The unit type for the start_x and start_y attributes. Interpreted as \"data\n    space\" units by default.",
        "name": "start_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "Instance of ArrowHead.",
        "name": "start",
        "type": "Instance(ArrowHead)",
        "default": null
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "WidgetBox": {
    "desc": "A container for widgets that are part of a layout.",
    "name": "WidgetBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"4afc8ddf-5474-4cd9-bfe5-60b2d49d5556\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The list of widgets to put in the layout box.",
        "name": "children",
        "type": "List(Instance(Widget))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "DatetimeTickFormatter": {
    "desc": "A ``TickFormatter`` for displaying datetime values nicely across a\n    range of scales.\n\n    ``DatetimeTickFormatter`` has the following properties (listed together\n    with their default values) that can be used to control the formatting\n    of axis ticks at different scales scales:\n\n    .. code-block:: python\n\n        microseconds = ['%fus']\n\n        milliseconds = ['%3Nms', '%S.%3Ns']\n\n        seconds = ['%Ss']\n\n        minsec = [':%M:%S']\n\n        minutes = [':%M', '%Mm']\n\n        hourmin = ['%H:%M']\n\n        hours = ['%Hh', '%H:%M']\n\n        days = ['%m/%d', '%a%d']\n\n        months = ['%m/%Y', '%b%y']\n\n        years = ['%Y']\n\n    Each scale property can be set to format or list of formats to use for\n    formatting datetime tick values that fall in in that \"time scale\".\n    By default, only the first format string passed for each time scale\n    will be used. By default, all leading zeros are stripped away from\n    the formatted labels.\n\n    This list of supported `strftime`_ formats is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues",
    "name": "DatetimeTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"days\": [\"%m/%d\", \"%a%d\"], \"hourmin\": [\"%H:%M\"], \"hours\": [\"%Hh\", \"%H:%M\"], \"id\": \"e4fcf06a-31ed-434e-9eec-814808cbe8ed\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"microseconds\": [\"%fus\"], \"milliseconds\": [\"%3Nms\", \"%S.%3Ns\"], \"minsec\": [\":%M:%S\"], \"minutes\": [\":%M\", \"%Mm\"], \"months\": [\"%m/%Y\", \"%b%y\"], \"name\": null, \"seconds\": [\"%Ss\"], \"subscribed_events\": [], \"tags\": [], \"years\": [\"%Y\"]}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Formats for displaying datetime values in the ``years`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "years",
        "type": "List(String)",
        "default": [
          "%Y"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``seconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "seconds",
        "type": "List(String)",
        "default": [
          "%Ss"
        ]
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Formats for displaying datetime values in the ``microseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "microseconds",
        "type": "List(String)",
        "default": [
          "%fus"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``days`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "days",
        "type": "List(String)",
        "default": [
          "%m/%d",
          "%a%d"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``hours`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "hours",
        "type": "List(String)",
        "default": [
          "%Hh",
          "%H:%M"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "hourmin",
        "type": "List(String)",
        "default": [
          "%H:%M"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``milliseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "milliseconds",
        "type": "List(String)",
        "default": [
          "%3Nms",
          "%S.%3Ns"
        ]
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Formats for displaying datetime values in the ``minutes`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "minutes",
        "type": "List(String)",
        "default": [
          ":%M",
          "%Mm"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``months`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "months",
        "type": "List(String)",
        "default": [
          "%m/%Y",
          "%b%y"
        ]
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "minsec",
        "type": "List(String)",
        "default": [
          ":%M:%S"
        ]
      }
    ]
  },
  "DynamicImageRenderer": {
    "desc": "",
    "name": "DynamicImageRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "proto": "{\"alpha\": 1.0, \"id\": \"92921f68-9fda-4363-8ccc-f50a38edc3dd\", \"image_source\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "name": "render_parents",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "tile opacity 0.0 - 1.0",
        "name": "alpha",
        "type": "Float",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Image source to use when rendering on the plot.",
        "name": "image_source",
        "type": "Instance(ImageSource)",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "underlay"
      }
    ]
  },
  "CustomJSTransform": {
    "desc": "Apply a custom defined transform to data.",
    "name": "CustomJSTransform",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "proto": "{\"args\": {}, \"func\": \"\", \"id\": \"d821e439-138e-4c05-93e9-a33c087afada\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"v_func\": \"\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback.",
        "name": "args",
        "type": "Dict(String, Instance(Model))",
        "default": {}
      },
      {
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n    ``x`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            func = '''\n            return Math.floor(x) + 0.5\n            '''",
        "name": "func",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A snippet of JavaScript code to transform an array of values. The variable\n    ``xs`` will contain the untransformed array and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            v_func = '''\n            new_xs = new Array(xs.length)\n            for(i = 0; i < xs.length; i++) {\n                new_xs[i] = xs[i] + 0.5\n            }\n            return new_xs\n            '''\n\n    .. warning::\n        The vectorized function, ``v_func``, must return an array of the\n        same length as the input ``xs`` array.",
        "name": "v_func",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "Jitter": {
    "desc": "Apply either a uniform or normally sampled random jitter to data.",
    "name": "Jitter",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "proto": "{\"distribution\": \"uniform\", \"id\": \"f8c356bb-3a41-4ca2-8f74-0c684f46fd09\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mean\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": 1}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The central value for the random sample",
        "name": "mean",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "The width (absolute for uniform distribution and sigma for the normal distribution) of the random sample.",
        "name": "width",
        "type": "Float",
        "default": 1
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The random distribution upon which to pull the random scatter",
        "name": "distribution",
        "type": "Enum('uniform', 'normal')",
        "default": "uniform"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "Toolbar": {
    "desc": "Collect tools to display for a single plot.",
    "name": "Toolbar",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ],
    "proto": "{\"active_drag\": \"auto\", \"active_inspect\": \"auto\", \"active_scroll\": \"auto\", \"active_tap\": \"auto\", \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f7450cb0-1444-4408-9efb-19c0ba51df51\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"sizing_mode\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Specify a tap/click tool to be active when the plot is displayed.",
        "name": "active_tap",
        "type": "Either(Auto, Instance(Tap))",
        "default": "auto"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of tools to add to the plot.",
        "name": "tools",
        "type": "List(Instance(Tool))",
        "default": []
      },
      {
        "desc": "Specify a drag tool to be active when the plot is displayed.",
        "name": "active_drag",
        "type": "Either(Auto, Instance(Drag))",
        "default": "auto"
      },
      {
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "name": "logo",
        "type": "Enum('normal', 'grey')",
        "default": "normal"
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Specify an inspection tool or sequence of inspection tools to be active when\n    the plot is displayed.",
        "name": "active_inspect",
        "type": "Either(Auto, Instance(Inspection), Seq(Instance(Inspection)))",
        "default": "auto"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": null
      },
      {
        "desc": "Specify a scroll/pinch tool to be active when the plot is displayed.",
        "name": "active_scroll",
        "type": "Either(Auto, Instance(Scroll))",
        "default": "auto"
      }
    ]
  },
  "ColorBar": {
    "desc": "Render a color bar based on a color mapper.",
    "name": "ColorBar",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"bar_line_alpha\": {\"value\": 1.0}, \"bar_line_cap\": \"butt\", \"bar_line_color\": {\"value\": null}, \"bar_line_dash\": [], \"bar_line_dash_offset\": 0, \"bar_line_join\": \"miter\", \"bar_line_width\": {\"value\": 1}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"color_mapper\": null, \"formatter\": {\"id\": \"bd1d67c8-2d77-4b67-9441-53536805e0bc\", \"type\": \"BasicTickFormatter\"}, \"height\": \"auto\", \"id\": \"e335d623-b1e4-4cf6-bf7d-6e14432b604e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_standoff\": 5, \"level\": \"annotation\", \"location\": \"top_right\", \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"middle\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 5, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"#ffffff\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 0, \"margin\": 30, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": null}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 0, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"scale_alpha\": 1.0, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"0973bc03-116d-4134-b502-b87f228412c4\", \"type\": \"BasicTicker\"}, \"title\": null, \"title_standoff\": 2, \"title_text_align\": \"left\", \"title_text_alpha\": {\"value\": 1.0}, \"title_text_baseline\": \"bottom\", \"title_text_color\": {\"value\": \"#444444\"}, \"title_text_font\": \"helvetica\", \"title_text_font_size\": {\"value\": \"10pt\"}, \"title_text_font_style\": \"italic\", \"visible\": true, \"width\": \"auto\"}",
    "props": [
      {
        "desc": "The line color for the color scale bar outline.",
        "name": "bar_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A continuous color mapper containing a color palette to render.\n\n    .. warning::\n        If the `low` and `high` attributes of the ColorMapper aren't set, ticks\n        and tick labels won't be rendered. Additionally, if a LogTicker is\n        passed to the `ticker` argument and either or both of the logarithms\n        of `low` and `high` values of the color_mapper are non-numeric\n        (i.e. `low=0`), the tick and tick labels won't be rendered.",
        "name": "color_mapper",
        "type": "Instance(ContinuousColorMapper)",
        "default": null
      },
      {
        "desc": "The line width for the color bar border outline.",
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance (in pixels) that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha for the color scale bar outline.",
        "name": "bar_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line width for the color scale bar outline.",
        "name": "bar_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line dash offset for the color scale bar outline.",
        "name": "bar_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The fill alpha for the color bar background style.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.95
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The line join for the color bar border outline.",
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": "{\"id\": \"5ab60d57-97ac-4b6c-80a7-5e60f36fb6bf\"}"
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "The text alpha values for the title text.",
        "name": "title_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap for the color scale bar outline.",
        "name": "bar_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line join for the color scale bar outline.",
        "name": "bar_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The text font size values for the title text.",
        "name": "title_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": "{\"id\": \"a3b757f5-06ce-4bc6-a52b-7b395b24f4b4\"}"
      },
      {
        "desc": "The distance (in pixels) that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The text align values for the title text.",
        "name": "title_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The width (in pixels) that the color scale should occupy.",
        "name": "width",
        "type": "Either(Auto, Int)",
        "default": "auto"
      },
      {
        "desc": "The text baseline values for the title text.",
        "name": "title_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The distance (in pixels) to separate the tick labels from the color bar.",
        "name": "label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line cap for the color bar border outline.",
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha for the color bar border outline.",
        "name": "border_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset for the color bar border outline.",
        "name": "border_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The title text to render.",
        "name": "title",
        "type": "String",
        "default": null
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash for the color bar border outline.",
        "name": "border_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font style values for the title text.",
        "name": "title_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The fill color for the color bar background style.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "Amount of padding (in pixels) between the color scale and color bar border.",
        "name": "padding",
        "type": "Int",
        "default": 10
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Whether the color bar should be oriented vertically or horizontally.",
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "default": "vertical"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The distance (in pixels) to separate the title from the color bar.",
        "name": "title_standoff",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The text font values for the title text.",
        "name": "title_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The alpha with which to render the color scale.",
        "name": "scale_alpha",
        "type": "Float",
        "default": 1.0
      },
      {
        "desc": "The line dash for the color scale bar outline.",
        "name": "bar_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "middle"
      },
      {
        "desc": "The location where the color bar should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).\n\n    .. warning::\n        If the color bar is placed in a side panel, the location will likely\n        have to be set to `(0,0)`.",
        "name": "location",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))",
        "default": "top_right"
      },
      {
        "desc": "The height (in pixels) that the color scale should occupy.",
        "name": "height",
        "type": "Either(Auto, Int)",
        "default": "auto"
      },
      {
        "desc": "Amount of margin (in pixels) around the outside of the color bar.",
        "name": "margin",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "The line color for the color bar border outline.",
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "The text color values for the title text.",
        "name": "title_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      }
    ]
  },
  "Quadratic": {
    "desc": "Render parabolas.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Quadratic.py\n        :source-position: below",
    "name": "Quadratic",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"cx\": null, \"cy\": null, \"id\": \"f7e84325-62d9-4c61-8097-896075330ca2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the parabolas.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The x-coordinates of the ending points.",
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates of the starting points.",
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The x-coordinates of the control points.",
        "name": "cx",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates of the ending points.",
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The x-coordinates of the starting points.",
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the parabolas.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the parabolas.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the parabolas.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the parabolas.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The y-coordinates of the control points.",
        "name": "cy",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line alpha values for the parabolas.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the parabolas.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "Segment": {
    "desc": "Render segments.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Segment.py\n        :source-position: below",
    "name": "Segment",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"id\": \"c5f8a760-91e4-4c5e-a501-40a41540b8dc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the segments.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The x-coordinates of the ending points.",
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates of the starting points.",
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The y-coordinates of the ending points.",
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The x-coordinates of the starting points.",
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the segments.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the segments.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the segments.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the segments.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the segments.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the segments.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "CheckboxButtonGroup": {
    "desc": "A group of check boxes rendered as toggle buttons.",
    "name": "CheckboxButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "proto": "{\"active\": [], \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"aa87b41b-7340-401a-8875-1adad7a98084\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The list of indices of selected check boxes.",
        "name": "active",
        "type": "List(Int)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "CellFormatter": {
    "desc": "Abstract base class for data table's cell formatters.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "CellFormatter",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"f69d018e-8f4a-40fe-ba97-8c87842f90c4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Rect": {
    "desc": "Render rectangles.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Rect.py\n        :source-position: below",
    "name": "Rect",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"dilate\": false, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"08a4f7ac-f42d-4e10-b58a-76bd6b6e2343\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the rectangles.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The overall widths of the rectangles.",
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line width values for the rectangles.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the rectangles.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the rectangles.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The x-coordinates of the centers of the rectangles.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the rectangles, as measured from the horizontal.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "",
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line dash offset values for the rectangles.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the centers of the rectangles.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the rectangles bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    rectangles to have a gap between them, when they should appear\n    flush.",
        "name": "dilate",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the rectangles.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the rectangles.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The overall heights of the rectangles.",
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line color values for the rectangles.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "",
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The fill color values for the rectangles.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      }
    ]
  },
  "Scale": {
    "desc": "Base class for ``Scale`` models that represent an invertible\n    computation to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n        invert: (xprime) ->\n            # compute the inverse transform of a single value\n\n        v_invert: (xprimes) ->\n            # compute the inverse transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Scale",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "proto": "{\"id\": \"5a504d40-b48d-41a2-ab0c-43d8471be2e4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "CircleX": {
    "desc": "Render circle markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/CircleX.py\n        :source-position: below",
    "name": "CircleX",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"26b70907-c02c-4d12-aad0-6162169df21a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "ImageRGBA": {
    "desc": "Render images given as RGBA data.",
    "name": "ImageRGBA",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"cols\": null, \"dh\": null, \"dilate\": false, \"dw\": null, \"id\": \"a6b48aa2-460c-4949-86c8-4f04b43f9e03\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"rows\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates to locate the image anchors.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "",
        "name": "dw_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The numbers of rows in the images",
        "name": "rows",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates to locate the image anchors.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The arrays of RGBA data for the images.",
        "name": "image",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The numbers of columns in the images",
        "name": "cols",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "name": "dilate",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "",
        "name": "dh_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.",
        "name": "dh",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.",
        "name": "dw",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      }
    ]
  },
  "RedoTool": {
    "desc": "*toolbar icon*: |redo_icon|\n\n    Redo tool reverses the last action performed by undo tool.\n\n    .. |redo_icon| image:: /_images/icons/Redo.png\n        :height: 18pt",
    "name": "RedoTool",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "proto": "{\"id\": \"9531dd55-8c28-4070-95ba-decdffe1b30b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "CategoricalScale": {
    "desc": "",
    "name": "CategoricalScale",
    "bases": [
      "bokeh.models.scales.LinearScale"
    ],
    "proto": "{\"id\": \"6ca5a737-3851-4ed8-827f-e98e51bd3cb7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "AnnularWedge": {
    "desc": "Render annular wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/AnnularWedge.py\n        :source-position: below",
    "name": "AnnularWedge",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"4cb2a7c4-e71d-4dc1-8443-a6b1cdf1c1c3\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the annular wedges.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The angles to start the annular wedges, as measured from the horizontal.",
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "Which direction to stroke between the start and end angles.",
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "default": "anticlock"
      },
      {
        "desc": "",
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The angles to end the annular wedges, as measured from the horizontal.",
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "The line width values for the annular wedges.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the annular wedges.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the annular wedges.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The x-coordinates of the center of the annular wedges.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line dash offset values for the annular wedges.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates of the center of the annular wedges.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "inner_radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the annular wedges.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The inner radii of the annular wedges.",
        "name": "inner_radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line dash values for the annular wedges.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the annular wedges.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The fill color values for the annular wedges.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "",
        "name": "outer_radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The outer radii of the annular wedges.",
        "name": "outer_radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "",
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      }
    ]
  },
  "LinearColorMapper": {
    "desc": "Map numbers in a range [*low*, *high*] linearly into a\n    sequence of colors (a palette).\n\n    For example, if the range is [0, 99] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as\n    follows::\n\n             x < 0  : 'red'     # values < low are clamped\n        0 >= x < 33 : 'red'\n       33 >= x < 66 : 'green'\n       66 >= x < 99 : 'blue'\n       99 >= x      : 'blue'    # values > high are clamped",
    "name": "LinearColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"b87d7521-403d-405f-9119-b5a3c51c7ef8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "name": "low",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "type": "Seq(Color)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "name": "high",
        "type": "Float",
        "default": null
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "type": "Color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "name": "low_color",
        "type": "Color",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "name": "high_color",
        "type": "Color",
        "default": null
      }
    ]
  },
  "RemoteSource": {
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "RemoteSource",
    "bases": [
      "bokeh.models.sources.ColumnDataSource"
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"data\": {}, \"data_url\": null, \"id\": \"38409dd4-c25e-4a2b-9760-5e196fb5bd60\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"polling_interval\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "type": "Dict(String, Dict(String, Any))",
        "default": {
          "2d": {
            "indices": {}
          },
          "0d": {
            "indices": [],
            "glyph": null
          },
          "1d": {
            "indices": []
          }
        }
      },
      {
        "desc": "The URL to the endpoint for the data.",
        "name": "data_url",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "polling interval for updating data source in milliseconds",
        "name": "polling_interval",
        "type": "Int",
        "default": null
      }
    ]
  },
  "Wedge": {
    "desc": "Render wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Wedge.py\n        :source-position: below",
    "name": "Wedge",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"8cc32ed5-5fd2-4c26-bf93-1100b8cc18a0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the wedges.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The angles to start the wedges, as measured from the horizontal.",
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "Which direction to stroke between the start and end angles.",
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "default": "anticlock"
      },
      {
        "desc": "",
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The angles to end the wedges, as measured from the horizontal.",
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "default": null
      },
      {
        "desc": "The line width values for the wedges.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the wedges.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Radii of the wedges.",
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The fill alpha values for the wedges.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The x-coordinates of the points of the wedges.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line dash offset values for the wedges.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates of the points of the wedges.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line cap values for the wedges.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line dash values for the wedges.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the wedges.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The fill color values for the wedges.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "",
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      }
    ]
  },
  "DatePicker": {
    "desc": "Calendar-based date picker widget.",
    "name": "DatePicker",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"4033ea64-6eff-4b2e-b2fb-a5ac3ab74130\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_date\": null, \"min_date\": null, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": 1497571200000.0, \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Optional latest allowable date.",
        "name": "max_date",
        "type": "Date",
        "default": null
      },
      {
        "desc": "Optional earliest allowable date.",
        "name": "min_date",
        "type": "Date",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "The initial or picked date.",
        "name": "value",
        "type": "Date",
        "default": "2017-06-16"
      },
      {
        "desc": "A callback to run in the browser whenever the current date value changes.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "TimeEditor": {
    "desc": "Spinner-based time cell editor.",
    "name": "TimeEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"f1c7f767-44b4-41c3-9ae7-5c1ae2a4d7fb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Scroll": {
    "desc": "A base class for tools that respond to scroll events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Scroll",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "proto": "{\"id\": \"236d6174-0f28-4411-ab60-dd46e358148d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Spacer": {
    "desc": "A container for space used to fill an empty spot in a row or column.",
    "name": "Spacer",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"546eb36c-17fb-4a92-83fe-7897df970d90\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "FuncTickFormatter": {
    "desc": "Display tick values that are formatted by a user-defined function.",
    "name": "FuncTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"99f3740b-bea5-4bd0-8785-aad25cc26e33\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the formatter code snippet as the values of named\n    parameters to the callback.",
        "name": "args",
        "type": "Dict(String, Instance(Model))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A snippet of JavaScript code that reformats a single tick to the desired\n    format. The variable ``tick`` will contain the unformatted tick value and\n    can be expected to be present in the code snippet namespace at render time.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            return Math.floor(tick) + \" + \" + (tick % 1).toFixed(2)\n            '''",
        "name": "code",
        "type": "String",
        "default": ""
      }
    ]
  },
  "ImageURL": {
    "desc": "Render images loaded from given URLs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/ImageURL.py\n        :source-position: below",
    "name": "ImageURL",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"anchor\": \"top_left\", \"angle\": {\"units\": \"rad\", \"value\": 0}, \"dilate\": false, \"global_alpha\": 1.0, \"h\": null, \"id\": \"59b49159-3155-4b98-adb6-0f09d13ce6ab\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"retry_attempts\": 0, \"retry_timeout\": 0, \"subscribed_events\": [], \"tags\": [], \"url\": null, \"w\": null, \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates to locate the image anchors.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the images, as measured from the horizontal.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates to locate the image anchors.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The URLs to retrieve images from.\n\n    .. note::\n        The actual retrieving and loading of the images happens on\n        the client.",
        "name": "url",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Number of attempts to retry loading the images from the specified URL.\n    Default is zero.",
        "name": "retry_attempts",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "What position of the image should be anchored at the `x`, `y`\n    coordinates.",
        "name": "anchor",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')",
        "default": "top_left"
      },
      {
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).",
        "name": "h",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "name": "dilate",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "",
        "name": "h_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself).",
        "name": "global_alpha",
        "type": "Float",
        "default": 1.0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "",
        "name": "w_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Timeout (in ms) between retry attempts to load the image from the\n    specified URL. Default is zero ms.",
        "name": "retry_timeout",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).",
        "name": "w",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      }
    ]
  },
  "MercatorTicker": {
    "desc": "Generate nice lat/lon ticks form underlying WebMercator coordinates.",
    "name": "MercatorTicker",
    "bases": [
      "bokeh.models.tickers.BasicTicker"
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"dimension\": null, \"id\": \"4ceacbec-f06c-4c98-9b69-f6eead29383f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "type": "Float",
        "default": 10.0
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "type": "Float",
        "default": 0.0
      },
      {
        "desc": "Specify whether to generate ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick locations from Web Mercator requires considering coordinates from\n    both dimensions together. Use this property to specify which result should\n    be returned.\n\n    Typically, if the ticker is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the ticker is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTicker will result in a\n    validation error and a JavaScript console error.",
        "name": "dimension",
        "type": "Enum('lat', 'lon')",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "type": "Seq(Float)",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "Glyph": {
    "desc": "Base class for all glyph models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Glyph",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"25d59553-856c-4cc9-a0ee-04a23a1455b0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Legend": {
    "desc": "Render informational legends for a plot.",
    "name": "Legend",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"border_line_alpha\": {\"value\": 0.5}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": \"#e5e5e5\"}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"click_policy\": \"none\", \"glyph_height\": 20, \"glyph_width\": 20, \"id\": \"1c9ca2a1-8900-4a6e-8df6-8b32bc501302\", \"inactive_fill_alpha\": {\"value\": 0.9}, \"inactive_fill_color\": {\"value\": \"white\"}, \"items\": [], \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_height\": 20, \"label_standoff\": 5, \"label_text_align\": \"left\", \"label_text_alpha\": {\"value\": 1.0}, \"label_text_baseline\": \"middle\", \"label_text_color\": {\"value\": \"#444444\"}, \"label_text_font\": \"helvetica\", \"label_text_font_size\": {\"value\": \"10pt\"}, \"label_text_font_style\": \"normal\", \"label_width\": 20, \"level\": \"annotation\", \"location\": \"top_right\", \"margin\": 10, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"spacing\": 3, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line width for the legend border outline.",
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text font for the legend labels.",
        "name": "label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align for the legend labels.",
        "name": "label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line cap for the legend border outline.",
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The minimum height (in pixels) of the area that legend labels should occupy.",
        "name": "label_height",
        "type": "Int",
        "default": 20
      },
      {
        "desc": "The line alpha for the legend border outline.",
        "name": "border_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.5
      },
      {
        "desc": "The line dash offset for the legend border outline.",
        "name": "border_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The text font style for the legend labels.",
        "name": "label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The height (in pixels) that the rendered legend glyph should occupy.",
        "name": "glyph_height",
        "type": "Int",
        "default": 20
      },
      {
        "desc": "The line dash for the legend border outline.",
        "name": "border_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The distance (in pixels) to separate the label from its associated glyph.",
        "name": "label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The fill color for the legend background style.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "Amount of padding around the contents of the legend.",
        "name": "padding",
        "type": "Int",
        "default": 10
      },
      {
        "desc": "The fill alpha for the legend background style.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.95
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\n    rendered in the legend.\n\n    This can be specified explicitly, for instance:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n            LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n            LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n        ])\n\n    But as a convenience, can also be given more compactly as a list of tuples:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            (\"sin(x)\"   , [r0, r1]),\n            (\"2*sin(x)\" , [r2]),\n            (\"3*sin(x)\" , [r3, r4])\n        ])\n\n    where each tuple is of the form: *(label, renderers)*.",
        "name": "items",
        "type": "List(Instance(LegendItem))",
        "default": []
      },
      {
        "desc": "Whether the legend entries should be placed vertically or horizontally\n    when they are drawn.",
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "default": "vertical"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Defines what happens when a lengend's item is clicked.",
        "name": "click_policy",
        "type": "Enum('none', 'hide', 'mute')",
        "default": "none"
      },
      {
        "desc": "The text baseline for the legend labels.",
        "name": "label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "middle"
      },
      {
        "desc": "The width (in pixels) that the rendered legend glyph should occupy.",
        "name": "glyph_width",
        "type": "Int",
        "default": 20
      },
      {
        "desc": "Amount of spacing (in pixles) between legend entries.",
        "name": "spacing",
        "type": "Int",
        "default": 3
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The line join for the legend border outline.",
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The fill alpha for the legend background style when inactive.",
        "name": "inactive_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.9
      },
      {
        "desc": "The text font size for the legend labels.",
        "name": "label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The minimum width (in pixels) of the area that legend labels should occupy.",
        "name": "label_width",
        "type": "Int",
        "default": 20
      },
      {
        "desc": "The text color for the legend labels.",
        "name": "label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The location where the legend should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).",
        "name": "location",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))",
        "default": "top_right"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line color for the legend border outline.",
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#e5e5e5"
      },
      {
        "desc": "Amount of margin around the legend.",
        "name": "margin",
        "type": "Int",
        "default": 10
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The text alpha for the legend labels.",
        "name": "label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The fill color for the legend background style when inactive.",
        "name": "inactive_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "white"
      }
    ]
  },
  "Markup": {
    "desc": "Base class for Bokeh models that represent HTML markup elements.\n\n    Markups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Markup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"32741a21-47f4-44ba-9515-cd2a90d335af\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The contents of the widget.",
        "name": "text",
        "type": "String",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "BoxZoomTool": {
    "desc": "*toolbar icon*: |box_zoom_icon|\n\n    The box zoom tool allows users to define a rectangular\n    region of a Plot to zoom to by dragging he mouse or a\n    finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    .. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n        :height: 18pt",
    "name": "BoxZoomTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"b216f437-e502-4f5f-8344-2f7733a47756\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"match_aspect\": false, \"name\": null, \"overlay\": {\"id\": \"76858285-d30a-46d6-97b9-e979e7cd5304\", \"type\": \"BoxAnnotation\"}, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the zoom box is to be free in. By default,\n    users may freely draw zoom boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Whether the box zoom region should be restricted to have the same\n    aspect ratio as the plot region.\n\n    .. note::\n        If the tool is restricted to one dimension, this value has\n        no effect.",
        "name": "match_aspect",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"d7725380-52bb-4e75-89d7-26ca4c5db95b\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}"
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "LogScale": {
    "desc": "",
    "name": "LogScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "proto": "{\"id\": \"94a75086-b63f-4fe2-9cbe-383a51530e0f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "VeeHead": {
    "desc": "Render a vee-style arrow head.",
    "name": "VeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"4cfb4c17-3c83-48d3-996e-195e0cf702cf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the arrow head interior.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "type": "Float",
        "default": 25
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The fill alpha values for the arrow head interior.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "GeoJSONDataSource": {
    "desc": "",
    "name": "GeoJSONDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"geojson\": null, \"id\": \"0bf2002d-c1c5-405c-ab94-2215f9f6a4db\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "type": "Dict(String, Dict(String, Any))",
        "default": {
          "2d": {
            "indices": {}
          },
          "0d": {
            "indices": [],
            "glyph": null
          },
          "1d": {
            "indices": []
          }
        }
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "GeoJSON that contains features for plotting. Currently GeoJSONDataSource can\n    only process a FeatureCollection or GeometryCollection.",
        "name": "geojson",
        "type": "JSON",
        "default": null
      }
    ]
  },
  "ContinuousColorMapper": {
    "desc": "Base class for continuous color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ContinuousColorMapper",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ],
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"25f4a06a-707e-413c-8c75-7f9cac359166\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "name": "low",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "type": "Seq(Color)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "name": "high",
        "type": "Float",
        "default": null
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "type": "Color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "name": "low_color",
        "type": "Color",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "name": "high_color",
        "type": "Color",
        "default": null
      }
    ]
  },
  "CheckboxEditor": {
    "desc": "Boolean value cell editor.",
    "name": "CheckboxEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"23f0d110-ac06-4a21-9a10-019c02c0f9c1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Ticker": {
    "desc": "A base class for all ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Ticker",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"9f29b322-ba30-4ae7-b98e-149f090541e8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "DataTable": {
    "desc": "Two dimensional grid for visualisation and editing large amounts\n    of data.",
    "name": "DataTable",
    "bases": [
      "bokeh.models.widgets.tables.TableWidget"
    ],
    "proto": "{\"columns\": [], \"css_classes\": null, \"disabled\": false, \"editable\": false, \"fit_columns\": true, \"height\": 400, \"id\": \"d4cac8b8-39b3-4e4a-a8ca-7e6364028f04\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"reorderable\": true, \"row_headers\": true, \"scroll_to_selection\": true, \"selectable\": true, \"sizing_mode\": \"fixed\", \"sortable\": true, \"source\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "Allows the reordering of a tables's columns. To reorder a column,\n    click and drag a table's header to the desired location in the table.\n    The columns on either side will remain in their previous order.",
        "name": "reorderable",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The source of data for the widget.",
        "name": "source",
        "type": "Instance(DataSource)",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The list of child column widgets.",
        "name": "columns",
        "type": "List(Instance(TableColumn))",
        "default": []
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "Whenever a selection is made on the data source, scroll the selected\n    rows into the table's viewport if none of the selected rows are already\n    in the viewport.",
        "name": "scroll_to_selection",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Enable or disable row headers, i.e. the index column.",
        "name": "row_headers",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Allows to sort table's contents. By default natural order is preserved.\n    To sort a column, click on it's header. Clicking one more time changes\n    sort direction. Use Ctrl + click to return to natural order. Use\n    Shift + click to sort multiple columns simultaneously.",
        "name": "sortable",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": 400
      },
      {
        "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\n    equivalent  to ``True``, but makes selection visible through a checkbox\n    for each row,  instead of highlighting rows. Multiple selection is\n    allowed and can be achieved by either clicking multiple checkboxes (if\n    enabled) or using Shift + click on rows.",
        "name": "selectable",
        "type": "Either(Bool, Enum('checkbox'))",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Allows to edit table's contents. Needs cell editors to be configured on\n    columns that are required to be editable.",
        "name": "editable",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "Whether columns should be fit to the available width. This results in no\n    horizontal scrollbar showing up, but data can get unreadable if there is\n    no enough space available. If set to ``True``, columns' width is\n    understood as maximum width.",
        "name": "fit_columns",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Oval": {
    "desc": "Render ovals.\n\n    This glyph renders ovals using B\u00e9zier curves, which are similar,\n    but not identical to ellipses. In particular, widths equal to heights\n    will not render circles. Use the ``Ellipse`` glyph for that.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Oval.py\n        :source-position: below",
    "name": "Oval",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"9888b5cd-166a-4508-b41a-7e7422fe34fd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the ovals.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The overall widths of each oval.",
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line width values for the ovals.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the ovals.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the ovals.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The x-coordinates of the centers of the ovals.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angle the ovals are rotated from horizontal. [rad]",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "",
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line dash offset values for the ovals.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the centers of the ovals.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the ovals.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the ovals.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The overall height of each oval.",
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line color values for the ovals.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "",
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The fill color values for the ovals.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      }
    ]
  },
  "Transform": {
    "desc": "Base class for ``Transform`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Transform",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"2f7ff384-1aa8-4fc0-b138-2b182c1878ef\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "TapTool": {
    "desc": "*toolbar icon*: |tap_select_icon|\n\n    The tap selection tool allows the user to select at single points by\n    left-clicking a mouse, or tapping with a finger.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. |tap_select_icon| image:: /_images/icons/TapSelect.png\n        :height: 18pt\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.",
    "name": "TapTool",
    "bases": [
      "bokeh.models.tools.Tap"
    ],
    "proto": "{\"behavior\": \"select\", \"callback\": null, \"id\": \"bb572b5d-8ae9-448b-b978-b340f355fa5a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"plot\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A client-side action specification, like opening a URL, showing\n    a dialog box, etc. See :class:`~bokeh.models.actions.Action` for details.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "This tool can be configured to either make selections or inspections\n    on associated data sources. The difference is that selection changes\n    propagate across bokeh and other components (e.g. selection glyph)\n    will be notified. Inspecions don't act like this, so it's useful to\n    configure `callback` when setting `behavior='inspect'`.",
        "name": "behavior",
        "type": "Enum('select', 'inspect')",
        "default": "select"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Button": {
    "desc": "A click button.",
    "name": "Button",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"clicks\": 0, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"67632556-5a67-4cbe-adde-7c3e61cd288b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "name": "label",
        "type": "String",
        "default": "Button"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A private property used to trigger ``on_click`` event handler.",
        "name": "clicks",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "type": "Instance(AbstractIcon)",
        "default": null
      }
    ]
  },
  "BasicTickFormatter": {
    "desc": "Display tick values from continuous ranges as \"basic numbers\",\n    using scientific notation when appropriate by default.",
    "name": "BasicTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"id\": \"1c0644a6-29f4-42b1-a02a-18957a277b68\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high",
        "name": "power_limit_high",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "How many digits of precision to display in tick labels.",
        "name": "precision",
        "type": "Either(Auto, Int)",
        "default": "auto"
      },
      {
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.",
        "name": "use_scientific",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low",
        "name": "power_limit_low",
        "type": "Int",
        "default": -3
      }
    ]
  },
  "MapPlot": {
    "desc": "Abstract base class for map plot models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "MapPlot",
    "bases": [
      "bokeh.models.plots.Plot"
    ],
    "proto": "{\"above\": [], \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"ac9cc9ef-00ef-4ea5-8bb2-af212fd76845\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"2e013dd5-f562-4033-b566-3de02ccf6340\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"45d46107-a91f-4030-a980-f2bf3be4a2b2\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"cd40b42b-874c-4a4e-b8a9-fba9e2dc5b1e\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"8e2eb10d-4a58-47ed-b0e6-12e272935895\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"06ca39db-995f-4af8-9f60-b28203bfeb9f\", \"type\": \"LinearScale\"}}",
    "props": [
      {
        "desc": "The fill alpha for the plot border style.",
        "name": "border_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "name": "h_symmetry",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether to use HiDPI mode when available.",
        "name": "hidpi",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "name": "x_scale",
        "type": "Instance(Scale)",
        "default": "{\"id\": \"a421a250-d53b-4dba-8d15-b721a8fe7e10\"}"
      },
      {
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "name": "right",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "default": {}
      },
      {
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_top",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The fill alpha for the plot background style.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "default": {}
      },
      {
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "name": "title_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "above"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A ToolEvents object to share and report tool events.",
        "name": "tool_events",
        "type": "Instance(ToolEvents)",
        "default": null
      },
      {
        "desc": "The fill color for the plot border style.",
        "name": "border_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "name": "v_symmetry",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "name": "plot_width",
        "type": "Int",
        "default": 600
      },
      {
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_right",
        "type": "Int",
        "default": null
      },
      {
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line alpha for the plot border outline.",
        "name": "outline_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "name": "lod_factor",
        "type": "Int",
        "default": 10
      },
      {
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "name": "y_scale",
        "type": "Instance(Scale)",
        "default": "{\"id\": \"067bb395-c962-4a90-869c-614a8d5c4a76\"}"
      },
      {
        "desc": "The line dash for the plot border outline.",
        "name": "outline_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line dash offset for the plot border outline.",
        "name": "outline_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_bottom",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "default": "canvas"
      },
      {
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "name": "min_border",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "name": "toolbar_sticky",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line color for the plot border outline.",
        "name": "outline_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#e5e5e5"
      },
      {
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "name": "title",
        "type": "Instance(Title)",
        "default": "{\"id\": \"567164cd-a2f8-44b0-bb88-c4cf98ba2813\", \"text\": \"\"}"
      },
      {
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "name": "toolbar_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "right"
      },
      {
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "name": "y_range",
        "type": "Instance(Range)",
        "default": null
      },
      {
        "desc": "The line cap for the plot border outline.",
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color for the plot background style.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "name": "x_range",
        "type": "Instance(Range)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "name": "plot_height",
        "type": "Int",
        "default": 600
      },
      {
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_left",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The line width for the plot border outline.",
        "name": "outline_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "name": "lod_interval",
        "type": "Int",
        "default": 300
      },
      {
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "name": "lod_threshold",
        "type": "Int",
        "default": 2000
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area below of the plot.",
        "name": "below",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "name": "lod_timeout",
        "type": "Int",
        "default": 500
      },
      {
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "name": "left",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "The line join for the plot border outline.",
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A list of renderers to occupy the area above of the plot.",
        "name": "above",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Select": {
    "desc": "Single-select widget.",
    "name": "Select",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d5901441-6f74-455d-8cda-3fbab04603b4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.",
        "name": "options",
        "type": "List(Either(String, Tuple(String, String)))",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Initial or selected value.",
        "name": "value",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A callback to run in the browser whenever the current Select dropdown\n    value changes.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Diamond": {
    "desc": "Render diamond markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Diamond.py\n        :source-position: below",
    "name": "Diamond",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"f6d213b9-e57a-4217-88a6-bb891cfc2ed9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "Tabs": {
    "desc": "A panel widget with navigation tabs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_tab_panes.py\n        :source-position: below",
    "name": "Tabs",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"active\": 0, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f9bc8a43-0a31-4d63-b3c8-fec619195bf2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tabs\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The index of the active tab.",
        "name": "active",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The list of child panel widgets.",
        "name": "tabs",
        "type": "List(Instance(Panel))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "OpenURL": {
    "desc": "Open a URL in a new tab or window (browser dependent).",
    "name": "OpenURL",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "proto": "{\"id\": \"4d3cbb41-d9bd-475a-9c30-99e24189df74\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"http://\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The URL to direct the web browser to. This can be a template string,\n    which will be formatted with data from the data source.",
        "name": "url",
        "type": "String",
        "default": "http://"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "TextEditor": {
    "desc": "Multi-line string cell editor.",
    "name": "TextEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"e5a03100-40c9-4f7e-b174-6e4d497a666c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Quad": {
    "desc": "Render axis-aligned quads.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Quad.py\n        :source-position: below",
    "name": "Quad",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"bottom\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"6e4d8663-38b4-49cf-8f25-ce8c5c7e697d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the quads.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The fill alpha values for the quads.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The x-coordinates of the right edges.",
        "name": "right",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The y-coordinates of the top edges.",
        "name": "top",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the quads.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color values for the quads.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash values for the quads.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the quads.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the quads.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The y-coordinates of the bottom edges.",
        "name": "bottom",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line alpha values for the quads.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the left edges.",
        "name": "left",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line dash offset values for the quads.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "CompositeTicker": {
    "desc": "Combine different tickers at different scales.\n\n    Uses the ``min_interval`` and ``max_interval`` interval attributes\n    of the tickers to select the appropriate ticker at different\n    scales.",
    "name": "CompositeTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"2b1d08df-7af3-40f2-899d-ef7fc838fc92\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"tickers\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()",
        "name": "tickers",
        "type": "Seq(Instance(Ticker))",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "LassoSelectTool": {
    "desc": "*toolbar icon*: |lasso_select_icon|\n\n    The lasso selection tool allows users to make selections on a\n    Plot by indicating a free-drawn \"lasso\" region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n        :height: 18pt",
    "name": "LassoSelectTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "proto": "{\"callback\": null, \"id\": \"ba7bcce5-9415-44bc-b190-a6d92011e43e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"f47be81d-f73b-4a94-9ce6-a0652986b0dd\", \"type\": \"PolyAnnotation\"}, \"plot\": null, \"renderers\": [], \"select_every_mousemove\": true, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: True",
        "name": "select_every_mousemove",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser on every selection of a lasso area.\n    The cb_data parameter that is available to the Callback code will contain\n    one LassoSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the lasso area",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "type": "Instance(PolyAnnotation)",
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"7f02d2b1-c57b-4bfb-837c-f302b820927b\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "FactorRange": {
    "desc": "A range in a categorical dimension.\n\n    In addition to supplying ``factors`` keyword argument to the\n    ``FactorRange`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\n    .. note::\n        ``FactorRange`` may be renamed to ``CategoricalRange`` in\n        the future.",
    "name": "FactorRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "proto": "{\"bounds\": null, \"callback\": null, \"factors\": [], \"id\": \"af26f2a1-4737-47b6-af9d-100ff15a50d5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"offset\": 0, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An offset to the (synthetic) range (default: 0)\n\n    .. note::\n        The primary usage of this is to support compatibility and integration\n        with other plotting systems, and will not generally of interest to\n        most users.",
        "name": "offset",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum number of visible categories. If set to ``None`` (default),\n    the minimum interval is not bound.",
        "name": "min_interval",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of string or integer factors (categories) to comprise\n    this categorical range.",
        "name": "factors",
        "type": "Either(List(String), List(Int))",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum number of visible categories. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well.",
        "name": "max_interval",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    Unlike Range1d and DataRange1d, factors do not have an order and so a\n    min and max cannot be proved in the same way. bounds accepts a list of\n    factors, that constrain the displayed factors.\n\n    By default, bounds are ``None``, allows unlimited panning or zooming.\n\n    If ``bounds='auto'``, bounds will be the same as factors and the plot\n    will not be able to pan or zoom beyond the first and last factors.\n\n    If you provide a list, then only the factors that are in that list will\n    be displayed on the plot and the plot will not pan or zoom outside the\n    first and last items in the shortened factors list. Note the order of\n    factors is the defining order for your plot.\n\n    Values of bounds that are not in factors are acceptable and will simply\n    have no impact on the plot.\n\n    Examples:\n\n    Auto behavior:\n\n    .. code-block:: python\n\n        x_range = FactorRange(\n            factors=[\"apples\", \"dogs\", \"peaches\", \"bananas\", \"pigs\"],\n            bounds='auto'\n        )\n\n        The plot will display all the factors and you will not be able to\n        pan left of apples or right of pigs.\n\n    Constraining behavior:\n\n    .. code-block:: python\n\n        x_range = FactorRange(\n            factors=[\"apples\", \"dogs\", \"peaches\", \"bananas\", \"pigs\"],\n            bounds=[\"apples\", \"bananas\", \"peaches\"]\n        )\n\n        Only the factors ``[\"apples\", \"peaches\", \"bananas\"]`` (in that\n        order) will appear in the plot, and the plot will not pan left of\n        ``\"apples\"`` or right of ``\"bananas\"``.",
        "name": "bounds",
        "type": "Either(Auto, List(String), List(Int))",
        "default": null
      }
    ]
  },
  "Panel": {
    "desc": "A single-widget container with title bar and controls.",
    "name": "Panel",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"child\": null, \"closable\": false, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"1b50108f-5414-4295-8d69-c8ff42225a86\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The child widget. If you need more children, use a layout widget,\n    e.g. ``Row`` or ``Column``.",
        "name": "child",
        "type": "Instance(LayoutDOM)",
        "default": null
      },
      {
        "desc": "An optional text title of the panel.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether this panel is closeable or not. If True, an \"x\" button will\n    appear.",
        "name": "closable",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "LogTickFormatter": {
    "desc": "Display tick values from continuous ranges as powers\n    of some base.\n\n    Most often useful in conjunction with a ``LogTicker``.",
    "name": "LogTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"id\": \"3cfe1899-69c9-4f65-9c59-5a035b39500e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null}",
    "props": [
      {
        "desc": "The corresponding ``LogTicker``, used to determine the correct\n    base to use. If unset, the formatter will use base 10 as a default.",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "OpenHead": {
    "desc": "Render an open-body arrow head.",
    "name": "OpenHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "proto": "{\"id\": \"117d6832-aacc-49bf-b625-d01720376f73\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "type": "Float",
        "default": 25
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "InputWidget": {
    "desc": "Abstract base class for input widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "InputWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"a9bff236-e3d2-43f7-8452-a91e013c176e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "ColumnarDataSource": {
    "desc": "A base class for data source types, which can be mapped onto\n    a columnar format.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ColumnarDataSource",
    "bases": [
      "bokeh.models.sources.DataSource"
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"id\": \"13587c62-7c3f-4a47-8db4-dd8d10195a43\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "type": "Dict(String, Dict(String, Any))",
        "default": {
          "2d": {
            "indices": {}
          },
          "0d": {
            "indices": [],
            "glyph": null
          },
          "1d": {
            "indices": []
          }
        }
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      }
    ]
  },
  "Band": {
    "desc": "Render a filled area band along a dimension.",
    "name": "Band",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"base\": null, \"dimension\": \"height\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"a5088cd1-565f-49c1-a9b7-62323b4ae72a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"lower\": null, \"name\": null, \"plot\": null, \"source\": {\"id\": \"78371ce5-4338-4a85-a67d-e6651e3edbf3\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "type": "Instance(DataSource)",
        "default": "{\"data\": {}, \"id\": \"2378d53f-e2b2-410b-b31b-faf428270a59\"}"
      },
      {
        "desc": "The line join values for the band.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The coordinations of the upper portion of the filled area band.",
        "name": "upper",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The coordinates of the lower portion of the filled area band.",
        "name": "lower",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line width values for the band.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the band.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.3
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the band.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0.4
      },
      {
        "desc": "",
        "name": "base_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The line dash offset values for the band.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "upper_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "name": "base",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The direction of the band.",
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "default": "height"
      },
      {
        "desc": "The line cap values for the band.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The fill color values for the band.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#fff9ba"
      },
      {
        "desc": "The line dash values for the band.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the band.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#cccccc"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "",
        "name": "lower_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "ToolbarBox": {
    "desc": "A layoutable toolbar that can accept the tools of multiple plots, and\n    can merge the tools into a single button for convenience.",
    "name": "ToolbarBox",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"8c0ce11c-d998-4540-b535-442d2be758a5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"merge_tools\": true, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"toolbar_location\": \"right\", \"tools\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A list of tools to add to the plot.",
        "name": "tools",
        "type": "List(Instance(Tool))",
        "default": []
      },
      {
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "name": "logo",
        "type": "Enum('normal', 'grey')",
        "default": "normal"
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "Should the toolbar be presented as if it was stuck to the `above`, `right`, `left`, `below`\n        edge of a plot. Default is `right`.",
        "name": "toolbar_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "right"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "default": []
      },
      {
        "desc": "Merge all the tools together so there is one tool to control all the plots.",
        "name": "merge_tools",
        "type": "Bool",
        "default": true
      }
    ]
  },
  "Toggle": {
    "desc": "A two-state toggle button.",
    "name": "Toggle",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "proto": "{\"active\": false, \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"c6a68f73-3781-4b96-9e42-f11d40b02c02\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Toggle\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "name": "label",
        "type": "String",
        "default": "Toggle"
      },
      {
        "desc": "The initial state of a button. Also used to trigger ``on_click`` event\n    handler.",
        "name": "active",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "default": "default"
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "type": "Instance(AbstractIcon)",
        "default": null
      }
    ]
  },
  "PrintfTickFormatter": {
    "desc": "Tick formatter based on a printf-style format string.",
    "name": "PrintfTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "proto": "{\"format\": \"%s\", \"id\": \"a48cc5a0-3f26-479d-9794-1f325b2798ec\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The number format, as defined as follows: the placeholder in the format\n    string is marked by % and is followed by one or more of these elements,\n    in this order:\n\n    * An optional ``+`` sign\n        Causes the result to be preceded with a plus or minus sign on numeric\n        values. By default, only the ``-`` sign is used on negative numbers.\n\n    * An optional padding specifier\n        Specifies what (if any) character to use for padding. Possible values\n        are 0 or any other character preceded by a ``'`` (single quote). The\n        default is to pad with spaces.\n\n    * An optional ``-`` sign\n        Causes sprintf to left-align the result of this placeholder. The default\n        is to right-align the result.\n\n    * An optional number\n        Specifies how many characters the result should have. If the value to be\n        returned is shorter than this number, the result will be padded.\n\n    * An optional precision modifier\n        Consists of a ``.`` (dot) followed by a number, specifies how many digits\n        should be displayed for floating point numbers. When used on a string, it\n        causes the result to be truncated.\n\n    * A type specifier\n        Can be any of:\n\n        - ``%`` --- yields a literal ``%`` character\n        - ``b`` --- yields an integer as a binary number\n        - ``c`` --- yields an integer as the character with that ASCII value\n        - ``d`` or ``i`` --- yields an integer as a signed decimal number\n        - ``e`` --- yields a float using scientific notation\n        - ``u`` --- yields an integer as an unsigned decimal number\n        - ``f`` --- yields a float as is\n        - ``o`` --- yields an integer as an octal number\n        - ``s`` --- yields a string as is\n        - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n        - ``X`` --- yields an integer as a hexadecimal number (upper-case)",
        "name": "format",
        "type": "String",
        "default": "%s"
      }
    ]
  },
  "Patches": {
    "desc": "Render several patches.\n\n    The data for the ``Patches`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Patches.py\n        :source-position: below",
    "name": "Patches",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"e6d03164-b0d9-4000-9214-02c6c2eb93d3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the patches.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the y-coordinates for each polygon should be separated by NaN\n        values in the sublists.",
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The fill alpha values for the patches.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The x-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the x-coordinates for each polygon should be separated by NaN\n        values in the sublists.",
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line cap values for the patches.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the patches.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The fill color values for the patches.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line color values for the patches.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the patches.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the patches.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the patches.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "Range1d": {
    "desc": "A fixed, closed range [start, end] in a continuous scalar\n    dimension.\n\n    In addition to supplying ``start`` and ``end`` keyword arguments\n    to the ``Range1d`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        Range(0, 10) # equivalent to Range(start=0, end=10)",
    "name": "Range1d",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "proto": "{\"bounds\": null, \"callback\": null, \"end\": 1, \"id\": \"59fcec15-01f8-41a4-8c7a-fe473e331977\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    If set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\n    increasing or decreasing, the first item should be the minimum value of the range and the\n    second item should be the maximum. Setting min > max will result in a ``ValueError``.\n\n    By default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\n    want to constrain one end of the plot, you can set min or max to None.\n\n    Examples:\n\n        Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n        Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0",
        "name": "bounds",
        "type": "MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": null
      },
      {
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound. Can be a timedelta.",
        "name": "min_interval",
        "type": "Either(Float, TimeDelta, Int)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Can be a timedelta. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well.",
        "name": "max_interval",
        "type": "Either(Float, TimeDelta, Int)",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "The start of the range.",
        "name": "start",
        "type": "Either(Float, Datetime, Int)",
        "default": 0
      },
      {
        "desc": "The end of the range.",
        "name": "end",
        "type": "Either(Float, Datetime, Int)",
        "default": 1
      }
    ]
  },
  "ContinuousTicker": {
    "desc": "A base class for non-categorical ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ContinuousTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"5976f79d-8f71-466e-ae82-a01e3a3b1d24\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "MonthsTicker": {
    "desc": "Generate ticks spaced apart by specific, even multiples of months.",
    "name": "MonthsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"1d36491d-09f0-40ff-9898-36496a2e7f7c\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"months\": [], \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The intervals of months to use.",
        "name": "months",
        "type": "Seq(Int)",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "type": "Float",
        "default": null
      }
    ]
  },
  "BBoxTileSource": {
    "desc": "The BBoxTileSource has the same default tile origin as the\n    WMTSTileSource but requested tiles use a ``{XMIN}``, ``{YMIN}``,\n    ``{XMAX}``, ``{YMAX}`` e.g. ``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``.",
    "name": "BBoxTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"bf9777bd-505c-4b5d-b91b-1a92518c46f2\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"use_latlon\": false, \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Flag which indicates option to output {XMIN},{YMIN},{XMAX},{YMAX} in meters or latitude and longitude.",
        "name": "use_latlon",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "type": "Float",
        "default": 156543.03392804097
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "type": "Int",
        "default": 30
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "type": "Int",
        "default": 256
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "type": "Float",
        "default": 20037508.34
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      }
    ]
  },
  "TileRenderer": {
    "desc": "",
    "name": "TileRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "proto": "{\"alpha\": 1.0, \"id\": \"d4813d03-8857-459f-8b4a-cac5e5238a7c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"subscribed_events\": [], \"tags\": [], \"tile_source\": {\"id\": \"e9ceedd4-6370-44b3-9539-074857f5f153\", \"type\": \"WMTSTileSource\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "name": "render_parents",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "tile opacity 0.0 - 1.0",
        "name": "alpha",
        "type": "Float",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "name": "tile_source",
        "type": "Instance(TileSource)",
        "default": "{\"id\": \"66e516c6-2e2f-4a15-bac1-d32c65ed01cf\"}"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "underlay"
      }
    ]
  },
  "Cross": {
    "desc": "Render '+' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Cross.py\n        :source-position: below",
    "name": "Cross",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"ec39431e-3eb2-40c8-a895-9808decfaf73\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "VBar": {
    "desc": "Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/VBar.py\n        :source-position: below",
    "name": "VBar",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"bottom\": {\"value\": 0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"13d31555-3504-435c-8d23-3d7d0942f750\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null, \"width\": null, \"x\": null}",
    "props": [
      {
        "desc": "The x-coordinates of the centers of the vertical bars.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line join values for the vertical bars.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The widths of the vertical bars.",
        "name": "width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The fill alpha values for the vertical bars.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The y-coordinates of the top edges.",
        "name": "top",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the vertical bars.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color values for the vertical bars.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash values for the vertical bars.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the vertical bars.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the vertical bars.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The y-coordinates of the bottom edges.",
        "name": "bottom",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "The line alpha values for the vertical bars.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the vertical bars.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "SingleIntervalTicker": {
    "desc": "Generate evenly spaced ticks at a fixed interval regardless of\n    scale.",
    "name": "SingleIntervalTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"96dbfa34-ab60-4766-a318-cf1b879287b5\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "type": "Float",
        "default": null
      }
    ]
  },
  "DataSource": {
    "desc": "A base class for data source types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "DataSource",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"callback\": null, \"id\": \"47f2ae84-41c5-437a-b39f-a2b4b83ceb5c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "type": "Dict(String, Dict(String, Any))",
        "default": {
          "2d": {
            "indices": {}
          },
          "0d": {
            "indices": [],
            "glyph": null
          },
          "1d": {
            "indices": []
          }
        }
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      }
    ]
  },
  "CrosshairTool": {
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The crosshair tool is a passive inspector tool. It is generally on\n    at all times, but can be configured in the inspector's menu\n    associated with the *toolbar icon* shown above.\n\n    The crosshair tool draws a crosshair annotation over the plot,\n    centered on the current mouse position. The crosshair tool may be\n    configured to draw across only one dimension by setting the\n    ``dimension`` property to only ``width`` or ``height``.\n\n    .. |crosshair_icon| image:: /_images/icons/Crosshair.png\n        :height: 18pt",
    "name": "CrosshairTool",
    "bases": [
      "bokeh.models.tools.Inspection"
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"ee5cbc59-0b6c-443b-a777-d2f4fbddaeb8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_width\": 1, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the crosshair tool is to track. By default, both a\n    vertical and horizontal line will be drawn. If only \"width\" is supplied,\n    only a horizontal line will be drawn. If only \"height\" is supplied,\n    only a vertical line will be drawn.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "name": "toggleable",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A color to use to stroke paths with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp",
        "name": "line_color",
        "type": "Color",
        "default": "black"
      },
      {
        "desc": "Stroke width in units of pixels.",
        "name": "line_width",
        "type": "Float",
        "default": 1
      },
      {
        "desc": "An alpha value to use to stroke paths with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).",
        "name": "line_alpha",
        "type": "Float",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "GMapPlot": {
    "desc": "A Bokeh Plot with a `Google Map`_ displayed underneath.\n\n    Data placed on this plot should be specified in decimal lat long coordinates e.g. 37.123, -122.404.\n    It will be automatically converted into the web mercator projection to display properly over\n    google maps tiles.\n\n    .. _Google Map: https://www.google.com/maps/",
    "name": "GMapPlot",
    "bases": [
      "bokeh.models.map_plots.MapPlot"
    ],
    "proto": "{\"above\": [], \"api_key\": null, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"9f4d9b24-c8e6-4862-bf50-b9a68fbe77da\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"map_options\": null, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"97e82426-047e-429f-8c8d-a90c3db81bef\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"992e5eda-8d02-47d9-8852-c46ec25603ee\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"b638580f-ab9b-486a-869a-af2a96af7855\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"99c25a99-66a3-4aa0-9b53-1eae1e41b0dc\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"77cd00bd-c055-4b73-8ec9-c972190a888b\", \"type\": \"LinearScale\"}}",
    "props": [
      {
        "desc": "The fill alpha for the plot border style.",
        "name": "border_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "name": "h_symmetry",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether to use HiDPI mode when available.",
        "name": "hidpi",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "name": "x_scale",
        "type": "Instance(Scale)",
        "default": "{\"id\": \"0fd79950-7ee6-4d66-b456-05855e6cdb24\"}"
      },
      {
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "name": "right",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "default": {}
      },
      {
        "desc": "Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\n    for more information on how to obtain your own.",
        "name": "api_key",
        "type": "String",
        "default": null
      },
      {
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_top",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The fill alpha for the plot background style.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "default": {}
      },
      {
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "name": "title_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "above"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A ToolEvents object to share and report tool events.",
        "name": "tool_events",
        "type": "Instance(ToolEvents)",
        "default": null
      },
      {
        "desc": "The fill color for the plot border style.",
        "name": "border_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "name": "v_symmetry",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "name": "plot_width",
        "type": "Int",
        "default": 600
      },
      {
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_right",
        "type": "Int",
        "default": null
      },
      {
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line alpha for the plot border outline.",
        "name": "outline_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "name": "lod_factor",
        "type": "Int",
        "default": 10
      },
      {
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "name": "y_scale",
        "type": "Instance(Scale)",
        "default": "{\"id\": \"e4de90b0-9636-4fce-a5b3-32e4e8735eec\"}"
      },
      {
        "desc": "The line dash for the plot border outline.",
        "name": "outline_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line dash offset for the plot border outline.",
        "name": "outline_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_bottom",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "default": "canvas"
      },
      {
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Options for displaying the plot.",
        "name": "map_options",
        "type": "Instance(GMapOptions)",
        "default": null
      },
      {
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "name": "min_border",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "name": "toolbar_sticky",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line color for the plot border outline.",
        "name": "outline_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#e5e5e5"
      },
      {
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "name": "title",
        "type": "Instance(Title)",
        "default": "{\"id\": \"4e56a972-eacc-4e74-9d65-a6ae31ddead6\", \"text\": \"\"}"
      },
      {
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "name": "toolbar_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "default": "right"
      },
      {
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "name": "y_range",
        "type": "Instance(Range)",
        "default": null
      },
      {
        "desc": "The line cap for the plot border outline.",
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The fill color for the plot background style.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#ffffff"
      },
      {
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "name": "x_range",
        "type": "Instance(Range)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "name": "plot_height",
        "type": "Int",
        "default": 600
      },
      {
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_left",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The line width for the plot border outline.",
        "name": "outline_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "name": "lod_interval",
        "type": "Int",
        "default": 300
      },
      {
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "name": "lod_threshold",
        "type": "Int",
        "default": 2000
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area below of the plot.",
        "name": "below",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "name": "lod_timeout",
        "type": "Int",
        "default": 500
      },
      {
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "name": "left",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "The line join for the plot border outline.",
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A list of renderers to occupy the area above of the plot.",
        "name": "above",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "Label": {
    "desc": "Render a single text label as an annotation.\n\n    ``Label`` will render a single text label at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\n    Additionally, the label can be rotated with the ``angle`` property.\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.",
    "name": "Label",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "proto": "{\"angle\": 0, \"angle_units\": \"rad\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"0dd29655-1fda-40e9-b443-17f339e2bf0b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"visible\": true, \"x\": null, \"x_offset\": 0, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": 0, \"y_range_name\": \"default\", \"y_units\": \"data\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line width values for the text bounding box.",
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Offset value to apply to the y-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "y_offset",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "The line cap values for the text bounding box.",
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The text font size values for the text.",
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "12pt"
        }
      },
      {
        "desc": "The line alpha values for the text bounding box.",
        "name": "border_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset values for the text bounding box.",
        "name": "border_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text alpha values for the text.",
        "name": "text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the text bounding box.",
        "name": "border_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The unit type for the y attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "y_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The text value to render.",
        "name": "text",
        "type": "String",
        "default": null
      },
      {
        "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The fill alpha values for the text bounding box.",
        "name": "background_fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The fill color values for the text bounding box.",
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The angle to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center.",
        "name": "angle",
        "type": "Angle",
        "default": 0
      },
      {
        "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "x",
        "type": "Float",
        "default": null
      },
      {
        "desc": "The text align values for the text.",
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "y",
        "type": "Float",
        "default": null
      },
      {
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "default": "canvas"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The text baseline values for the text.",
        "name": "text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line join values for the text bounding box.",
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The text color values for the text.",
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The unit type for the x attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "x_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font values for the text.",
        "name": "text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The line color values for the text bounding box.",
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": null
      },
      {
        "desc": "A particular (named) y-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "Offset value to apply to the x-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "x_offset",
        "type": "Float",
        "default": 0
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The text font style values for the text.",
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      }
    ]
  },
  "Tool": {
    "desc": "A base class for all interactive tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Tool",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"d849e53d-4f56-4341-83d9-ed16f55ca1bc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "HBar": {
    "desc": "Render horizontal bars, given a center coordinate, ``height`` and\n    (``left``, ``right``) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/HBar.py\n        :source-position: below",
    "name": "HBar",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"131e608f-1700-4b16-bafb-eb65648a6a6f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": {\"value\": 0}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"y\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the horizontal bars.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates of the centers of the horizontal bars.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The x-coordinates of the right edges.",
        "name": "right",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the horizontal bars.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the horizontal bars.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the horizontal bars.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the horizontal bars.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the horizontal bars.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The heights of the vertical bars.",
        "name": "height",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line alpha values for the horizontal bars.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset values for the horizontal bars.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The x-coordinates of the left edges.",
        "name": "left",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 0
      },
      {
        "desc": "The fill alpha values for the horizontal bars.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "Asterisk": {
    "desc": "Render asterisk '*' markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Asterisk.py\n        :source-position: below",
    "name": "Asterisk",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"770243da-f0f1-4bb6-9ae2-93fbce832e12\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "AbstractGroup": {
    "desc": "Abstract base class for all kinds of groups.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "AbstractGroup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"060862f9-e664-4e24-b269-f9e341fdfbb8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "DaysTicker": {
    "desc": "Generate ticks spaced apart by specific, even multiples of days.",
    "name": "DaysTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "proto": "{\"days\": [], \"desired_num_ticks\": 6, \"id\": \"ec1b6a47-25a2-4528-a289-9adf719f68b8\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The intervals of days to use.",
        "name": "days",
        "type": "Seq(Int)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "type": "Float",
        "default": null
      }
    ]
  },
  "DataRenderer": {
    "desc": "An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``TileRenderer``).\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "DataRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "proto": "{\"id\": \"0476ae46-9395-48e7-92b1-545735ff5c72\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "image"
      }
    ]
  },
  "Annulus": {
    "desc": "Render annuli.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Annulus.py\n        :source-position: below",
    "name": "Annulus",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"bb620348-19ec-45e9-9077-0a64b57cd0c0\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-coordinates of the center of the annuli.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line join values for the annuli.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The y-coordinates of the center of the annuli.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "",
        "name": "inner_radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the annuli.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The inner radii of the annuli.",
        "name": "inner_radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The line dash values for the annuli.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the annuli.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the annuli.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "",
        "name": "outer_radius_units",
        "type": "Enum('screen', 'data')",
        "default": "data"
      },
      {
        "desc": "The fill color values for the annuli.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line alpha values for the annuli.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line dash offset values for the annuli.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The outer radii of the annuli.",
        "name": "outer_radius",
        "type": "DistanceSpec(units_default='data')",
        "default": null
      },
      {
        "desc": "The fill alpha values for the annuli.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "YearsTicker": {
    "desc": "Generate ticks spaced apart even numbers of years.",
    "name": "YearsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"28d474ab-f312-450b-b168-e775371c126e\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "type": "Float",
        "default": null
      }
    ]
  },
  "InvertedTriangle": {
    "desc": "Render upside-down triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/InvertedTriangle.py\n        :source-position: below",
    "name": "InvertedTriangle",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"2721afef-fb25-4652-b978-f6dff5c32a2f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "props": [
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "default": 0.0
      },
      {
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "",
        "name": "angle_units",
        "type": "Enum('deg', 'rad')",
        "default": "rad"
      },
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 4
      },
      {
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      }
    ]
  },
  "MultiLine": {
    "desc": "Render several lines.\n\n    The data for the ``MultiLine`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/MultiLine.py\n        :source-position: below",
    "name": "MultiLine",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "proto": "{\"id\": \"8586921a-16ff-414b-a96f-4506fec83696\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line join values for the lines.",
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The y-coordinates for all the lines, given as a \"list of lists\".",
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The x-coordinates for all the lines, given as a \"list of lists\".",
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": null
      },
      {
        "desc": "The line cap values for the lines.",
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line dash values for the lines.",
        "name": "line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color values for the lines.",
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line width values for the lines.",
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The line alpha values for the lines.",
        "name": "line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line dash offset values for the lines.",
        "name": "line_dash_offset",
        "type": "Int",
        "default": 0
      }
    ]
  },
  "LogColorMapper": {
    "desc": "Map numbers in a range [*low*, *high*] into a\n    sequence of colors (a palette) on a natural logarithm scale.\n\n    For example, if the range is [0, 25] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as\n    follows::\n\n                x < 0     : 'red'     # values < low are clamped\n       0     >= x < 2.72  : 'red'     # math.e ** 1\n       2.72  >= x < 7.39  : 'green'   # math.e ** 2\n       7.39  >= x < 20.09 : 'blue'    # math.e ** 3\n       20.09 >= x         : 'blue'    # values > high are clamped\n\n    .. warning::\n        The LogColorMapper only works for images with scalar values that are\n        non-negative.",
    "name": "LogColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"edc192ae-ad74-4849-862e-d6df353721cd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "name": "low",
        "type": "Float",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "type": "Seq(Color)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "name": "high",
        "type": "Float",
        "default": null
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "type": "Color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "name": "low_color",
        "type": "Color",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "name": "high_color",
        "type": "Color",
        "default": null
      }
    ]
  },
  "StringFormatter": {
    "desc": "Basic string cell formatter.",
    "name": "StringFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "proto": "{\"font_style\": \"normal\", \"id\": \"0f4a7b7b-53e2-46a4-8e2d-317971b890fd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional text align, i.e. left, center or right.",
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details.",
        "name": "text_color",
        "type": "Color",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional text font style, e.g. bold, italic.",
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      }
    ]
  },
  "AdaptiveTicker": {
    "desc": "Generate \"nice\" round ticks at any magnitude.\n\n    Creates ticks that are \"base\" multiples of a set of given\n    mantissas. For example, with ``base=10`` and\n    ``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n        ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ...",
    "name": "AdaptiveTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"0ef905f4-2ada-4e8b-a138-7bcfc05e47f1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "type": "Float",
        "default": 10.0
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "type": "Float",
        "default": 0.0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "type": "Float",
        "default": null
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "type": "Seq(Float)",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "type": "Int",
        "default": 5
      }
    ]
  },
  "ImageSource": {
    "desc": "A base class for all image source types.",
    "name": "ImageSource",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"extra_url_vars\": {}, \"id\": \"ca5a0495-0ffe-49fe-b421-85b661109e65\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "tile service url (example: http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png)",
        "name": "url",
        "type": "String",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n    These variables are useful for parts of tile urls which do not change from tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "default": {}
      }
    ]
  },
  "Axis": {
    "desc": "A base class that defines common properties for all axis types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Axis",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": null, \"id\": \"1a67fb88-a391-4b65-b210-eacef30b4bac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "default": null
      },
      {
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "italic"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "type": "String",
        "default": "default"
      },
      {
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "type": "Instance(Ticker)",
        "default": null
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "type": "Int",
        "default": 2
      },
      {
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "black"
      },
      {
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "center"
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "default": "#444444"
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "type": "Int",
        "default": 4
      },
      {
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "bottom"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "default": "butt"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "type": "Int",
        "default": 6
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), String)",
        "default": {}
      },
      {
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "type": "String",
        "default": "helvetica"
      },
      {
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "type": "Int",
        "default": 0
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "type": "String",
        "default": ""
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1.0
      },
      {
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "default": "miter"
      },
      {
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "type": "Int",
        "default": 5
      },
      {
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "type": "DashPattern",
        "default": []
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "default": "horizontal"
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "default": "alphabetic"
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "overlay"
      }
    ]
  },
  "HoverTool": {
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The hover tool is a passive inspector tool. It is generally on at\n    all times, but can be configured in the inspector's menu associated\n    with the *toolbar icon* shown above.\n\n    By default, the hover tool displays informational tooltips whenever\n    the cursor is directly over a glyph. The data to show comes from the\n    glyph's data source, and what is to be displayed is configurable with\n    the ``tooltips`` attribute that maps display names to columns in the\n    data source, or to special known variables.\n\n    Here is an example of how to configure and use the hover tool::\n\n        # Add tooltip (name, field) pairs to the tool. See below for a\n        # description of possible field values.\n        hover.tooltips = [\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"radius\", \"@radius\"),\n            (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n            (\"foo\", \"@foo\"),\n            (\"bar\", \"@bar\"),\n            (\"baz\", \"@baz{safe}\"),\n            (\"total\", \"@total{$0,0.00}\"\n        ]\n\n    You can also supply a ``Callback`` to the HoverTool, to build custom\n    interactions on hover. In this case you may want to turn the tooltips\n    off by setting ``tooltips=None``.\n\n    .. warning::\n\n        Hover tool does not currently work with the following glyphs:\n\n        .. hlist::\n            :columns: 3\n\n            * annulus\n            * arc\n            * bezier\n            * image\n            * image_rgba\n            * image_url\n            * oval\n            * patch\n            * quadratic\n            * ray\n            * text\n\n    .. |hover_icon| image:: /_images/icons/Hover.png\n        :height: 18pt",
    "name": "HoverTool",
    "bases": [
      "bokeh.models.tools.Inspection"
    ],
    "proto": "{\"anchor\": \"center\", \"attachment\": \"horizontal\", \"callback\": null, \"formatters\": {}, \"id\": \"cf5af989-e610-4b4b-b115-2a5d3fa880ea\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_policy\": \"nearest\", \"mode\": \"mouse\", \"name\": null, \"names\": [], \"plot\": null, \"point_policy\": \"snap_to_data\", \"renderers\": [], \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true, \"tooltips\": [[\"index\", \"$index\"], [\"data (x, y)\", \"($x, $y)\"], [\"canvas (x, y)\", \"($sx, $sy)\"]]}",
    "props": [
      {
        "desc": "The (name, field) pairs describing what the hover tool should\n    display when there is a hit.\n\n    Field names starting with \"@\" are interpreted as columns on the\n    data source. For instance, \"@temp\" would look up values to display\n    from the \"temp\" column of the data source.\n\n    Field names starting with \"$\" are special, known fields:\n\n    :$index: index of selected point in the data source\n    :$x: x-coordinate under the cursor in data space\n    :$y: y-coordinate under the cursor in data space\n    :$sx: x-coordinate under the cursor in screen (canvas) space\n    :$sy: y-coordinate under the cursor in screen (canvas) space\n    :$color: color data from data source, with the syntax:\n        ``$color[options]:field_name``. The available options\n        are: 'hex' (to display the color as a hex value), and\n        'swatch' to also display a small color swatch.\n\n    Field names that begin with ``@`` are associated with columns in a\n    ``ColumnDataSource``. For instance the field name ``\"@price\"`` will\n    display values from the ``\"price\"`` column whenever a hover is triggered.\n    If the hover is for the 17th glyph, then the hover tooltip will\n    correspondingly display the 17th price value.\n\n    Note that if a column name contains spaces, the it must be supplied by\n    surrounding it in curly braces, e.g. ``@{adjusted close}`` will display\n    values from a column named ``\"adjusted close\"``.\n\n    By default, values for fields (e.g. ``@foo``) are displayed in a basic\n    numeric format. However it is possible to control the formatting of values\n    more precisely. Fields can be modified by appending a format specified to\n    the end in curly braces. Some examples are below.\n\n    .. code-block:: python\n\n        \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n        \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n        \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\n    Specifying a format ``{safe}`` after a field name will override automatic\n    escaping of the tooltip data source. Any HTML tags in the data tags will\n    be rendered as HTML in the resulting HoverTool output. See\n    :ref:`custom_hover_tooltip` for a more detailed example.\n\n    ``None`` is also a valid value for tooltips. This turns off the\n    rendering of tooltips. This is mostly useful when supplying other\n    actions on hover via the callback property.\n\n    .. note::\n        The tooltips attribute can also be configured with a mapping type,\n        e.g. ``dict`` or ``OrderedDict``. However, if a ``dict`` is used,\n        the visual presentation order is unspecified.",
        "name": "tooltips",
        "type": "Either(String, List(Tuple(String, String)))",
        "default": [
          [
            "index",
            "$index"
          ],
          [
            "data (x, y)",
            "($x, $y)"
          ],
          [
            "canvas (x, y)",
            "($sx, $sy)"
          ]
        ]
      },
      {
        "desc": "When showing tooltips for lines, designates whether the tooltip position\n    should be the \"previous\" or \"next\" points on the line, the \"nearest\" point\n    to the current mouse position, or \"interpolate\" along the line to the\n    current mouse position.",
        "name": "line_policy",
        "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')",
        "default": "nearest"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever the input's value changes. The\n    cb_data parameter that is available to the Callback code will contain two\n    HoverTool specific fields:\n\n    :index: object containing the indices of the hovered points in the data source\n    :geometry: object containing the coordinates of the hover cursor",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\n    point of a tooltip. The default is to attach to the center of a glyph.",
        "name": "anchor",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')",
        "default": "center"
      },
      {
        "desc": "Whether tooltip's arrow should be showed.",
        "name": "show_arrow",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "name": "toggleable",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Whether to consider hover pointer as a point (x/y values), or a\n    span on h or v directions.",
        "name": "mode",
        "type": "Enum('mouse', 'hline', 'vline')",
        "default": "mouse"
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether tooltip's arrow should appear in the horizontal or vertical dimension.",
        "name": "attachment",
        "type": "Enum('horizontal', 'vertical')",
        "default": "horizontal"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Whether the tooltip position should snap to the \"center\" (or other anchor)\n    position of the associated glyph, or always follow the current mouse cursor\n    position.",
        "name": "point_policy",
        "type": "Enum('snap_to_data', 'follow_mouse', 'none')",
        "default": "snap_to_data"
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      },
      {
        "desc": "Specify the formatting scheme for data source columns, e.g.\n\n    .. code-block:: python\n\n        tool.formatters = dict(date=\"datetime\")\n\n    will cause format specifications for the \"date\" column to be interpreted\n    according to the \"datetime\" formatting scheme. The following schemed are\n    available:\n\n    :``\"numeral\"``:\n        Provides a wide variety of formats for numbers, currency, bytes, times,\n        and percentages. The full set of formats can be found in the\n        |NumeralTickFormatter| reference documentation.\n\n    :``\"datetime\"``:\n        Provides formats for date and time values. The full set of formats is\n        listed in the |DatetimeTickFormatter| reference documentation.\n\n    :``\"printf\"``:\n        Provides formats similar to C-style \"printf\" type specifiers. See the\n        |PrintfTickFormatter| reference documentation for complete details.\n\n    If no formatter is specified for a column name, the default ``\"numeral\"``\n    formatter is assumed.\n\n    .. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n    .. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n    .. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`",
        "name": "formatters",
        "type": "Dict(String, Enum('numeral', 'datetime', 'printf'))",
        "default": {}
      }
    ]
  },
  "WheelZoomTool": {
    "desc": "*toolbar icon*: |wheel_zoom_icon|\n\n    The wheel zoom tool will zoom the plot in and out, centered on the\n    current mouse location.\n\n    The wheel zoom tool also activates the border regions of a Plot for\n    \"single axis\" zooming. For instance, zooming in the vertical border or\n    axis will effect a zoom in the vertical direction only, with the\n    horizontal dimension kept fixed.\n\n    .. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n        :height: 18pt",
    "name": "WheelZoomTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"6a6f8e63-121c-4b2d-910a-07253f5aee83\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "Which dimensions the wheel zoom tool is constrained to act in. By\n    default the wheel zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "default": "both"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "Model": {
    "desc": "Base class for all objects stored in Bokeh  |Document| instances.",
    "name": "Model",
    "bases": [
      "bokeh.core.has_props.HasProps",
      "bokeh.util.callback_manager.PropertyCallbackManager",
      "bokeh.util.callback_manager.EventCallbackManager"
    ],
    "proto": "{\"id\": \"a4b79f48-f7d0-403b-b69a-ce04be53ac06\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "DataRange": {
    "desc": "A base class for all data range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "DataRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "proto": "{\"callback\": null, \"id\": \"d83eda50-aff3-4cd2-9a9b-b2adb93dda7d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.",
        "name": "names",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "default": []
      }
    ]
  },
  "GMapOptions": {
    "desc": "Options for GMapPlot objects.",
    "name": "GMapOptions",
    "bases": [
      "bokeh.models.map_plots.MapOptions"
    ],
    "proto": "{\"id\": \"b327e592-12db-493b-83c1-e688fe9c2c90\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"map_type\": \"roadmap\", \"name\": null, \"scale_control\": false, \"styles\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The `map type`_ to use for the GMapPlot.\n\n    .. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId",
        "name": "map_type",
        "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')",
        "default": "roadmap"
      },
      {
        "desc": "A JSON array of `map styles`_ to use for the GMapPlot. Many example styles can\n    `be found here`_.\n\n    .. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n    .. _be found here: https://snazzymaps.com",
        "name": "styles",
        "type": "JSON",
        "default": null
      },
      {
        "desc": "The latitude where the map should be centered.",
        "name": "lat",
        "type": "Float",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "Whether the Google map should display its distance scale control.",
        "name": "scale_control",
        "type": "Bool",
        "default": false
      },
      {
        "desc": "The longitude where the map should be centered.",
        "name": "lng",
        "type": "Float",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The initial zoom level to use when displaying the map.",
        "name": "zoom",
        "type": "Int",
        "default": 12
      }
    ]
  },
  "NumberFormatter": {
    "desc": "Number cell formatter.",
    "name": "NumberFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "proto": "{\"font_style\": \"normal\", \"format\": \"0,0\", \"id\": \"78ea1154-ee04-4279-a69f-24f94a9ebf8c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "An optional text align, i.e. left, center or right.",
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "default": "left"
      },
      {
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "name": "rounding",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "default": "round"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details.",
        "name": "text_color",
        "type": "Color",
        "default": null
      },
      {
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html",
        "name": "format",
        "type": "String",
        "default": "0,0"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "name": "language",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "default": "en"
      },
      {
        "desc": "An optional text font style, e.g. bold, italic.",
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold')",
        "default": "normal"
      }
    ]
  },
  "Callback": {
    "desc": "Base class for interactive callback.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Callback",
    "bases": [
      "bokeh.model.Model"
    ],
    "proto": "{\"id\": \"8e42597a-0df9-4de5-a7fe-dd46d8db80b2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      }
    ]
  },
  "Row": {
    "desc": "Lay out child components in a single horizontal row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.",
    "name": "Row",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c9aca3f3-8971-4e7d-966e-2692d6f03813\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "default": []
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  },
  "IntEditor": {
    "desc": "Spinner-based integer cell editor.",
    "name": "IntEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"27b95197-c0b0-40c6-894e-1f7a90d58844\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The major step value.",
        "name": "step",
        "type": "Int",
        "default": 1
      }
    ]
  },
  "NumberEditor": {
    "desc": "Spinner-based number cell editor.",
    "name": "NumberEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "proto": "{\"id\": \"fed381d8-0de7-4eb7-8ea4-3b23928b9a54\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 0.01, \"subscribed_events\": [], \"tags\": []}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "The major step value.",
        "name": "step",
        "type": "Float",
        "default": 0.01
      }
    ]
  },
  "TextAnnotation": {
    "desc": "Base class for text annotation models such as labels and titles.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "TextAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "proto": "{\"id\": \"858600c5-403d-45c3-bd0e-cf3c62d34000\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "name": "visible",
        "type": "Bool",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "default": "annotation"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "type": "Instance(Plot)",
        "default": null
      }
    ]
  },
  "TextInput": {
    "desc": "Single-line input widget.",
    "name": "TextInput",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c4d2a770-f2ba-4293-a77a-253ecf272688\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "type": "String",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "type": "List(String)",
        "default": []
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "type": "Int",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "name": "title",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "type": "Seq(String)",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "type": "List(Any)",
        "default": []
      },
      {
        "desc": "Placeholder for empty input field",
        "name": "placeholder",
        "type": "String",
        "default": ""
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "type": "Int",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "default": {}
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "default": "fixed"
      },
      {
        "desc": "Initial or entered text value.",
        "name": "value",
        "type": "String",
        "default": ""
      },
      {
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area.",
        "name": "callback",
        "type": "Instance(Callback)",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "type": "Bool",
        "default": false
      }
    ]
  }
}
