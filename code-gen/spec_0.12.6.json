{
  "Range": {
    "proto": "{\"callback\": null, \"id\": \"63ca2ccf-e335-45d8-84aa-f6e54166546b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Range"
  },
  "Bezier": {
    "proto": "{\"cx0\": null, \"cx1\": null, \"cy0\": null, \"cy1\": null, \"id\": \"843ce48c-57a1-4b71-b655-fa997e6f4999\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "desc": "Render B\u00e9zier curves.\n\n    For more information consult the `Wikipedia article for B\u00e9zier curve`_.\n\n    .. _Wikipedia article for B\u00e9zier curve: http://en.wikipedia.org/wiki/B\u00e9zier_curve\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Bezier.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The x-coordinates of second control points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cx1",
        "default": null
      },
      {
        "desc": "The y-coordinates of second control points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cy1",
        "default": null
      },
      {
        "desc": "The y-coordinates of the ending points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y1",
        "default": null
      },
      {
        "desc": "The line cap values for the B\u00e9zier curves.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the B\u00e9zier curves.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the B\u00e9zier curves.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the B\u00e9zier curves.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the B\u00e9zier curves.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join values for the B\u00e9zier curves.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The x-coordinates of first control points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cx0",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the B\u00e9zier curves.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the ending points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x1",
        "default": null
      },
      {
        "desc": "The y-coordinates of the starting points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y0",
        "default": null
      },
      {
        "desc": "The y-coordinates of first control points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cy0",
        "default": null
      },
      {
        "desc": "The x-coordinates of the starting points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x0",
        "default": null
      }
    ],
    "name": "Bezier"
  },
  "BoxAnnotation": {
    "proto": "{\"bottom\": null, \"bottom_units\": \"data\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"e1a49e4e-03c0-4259-8d84-f592a14a79ac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"left_units\": \"data\", \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"right\": null, \"right_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"top\": null, \"top_units\": \"data\", \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a shaded rectangular region as an annotation.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "The x-coordinates of the left edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "name": "left",
        "default": null
      },
      {
        "desc": "The unit type for the right attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "right_units",
        "default": "data"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "The fill alpha values for the box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 0.4
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line color values for the box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "#cccccc"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The fill color values for the box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "#fff9ba"
      },
      {
        "desc": "The line alpha values for the box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 0.3
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the right edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "name": "right",
        "default": null
      },
      {
        "desc": "The y-coordinates of the bottom edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "name": "bottom",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The unit type for the left attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "left_units",
        "default": "data"
      },
      {
        "desc": "The y-coordinates of the top edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "name": "top",
        "default": null
      },
      {
        "desc": "The line width values for the box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The unit type for the bottom attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "bottom_units",
        "default": "data"
      },
      {
        "desc": "Specifies whether the box is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\"",
        "type": "Enum('canvas', 'css')",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "desc": "The line dash values for the box.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the box.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join values for the box.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The unit type for the top attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "top_units",
        "default": "data"
      },
      {
        "desc": "The line cap values for the box.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "BoxAnnotation"
  },
  "Group": {
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c87f99cc-5c36-4241-9acf-5ebce32f6e35\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for groups with items rendered as check/radio\n    boxes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup"
    ],
    "props": [
      {
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "type": "Bool",
        "name": "inline",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Group"
  },
  "LogAxis": {
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"1737fa00-0514-43f9-b4bb-8628d7e933dd\", \"type\": \"LogTickFormatter\"}, \"id\": \"8770df23-8487-4738-8dad-e81586bc7310\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"d15efe50-f62b-4a12-a080-33700dd0c570\", \"type\": \"LogTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An axis that picks nice numbers for tick locations on a\n    log scale. Configured with a ``LogTickFormatter`` by default.",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "props": [
      {
        "desc": "The line cap of the axis line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "type": "Int",
        "name": "major_label_standoff",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "type": "Dict(Either(Float, String), String)",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "desc": "The text font style of the axis label.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size of the axis label.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "desc": "The line width of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text baseline of the axis label.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line alpha of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "type": "Int",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text align of the axis label.",
        "type": "Enum('left', 'right', 'center')",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text color of the axis label.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": "{\"id\": \"883ebb91-7220-46b8-a633-310e169c3ae9\"}"
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the axis line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "desc": "The text alpha of the axis label.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": "{\"id\": \"1ac02b04-c601-435d-90bb-42dba5190f1f\"}"
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "desc": "The line dash offset of the axis line.",
        "type": "Int",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color of the axis line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "type": "String",
        "name": "axis_label",
        "default": ""
      },
      {
        "desc": "The line dash of the axis line.",
        "type": "DashPattern",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font of the axis label.",
        "type": "String",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "LogAxis"
  },
  "Scroll": {
    "proto": "{\"id\": \"a9562710-7a84-43c2-8c86-7141057ffd31\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that respond to scroll events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Scroll"
  },
  "Glyph": {
    "proto": "{\"id\": \"190cc00a-b07b-4b9e-acd5-a601b9c74bb6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for all glyph models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Glyph"
  },
  "Dropdown": {
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"default_value\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"035c36da-4d4a-4efa-a450-d93e1836bf38\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Dropdown\", \"menu\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"value\": null, \"width\": null}",
    "desc": "A dropdown button.",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "Button's dropdown menu consisting of entries containing item's text and\n    value name. Use ``None`` as a menu separator.",
        "type": "List(Tuple(String, String))",
        "name": "menu",
        "default": []
      },
      {
        "desc": "The default value, otherwise the first item in ``menu`` will be used.",
        "type": "String",
        "name": "default_value",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "type": "String",
        "name": "label",
        "default": "Dropdown"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A private property used to trigger ``on_click`` event handler.",
        "type": "String",
        "name": "value",
        "default": null
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "type": "Instance(AbstractIcon)",
        "name": "icon",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Dropdown"
  },
  "LogTicker": {
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"f3e60d0a-dba7-492c-b783-abb31c6bf7cf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks on a log scale.",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "type": "Float",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "type": "Float",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "type": "Seq(Float)",
        "name": "mantissas",
        "default": [
          1,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "type": "Float",
        "name": "base",
        "default": 10.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "LogTicker"
  },
  "Transform": {
    "proto": "{\"id\": \"22036ba7-6a76-4cd8-a767-1c28407431e3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for ``Transform`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Transform"
  },
  "Toolbar": {
    "proto": "{\"active_drag\": \"auto\", \"active_inspect\": \"auto\", \"active_scroll\": \"auto\", \"active_tap\": \"auto\", \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"e8d9d8a0-9238-44f5-8710-f3ae305a1cea\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"sizing_mode\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": [], \"width\": null}",
    "desc": "Collect tools to display for a single plot.",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ],
    "props": [
      {
        "desc": "Specify a tap/click tool to be active when the plot is displayed.",
        "type": "Either(Auto, Instance(Tap))",
        "name": "active_tap",
        "default": "auto"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specify a drag tool to be active when the plot is displayed.",
        "type": "Either(Auto, Instance(Drag))",
        "name": "active_drag",
        "default": "auto"
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": null
      },
      {
        "desc": "Specify an inspection tool or sequence of inspection tools to be active when\n    the plot is displayed.",
        "type": "Either(Auto, Instance(Inspection), Seq(Instance(Inspection)))",
        "name": "active_inspect",
        "default": "auto"
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Specify a scroll/pinch tool to be active when the plot is displayed.",
        "type": "Either(Auto, Instance(Scroll))",
        "name": "active_scroll",
        "default": "auto"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "type": "Enum('normal', 'grey')",
        "name": "logo",
        "default": "normal"
      },
      {
        "desc": "A list of tools to add to the plot.",
        "type": "List(Instance(Tool))",
        "name": "tools",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Toolbar"
  },
  "RemoteSource": {
    "proto": "{\"callback\": null, \"column_names\": [], \"data\": {}, \"data_url\": null, \"id\": \"718358fe-fe9a-4f83-b816-41b1388505ab\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"polling_interval\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.sources.ColumnDataSource"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "polling interval for updating data source in milliseconds",
        "type": "Int",
        "name": "polling_interval",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "type": "Dict(String, Dict(String, Any))",
        "name": "selected",
        "default": {
          "2d": {
            "indices": {}
          },
          "1d": {
            "indices": []
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "type": "List(String)",
        "name": "column_names",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "type": "ColumnData(String, Seq(Any))",
        "name": "data",
        "default": {}
      },
      {
        "desc": "The URL to the endpoint for the data.",
        "type": "String",
        "name": "data_url",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "RemoteSource"
  },
  "DatetimeTickFormatter": {
    "proto": "{\"days\": [\"%m/%d\", \"%a%d\"], \"hourmin\": [\"%H:%M\"], \"hours\": [\"%Hh\", \"%H:%M\"], \"id\": \"72983890-20bd-4137-8e75-643aab68751c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"microseconds\": [\"%fus\"], \"milliseconds\": [\"%3Nms\", \"%S.%3Ns\"], \"minsec\": [\":%M:%S\"], \"minutes\": [\":%M\", \"%Mm\"], \"months\": [\"%m/%Y\", \"%b%y\"], \"name\": null, \"seconds\": [\"%Ss\"], \"subscribed_events\": [], \"tags\": [], \"years\": [\"%Y\"]}",
    "desc": "A ``TickFormatter`` for displaying datetime values nicely across a\n    range of scales.\n\n    ``DatetimeTickFormatter`` has the following properties (listed together\n    with their default values) that can be used to control the formatting\n    of axis ticks at different scales scales:\n\n    .. code-block:: python\n\n        microseconds = ['%fus']\n\n        milliseconds = ['%3Nms', '%S.%3Ns']\n\n        seconds = ['%Ss']\n\n        minsec = [':%M:%S']\n\n        minutes = [':%M', '%Mm']\n\n        hourmin = ['%H:%M']\n\n        hours = ['%Hh', '%H:%M']\n\n        days = ['%m/%d', '%a%d']\n\n        months = ['%m/%Y', '%b%y']\n\n        years = ['%Y']\n\n    Each scale property can be set to format or list of formats to use for\n    formatting datetime tick values that fall in in that \"time scale\".\n    By default, only the first format string passed for each time scale\n    will be used. By default, all leading zeros are stripped away from\n    the formatted labels.\n\n    This list of supported `strftime`_ formats is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "Formats for displaying datetime values in the ``days`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "days",
        "default": [
          "%m/%d",
          "%a%d"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``seconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "seconds",
        "default": [
          "%Ss"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``hours`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "hours",
        "default": [
          "%Hh",
          "%H:%M"
        ]
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "hourmin",
        "default": [
          "%H:%M"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``minutes`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "minutes",
        "default": [
          ":%M",
          "%Mm"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``months`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "months",
        "default": [
          "%m/%Y",
          "%b%y"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``milliseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "milliseconds",
        "default": [
          "%3Nms",
          "%S.%3Ns"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``microseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "microseconds",
        "default": [
          "%fus"
        ]
      },
      {
        "desc": "Formats for displaying datetime values in the ``years`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "years",
        "default": [
          "%Y"
        ]
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "type": "List(String)",
        "name": "minsec",
        "default": [
          ":%M:%S"
        ]
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "DatetimeTickFormatter"
  },
  "MonthsTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"c8d82905-7c05-4acd-be95-9a461f1c8990\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"months\": [], \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks spaced apart by specific, even multiples of months.",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The intervals of months to use.",
        "type": "Seq(Int)",
        "name": "months",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The interval between adjacent ticks.",
        "type": "Float",
        "name": "interval",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "MonthsTicker"
  },
  "AbstractButton": {
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"7d67f30a-d539-4694-8950-2c4c51331302\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A base class that defines common properties for all button types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.widget.Widget",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "type": "String",
        "name": "label",
        "default": "Button"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "type": "Instance(AbstractIcon)",
        "name": "icon",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "AbstractButton"
  },
  "Band": {
    "proto": "{\"base\": null, \"dimension\": \"height\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"81ac30ed-e4f2-469f-b1e5-c74086efa1c3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"lower\": null, \"name\": null, \"plot\": null, \"source\": {\"id\": \"837fd092-01f2-4d2c-9568-a47287d333c8\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a filled area band along a dimension.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "lower_units",
        "default": "data"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "upper_units",
        "default": "data"
      },
      {
        "desc": "The fill alpha values for the band.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 0.4
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line color values for the band.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "#cccccc"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The fill color values for the band.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "#fff9ba"
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "type": "Instance(DataSource)",
        "name": "source",
        "default": "{\"data\": {}, \"id\": \"9b58d42b-407b-4fca-95fd-12a3fc5cf581\"}"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the band.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 0.3
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line width values for the band.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the band.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the band.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The direction of the band.",
        "type": "Enum('width', 'height')",
        "name": "dimension",
        "default": "height"
      },
      {
        "desc": "The line join values for the band.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The coordinations of the upper portion of the filled area band.",
        "type": "DistanceSpec(units_default='data')",
        "name": "upper",
        "default": null
      },
      {
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "type": "DistanceSpec(units_default='data')",
        "name": "base",
        "default": null
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "base_units",
        "default": "data"
      },
      {
        "desc": "The line cap values for the band.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The coordinates of the lower portion of the filled area band.",
        "type": "DistanceSpec(units_default='data')",
        "name": "lower",
        "default": null
      }
    ],
    "name": "Band"
  },
  "ContinuousColorMapper": {
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"3b5a4228-7253-4f67-b658-97206de42380\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for continuous color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "type": "Float",
        "name": "high",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "type": "Seq(Color)",
        "name": "palette",
        "default": null
      },
      {
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "type": "Float",
        "name": "low",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "type": "Color",
        "name": "high_color",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "type": "Color",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "type": "Color",
        "name": "low_color",
        "default": null
      }
    ],
    "name": "ContinuousColorMapper"
  },
  "Span": {
    "proto": "{\"dimension\": \"width\", \"id\": \"ccedc343-af73-4fb5-a1ba-2c4738779565\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"location\": null, \"location_units\": \"data\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a horizontal or vertical line span.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the span.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "Specifies whether the span is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\"",
        "type": "Enum('canvas', 'css')",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "desc": "The line dash values for the span.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the span.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the span.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The direction of the span.",
        "type": "Enum('width', 'height')",
        "name": "dimension",
        "default": "width"
      },
      {
        "desc": "The line join values for the span.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The unit type for the location attribute. Interpreted as \"data space\"\n    units by default.",
        "type": "Enum('screen', 'data')",
        "name": "location_units",
        "default": "data"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The line alpha values for the span.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the span.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The location of the span, along ``dimension``.",
        "type": "Float",
        "name": "location",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Span"
  },
  "CircleCross": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"c0d017a4-c21a-45a4-9b16-d68dec8c3c15\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render circle markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/CircleCross.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CircleCross"
  },
  "LinearScale": {
    "proto": "{\"id\": \"6f9fa7bb-3980-40d8-8f22-43c20b02f56b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "LinearScale"
  },
  "Patch": {
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"6af1281e-7892-4040-8512-d344a907fc4d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a single patch.\n\n    The ``Patch`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Patch.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the patch.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the patch.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the patch.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the patch.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        y-coordinates for each polygon should be separated by NaN\n        values in the sequence.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the patch.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the patch.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line color values for the patch.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The line alpha values for the patch.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line cap values for the patch.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        x-coordinates for each polygon should be separated by NaN\n        values in the sequence.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Patch"
  },
  "ColumnDataSource": {
    "proto": "{\"callback\": null, \"column_names\": [], \"data\": {}, \"id\": \"431a6648-9ede-40e8-aeec-a050b84b2918\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Maps names of columns to sequences or arrays.\n\n    If the ColumnDataSource initializer is called with a single argument that\n    is a dict or pandas.DataFrame, that argument is used as the value for the\n    \"data\" attribute. For example::\n\n        ColumnDataSource(mydict) # same as ColumnDataSource(data=mydict)\n        ColumnDataSource(df) # same as ColumnDataSource(data=df)\n\n    .. note::\n        There is an implicit assumption that all the columns in a\n        a given ColumnDataSource have the same length.",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "type": "Dict(String, Dict(String, Any))",
        "name": "selected",
        "default": {
          "2d": {
            "indices": {}
          },
          "1d": {
            "indices": []
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "type": "List(String)",
        "name": "column_names",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "type": "ColumnData(String, Seq(Any))",
        "name": "data",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "ColumnDataSource"
  },
  "DataSource": {
    "proto": "{\"callback\": null, \"id\": \"e5258a32-8422-45c1-a6c9-c91a58085acc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for data source types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "type": "Dict(String, Dict(String, Any))",
        "name": "selected",
        "default": {
          "2d": {
            "indices": {}
          },
          "1d": {
            "indices": []
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "DataSource"
  },
  "DateEditor": {
    "proto": "{\"id\": \"b5588e77-da4b-46e6-9ca6-dbcb5edd8298\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Calendar-based date cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "DateEditor"
  },
  "TMSTileSource": {
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"55162ddb-d84d-4ccc-8b66-93a616901235\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The TMSTileSource contains tile config info and provides urls for\n    tiles based on a templated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``.\n    The defining feature of TMS is the tile-origin in located at the bottom-left.\n\n    The TMSTileSource can also be helpful in implementing tile renderers for\n    custom tile sets, including non-spatial datasets.",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "props": [
      {
        "desc": "A y-offset in plot coordinates",
        "type": "Float",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "type": "Int",
        "name": "max_zoom",
        "default": 30
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "type": "String",
        "name": "attribution",
        "default": ""
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "type": "Bool",
        "name": "wrap_around",
        "default": true
      },
      {
        "desc": "An x-offset in plot coordinates",
        "type": "Float",
        "name": "x_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "type": "Int",
        "name": "min_zoom",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "type": "String",
        "name": "url",
        "default": ""
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "type": "Int",
        "name": "tile_size",
        "default": 256
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "type": "Float",
        "name": "initial_resolution",
        "default": 156543.03392804097
      }
    ],
    "name": "TMSTileSource"
  },
  "Tap": {
    "proto": "{\"id\": \"8fec1ae4-8bed-4b17-8b02-ebd8a47995c7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that respond to tap/click events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Tap"
  },
  "DaysTicker": {
    "proto": "{\"days\": [], \"desired_num_ticks\": 6, \"id\": \"b07113f0-8501-4082-bcfd-ca75c9540eec\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks spaced apart by specific, even multiples of days.",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "props": [
      {
        "desc": "The intervals of days to use.",
        "type": "Seq(Int)",
        "name": "days",
        "default": []
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The interval between adjacent ticks.",
        "type": "Float",
        "name": "interval",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "DaysTicker"
  },
  "IntEditor": {
    "proto": "{\"id\": \"5ec061df-e35c-4090-bbd7-7b390757086b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Spinner-based integer cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The major step value.",
        "type": "Int",
        "name": "step",
        "default": 1
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "IntEditor"
  },
  "DateFormatter": {
    "proto": "{\"format\": \"yy M d\", \"id\": \"f642a0f1-ce69-4493-b805-5c78d4bac9bf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Date cell formatter.",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "props": [
      {
        "desc": "The date format can be combinations of the following:\n\n    d\n        day of month (no leading zero)\n\n    dd\n        day of month (two digit)\n\n    o\n        day of year (no leading zeros)\n\n    oo\n        day of year (three digit)\n\n    D\n        day name short\n\n    DD\n        day name long\n\n    m\n        month of year (no leading zero)\n\n    mm\n        month of year (two digit)\n\n    M\n        month name short\n\n    MM\n        month name long\n\n    y\n        year (two digit)\n\n    yy\n        year (four digit)\n\n    @\n        Unix timestamp (ms since 01/01/1970)\n\n    !\n        Windows ticks (100ns since 01/01/0001)\n\n    \"...\"\n        literal text\n\n    ''\n        single quote",
        "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TICKS', 'TIMESTAMP'), String)",
        "name": "format",
        "default": "yy M d"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "DateFormatter"
  },
  "LabelSet": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"04db2809-d7c4-4db9-9197-68622427723b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"source\": {\"id\": \"181a3474-71e9-47c2-b706-3bd6f95c812d\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"visible\": true, \"x\": null, \"x_offset\": {\"value\": 0}, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": {\"value\": 0}, \"y_range_name\": \"default\", \"y_units\": \"data\"}",
    "desc": "Render multiple text labels as annotations.\n\n    ``LabelSet`` will render multiple text labels at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space. In this case (as opposed to the single ``Label`` model),\n    ``x`` and ``y`` can also be the name of a column from a\n    :class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\n    will be \"vectorized\" using coordinate values from the specified columns.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\n    may be vectorized by giving the name of a data source column.\n\n    Additionally, the label can be rotated with the ``angle`` property (which\n    may also be a column name.)\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.\n\n    The data source is provided by setting the ``source`` property.",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "props": [
      {
        "desc": "The text color values for the text.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash values for the text bounding box.",
        "type": "DashPattern",
        "name": "border_line_dash",
        "default": []
      },
      {
        "desc": "The fill color values for the text bounding box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y_offset",
        "default": 0
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "x_units",
        "default": "data"
      },
      {
        "desc": "The line join values for the text bounding box.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "type": "Instance(DataSource)",
        "name": "source",
        "default": "{\"data\": {}, \"id\": \"835e9315-4c63-4bd0-bcd8-ccfd5c8509dc\"}"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The text baseline values for the text.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The angles to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0
      },
      {
        "desc": "The text align values for the text.",
        "type": "Enum('left', 'right', 'center')",
        "name": "text_align",
        "default": "left"
      },
      {
        "desc": "The line color values for the text bounding box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_line_color",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line dash offset values for the text bounding box.",
        "type": "Int",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The text font style values for the text.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "text_font_style",
        "default": "normal"
      },
      {
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "type": "Enum('canvas', 'css')",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "desc": "The line cap values for the text bounding box.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "desc": "The y-coordinates to locate the text anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The text font size values for the text.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "text_font_size",
        "default": {
          "value": "12pt"
        }
      },
      {
        "desc": "The text alpha values for the text.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "y_units",
        "default": "data"
      },
      {
        "desc": "The text font values for the text.",
        "type": "String",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x_offset",
        "default": 0
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "The fill alpha values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The text values to render.",
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "text",
        "default": "text"
      },
      {
        "desc": "The line width values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_width",
        "default": 1
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The x-coordinates to locate the text anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "The line alpha values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_alpha",
        "default": 1.0
      }
    ],
    "name": "LabelSet"
  },
  "DynamicImageRenderer": {
    "proto": "{\"alpha\": 1.0, \"id\": \"7a692490-f624-433f-bf15-b9d743999c6d\", \"image_source\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "props": [
      {
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "type": "Bool",
        "name": "render_parents",
        "default": true
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "underlay"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Image source to use when rendering on the plot.",
        "type": "Instance(ImageSource)",
        "name": "image_source",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "tile opacity 0.0 - 1.0",
        "type": "Float",
        "name": "alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "DynamicImageRenderer"
  },
  "Rect": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"dilate\": false, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"0914f64e-bfcc-4bde-930d-eac9d5c87806\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "desc": "Render rectangles.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Rect.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the rectangles bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    rectangles to have a gap between them, when they should appear\n    flush.",
        "type": "Bool",
        "name": "dilate",
        "default": false
      },
      {
        "desc": "The fill alpha values for the rectangles.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line color values for the rectangles.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The overall widths of the rectangles.",
        "type": "DistanceSpec(units_default='data')",
        "name": "width",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The fill color values for the rectangles.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the rectangles.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the rectangles, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line width values for the rectangles.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the rectangles.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the rectangles.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the centers of the rectangles.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The overall heights of the rectangles.",
        "type": "DistanceSpec(units_default='data')",
        "name": "height",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line join values for the rectangles.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "width_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "height_units",
        "default": "data"
      },
      {
        "desc": "The line cap values for the rectangles.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the centers of the rectangles.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Rect"
  },
  "SingleIntervalTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"6a68aa66-7eee-400f-aa36-ee779a7fb7a9\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate evenly spaced ticks at a fixed interval regardless of\n    scale.",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The interval between adjacent ticks.",
        "type": "Float",
        "name": "interval",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "SingleIntervalTicker"
  },
  "ArrowHead": {
    "proto": "{\"id\": \"95705f6a-35d2-4ab5-99ae-2b1da7e78bd5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Base class for arrow heads.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "ArrowHead"
  },
  "HTMLTemplateFormatter": {
    "proto": "{\"id\": \"5cd8f3ae-b98c-49bf-b10c-8d93800bbc70\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"template\": \"<%= value %>\"}",
    "desc": "HTML formatter using a template.\n    This uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\n    The formatter has access other items in the row via the `dataContext` object passed to the formatter.\n    So, for example, if another column in the datasource was named `url`, the template could access it as:\n\n        <a href=\"<%= url %>\"><%= value %></a>\n\n    To use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\n    or `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\n    Example: Simple HTML template to format the column value as code.\n\n        HTMLTemplateFormatter(template='<code><%= value %></code>')\n\n    Example: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n        HTMLTemplateFormatter(template='<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>')",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "props": [
      {
        "desc": "Template string to be used by Underscore's template method.",
        "type": "String",
        "name": "template",
        "default": "<%= value %>"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "HTMLTemplateFormatter"
  },
  "Select": {
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"a7b478f9-8b3f-40b2-89f6-5fda1b708c31\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "desc": "Single-select widget.",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the current Select dropdown\n    value changes.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.",
        "type": "List(Either(String, Tuple(String, String)))",
        "name": "options",
        "default": []
      },
      {
        "desc": "Initial or selected value.",
        "type": "String",
        "name": "value",
        "default": ""
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Select"
  },
  "DataRange": {
    "proto": "{\"callback\": null, \"id\": \"5a497dbc-b0de-47c0-a581-19cf43daf81c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all data range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "DataRange"
  },
  "Range1d": {
    "proto": "{\"bounds\": null, \"callback\": null, \"end\": 1, \"id\": \"341c455e-7423-47ce-a2e6-92fa9a845ac3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A fixed, closed range [start, end] in a continuous scalar\n    dimension.\n\n    In addition to supplying ``start`` and ``end`` keyword arguments\n    to the ``Range1d`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        Range(0, 10) # equivalent to Range(start=0, end=10)",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Can be a timedelta. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well.",
        "type": "Either(Float, TimeDelta, Int)",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    If set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\n    increasing or decreasing, the first item should be the minimum value of the range and the\n    second item should be the maximum. Setting min > max will result in a ``ValueError``.\n\n    By default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\n    want to constrain one end of the plot, you can set min or max to None.\n\n    Examples:\n\n        Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n        Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0",
        "type": "MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": null
      },
      {
        "desc": "The end of the range.",
        "type": "Either(Float, Datetime, Int)",
        "name": "end",
        "default": 1
      },
      {
        "desc": "The start of the range.",
        "type": "Either(Float, Datetime, Int)",
        "name": "start",
        "default": 0
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound. Can be a timedelta.",
        "type": "Either(Float, TimeDelta, Int)",
        "name": "min_interval",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "Range1d"
  },
  "Tool": {
    "proto": "{\"id\": \"053caf32-5da6-48e9-86c0-3ddab3ac9d30\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all interactive tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Tool"
  },
  "CustomJS": {
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"38542e03-d570-4020-9ae4-869b6eca8c70\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Execute a JavaScript function.",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback.",
        "type": "Dict(String, Instance(Model))",
        "name": "args",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A snippet of JavaScript code to execute in the browser. The\n    code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. Additionally,\n    a ``cb_obj`` parameter contains the object that triggered the callback\n    and an optional ``cb_data`` parameter that contains any tool-specific data\n    (i.e. mouse coordinates and hovered glyph indices for the HoverTool).\n\n    .. note:: Use ``CustomJS.from_coffeescript()`` for CoffeeScript source code.",
        "type": "String",
        "name": "code",
        "default": ""
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CustomJS"
  },
  "CustomJSTransform": {
    "proto": "{\"args\": {}, \"func\": \"\", \"id\": \"31022ef4-4e14-47f7-b83b-285deec87fa7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"v_func\": \"\"}",
    "desc": "Apply a custom defined transform to data.",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "props": [
      {
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback.",
        "type": "Dict(String, Instance(Model))",
        "name": "args",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A snippet of JavaScript code to transform an array of values. The variable\n    ``xs`` will contain the untransformed array and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            v_func = '''\n            new_xs = new Array(xs.length)\n            for(i = 0; i < xs.length; i++) {\n                new_xs[i] = xs[i] + 0.5\n            }\n            return new_xs\n            '''\n\n    .. warning::\n        The vectorized function, ``v_func``, must return an array of the\n        same length as the input ``xs`` array.",
        "type": "String",
        "name": "v_func",
        "default": ""
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n    ``x`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            func = '''\n            return Math.floor(x) + 0.5\n            '''",
        "type": "String",
        "name": "func",
        "default": ""
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "CustomJSTransform"
  },
  "SelectEditor": {
    "proto": "{\"id\": \"25fabe8d-2f18-4781-9efd-0fe092f255ff\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "Select cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The list of options to select from.",
        "type": "List(String)",
        "name": "options",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "SelectEditor"
  },
  "MercatorTileSource": {
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"ac194c85-d53d-46ba-a872-6afe874e5f46\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "A base class for Mercator tile services (e.g.``WMTSTileSource``).",
    "bases": [
      "bokeh.models.tiles.TileSource"
    ],
    "props": [
      {
        "desc": "A y-offset in plot coordinates",
        "type": "Float",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "type": "Int",
        "name": "max_zoom",
        "default": 30
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "type": "String",
        "name": "attribution",
        "default": ""
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "type": "Bool",
        "name": "wrap_around",
        "default": true
      },
      {
        "desc": "An x-offset in plot coordinates",
        "type": "Float",
        "name": "x_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "type": "Int",
        "name": "min_zoom",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "type": "String",
        "name": "url",
        "default": ""
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "type": "Int",
        "name": "tile_size",
        "default": 256
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "type": "Float",
        "name": "initial_resolution",
        "default": 156543.03392804097
      }
    ],
    "name": "MercatorTileSource"
  },
  "Arrow": {
    "proto": "{\"end\": {\"id\": \"3d12e184-ec62-4645-b0c6-a2b05a153baf\", \"type\": \"OpenHead\"}, \"end_units\": \"data\", \"id\": \"bc5d3583-ad83-4914-81e0-f8c40e5a9f17\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"source\": null, \"start\": null, \"start_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_end\": null, \"x_range_name\": \"default\", \"x_start\": null, \"y_end\": null, \"y_range_name\": \"default\", \"y_start\": null}",
    "desc": "Render an arrow as an annotation.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The unit type for the end_x and end_y attributes. Interpreted as \"data\n    space\" units by default.",
        "type": "Enum('screen', 'data')",
        "name": "end_units",
        "default": "data"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line color values for the arrow body.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "type": "Instance(DataSource)",
        "name": "source",
        "default": null
      },
      {
        "desc": "The y-coordinates to locate the end of the arrows.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y_end",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the arrow body.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line width values for the arrow body.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "Instance of ArrowHead.",
        "type": "Instance(ArrowHead)",
        "name": "end",
        "default": "{\"id\": \"0053d9bb-9637-4ff7-a7e5-1443adc93716\"}"
      },
      {
        "desc": "The line dash values for the arrow body.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The unit type for the start_x and start_y attributes. Interpreted as \"data\n    space\" units by default.",
        "type": "Enum('screen', 'data')",
        "name": "start_units",
        "default": "data"
      },
      {
        "desc": "Instance of ArrowHead.",
        "type": "Instance(ArrowHead)",
        "name": "start",
        "default": null
      },
      {
        "desc": "The y-coordinates to locate the start of the arrows.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y_start",
        "default": null
      },
      {
        "desc": "The line join values for the arrow body.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset values for the arrow body.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The x-coordinates to locate the start of the arrows.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x_start",
        "default": null
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the arrow body.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates to locate the end of the arrows.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x_end",
        "default": null
      }
    ],
    "name": "Arrow"
  },
  "Marker": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"8af90a7f-7541-4d07-99e7-52d37fad36ff\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Base class for glyphs that are simple markers with line and\n    fill properties, located at an (x, y) location with a specified\n    size.\n\n    .. note::\n        For simplicity, all markers have both line and fill properties\n        declared, however some markers (`Asterisk`, `Cross`, `X`) only\n        draw lines. For these markers, the fill values are simply\n        ignored.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Marker"
  },
  "Column": {
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"4ba07704-783d-443f-ba7b-5d4d8a159fba\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Lay out child components in a single vertical row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "type": "List(Instance(LayoutDOM))",
        "name": "children",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Column"
  },
  "BooleanFormatter": {
    "proto": "{\"icon\": \"check\", \"id\": \"b5c3896c-5933-4849-9ed4-899db7eab969\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Boolean (check mark) cell formatter.",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The icon visualizing the check mark.",
        "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')",
        "name": "icon",
        "default": "check"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "BooleanFormatter"
  },
  "GuideRenderer": {
    "proto": "{\"id\": \"34b7d6da-c9d7-4c8a-8f73-225c509db513\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "A base class for all guide renderer types. ``GuideRenderer`` is\n    not generally useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "GuideRenderer"
  },
  "CategoricalScale": {
    "proto": "{\"id\": \"0d021d7e-1ed5-41b4-bef9-bcd85fb6024c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "bases": [
      "bokeh.models.scales.LinearScale"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CategoricalScale"
  },
  "RadioGroup": {
    "proto": "{\"active\": null, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ac4a313b-891a-4e6e-b9fa-ff7ca5d6b042\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of radio boxes.",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "props": [
      {
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "type": "Bool",
        "name": "inline",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected.",
        "type": "Int",
        "name": "active",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "RadioGroup"
  },
  "Model": {
    "proto": "{\"id\": \"352849fb-0977-466e-8414-40a57ee9bb7c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for all objects stored in Bokeh  |Document| instances.",
    "bases": [
      "bokeh.core.has_props.HasProps",
      "bokeh.util.callback_manager.PropertyCallbackManager",
      "bokeh.util.callback_manager.EventCallbackManager"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Model"
  },
  "Ticker": {
    "proto": "{\"id\": \"dd019680-9818-4cef-a4db-b49ea4a252a3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Ticker"
  },
  "WheelPanTool": {
    "proto": "{\"dimension\": \"width\", \"id\": \"bd5fd843-6bee-40f3-8ba9-53209cf3fd1c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |wheel_pan_icon|\n\n    The wheel pan tool allows the user to pan the plot along the configured\n    dimension using the scroll wheel.\n\n    .. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "props": [
      {
        "desc": "Which dimension the wheel pan tool is constrained to act in. By\n    default the wheel pan tool will pan the plot along the x-axis.",
        "type": "Enum('width', 'height')",
        "name": "dimension",
        "default": "width"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "WheelPanTool"
  },
  "TimeEditor": {
    "proto": "{\"id\": \"254dedca-19b6-4b8b-b87a-fa9a7231f018\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Spinner-based time cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "TimeEditor"
  },
  "Text": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"id\": \"ee931877-f98d-457a-8e18-3c1bd0ba188b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"x\": null, \"x_offset\": {\"value\": 0}, \"y\": null, \"y_offset\": {\"value\": 0}}",
    "desc": "Render text.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Text.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The text color values for the text.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y_offset",
        "default": 0
      },
      {
        "desc": "The text font style values for the text.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "text_font_style",
        "default": "normal"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The y-coordinates to locate the text anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The text font size values for the text.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "text_font_size",
        "default": {
          "value": "12pt"
        }
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The text alpha values for the text.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x_offset",
        "default": 0
      },
      {
        "desc": "The text values to render.",
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "text",
        "default": "text"
      },
      {
        "desc": "The text font values for the text.",
        "type": "String",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text baseline values for the text.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The angles to rotate the text, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0
      },
      {
        "desc": "The x-coordinates to locate the text anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "The text align values for the text.",
        "type": "Enum('left', 'right', 'center')",
        "name": "text_align",
        "default": "left"
      }
    ],
    "name": "Text"
  },
  "Title": {
    "proto": "{\"align\": \"left\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"ab224a72-84e1-4695-b69b-3c9e85423ab3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"offset\": 0, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_alpha\": {\"value\": 1.0}, \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"10pt\"}, \"text_font_style\": \"bold\", \"visible\": true}",
    "desc": "Render a single title box as an annotation.",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "props": [
      {
        "desc": "A color to use to fill text with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\n    different directions based on the location of the title:\n\n        * above: shifts title right\n        * right: shifts title down\n        * below: shifts title right\n        * left: shifts title up",
        "type": "Float",
        "name": "offset",
        "default": 0
      },
      {
        "desc": "The line dash values for the text bounding box.",
        "type": "DashPattern",
        "name": "border_line_dash",
        "default": []
      },
      {
        "desc": "The fill color values for the text bounding box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": null
      },
      {
        "desc": "Location to align the title text.",
        "type": "Enum('left', 'right', 'center')",
        "name": "align",
        "default": "left"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line join values for the text bounding box.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line color values for the text bounding box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_line_color",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line dash offset values for the text bounding box.",
        "type": "Int",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "type": "Enum('canvas', 'css')",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "desc": "The line cap values for the text bounding box.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "desc": "A style to use for rendering text.\n\n    Acceptable values are:\n\n    - ``'normal'`` normal text\n    - ``'italic'`` *italic text*\n    - ``'bold'`` **bold text**",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "text_font_style",
        "default": "bold"
      },
      {
        "desc": "",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "Name of a font to use for rendering text, e.g., ``'times'``,\n    ``'helvetica'``.",
        "type": "String",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "desc": "An alpha value to use to fill text with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "desc": "The text value to render.",
        "type": "String",
        "name": "text",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The fill alpha values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line width values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The line alpha values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_alpha",
        "default": 1.0
      }
    ],
    "name": "Title"
  },
  "DatetimeAxis": {
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"097434de-7cae-4f7f-910f-95da92698070\", \"type\": \"DatetimeTickFormatter\"}, \"id\": \"f756f781-b79b-4eee-a48e-890e22ec79ba\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"9e1bb733-2619-423d-b6d1-cac7f98b8b8c\", \"type\": \"DatetimeTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An LinearAxis that picks nice numbers for tick locations on\n    a datetime scale. Configured with a ``DatetimeTickFormatter`` by\n    default.",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ],
    "props": [
      {
        "desc": "The line cap of the axis line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "type": "Int",
        "name": "major_label_standoff",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "type": "Dict(Either(Float, String), String)",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "desc": "The text font style of the axis label.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size of the axis label.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "desc": "The line width of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text baseline of the axis label.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line alpha of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "type": "Int",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text align of the axis label.",
        "type": "Enum('left', 'right', 'center')",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text color of the axis label.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": "{\"id\": \"44c71ebe-8ed2-4634-a8d9-e094d558c845\"}"
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the axis line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "desc": "The text alpha of the axis label.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": "{\"id\": \"9c9286a9-88bc-48b9-a3ab-6dafacc3320c\"}"
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "desc": "The line dash offset of the axis line.",
        "type": "Int",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color of the axis line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "type": "String",
        "name": "axis_label",
        "default": ""
      },
      {
        "desc": "The line dash of the axis line.",
        "type": "DashPattern",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font of the axis label.",
        "type": "String",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "DatetimeAxis"
  },
  "BasicTicker": {
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"aeb16e70-21b0-4054-9faa-229f4e12b46c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks on a linear scale.\n\n    .. note::\n        This class may be renamed to ``LinearTicker`` in the future.",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "type": "Float",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "type": "Float",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "type": "Seq(Float)",
        "name": "mantissas",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "type": "Float",
        "name": "base",
        "default": 10.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "BasicTicker"
  },
  "SquareCross": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"6811f446-f900-4aa1-ad0d-543e2c50e5d5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render square markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/SquareCross.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "SquareCross"
  },
  "TileRenderer": {
    "proto": "{\"alpha\": 1.0, \"id\": \"217d753c-f071-43b3-8e7d-e3697e8053cf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"subscribed_events\": [], \"tags\": [], \"tile_source\": {\"id\": \"8786422d-6642-4fc3-96ce-9cd7edfe1098\", \"type\": \"WMTSTileSource\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "props": [
      {
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "type": "Bool",
        "name": "render_parents",
        "default": true
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "type": "Instance(TileSource)",
        "name": "tile_source",
        "default": "{\"id\": \"76d64bde-265e-442e-8ce6-071d5eb30e76\"}"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "underlay"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "tile opacity 0.0 - 1.0",
        "type": "Float",
        "name": "alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "TileRenderer"
  },
  "Axis": {
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": null, \"id\": \"c0d39ebc-3705-4c34-a9ff-97804ecd32b1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "A base class that defines common properties for all axis types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "props": [
      {
        "desc": "The line cap of the axis line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "type": "Int",
        "name": "major_label_standoff",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "type": "Dict(Either(Float, String), String)",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "desc": "The text font style of the axis label.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size of the axis label.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "desc": "The line width of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text baseline of the axis label.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line alpha of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "type": "Int",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text align of the axis label.",
        "type": "Enum('left', 'right', 'center')",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text color of the axis label.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": null
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the axis line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "desc": "The text alpha of the axis label.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": null
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "desc": "The line dash offset of the axis line.",
        "type": "Int",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color of the axis line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "type": "String",
        "name": "axis_label",
        "default": ""
      },
      {
        "desc": "The line dash of the axis line.",
        "type": "DashPattern",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font of the axis label.",
        "type": "String",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "Axis"
  },
  "Inspection": {
    "proto": "{\"id\": \"095a221f-03e1-4875-93f3-3ae78bccbc5a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}",
    "desc": "A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "type": "Bool",
        "name": "toggleable",
        "default": true
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Inspection"
  },
  "Quad": {
    "proto": "{\"bottom\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"0f69ace6-2a9f-413d-9eee-44277fc53d60\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null}",
    "desc": "Render axis-aligned quads.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Quad.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The y-coordinates of the bottom edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "bottom",
        "default": null
      },
      {
        "desc": "The x-coordinates of the left edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "left",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The y-coordinates of the top edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "top",
        "default": null
      },
      {
        "desc": "The line width values for the quads.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the quads.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the quads.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the quads.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the quads.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the quads.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the quads.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the quads.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the right edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "right",
        "default": null
      },
      {
        "desc": "The line cap values for the quads.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "Quad"
  },
  "Row": {
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d6818fbd-41de-4764-92ab-4f6ce3a1fe82\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Lay out child components in a single horizontal row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "type": "List(Instance(LayoutDOM))",
        "name": "children",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Row"
  },
  "PolySelectTool": {
    "proto": "{\"id\": \"c0527990-fdf9-40a3-baab-6d111ee6dd9b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"e2457054-9006-45d2-87a6-e16420cb3391\", \"type\": \"PolyAnnotation\"}, \"plot\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |poly_select_icon|\n\n    The polygon selection tool allows users to make selections on a\n    Plot by indicating a polygonal region with mouse clicks. single\n    clicks (or taps) add successive points to the definition of the\n    polygon, and a double click (or tap) indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Tap"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "type": "Instance(PolyAnnotation)",
        "name": "overlay",
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"06120c19-e286-40f0-9aab-63d15400a495\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "PolySelectTool"
  },
  "ColumnarDataSource": {
    "proto": "{\"callback\": null, \"column_names\": [], \"id\": \"91890634-5fa5-48ed-ac6e-9ac56d0404c4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for data source types, which can be mapped onto\n    a columnar format.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.sources.DataSource"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "type": "Dict(String, Dict(String, Any))",
        "name": "selected",
        "default": {
          "2d": {
            "indices": {}
          },
          "1d": {
            "indices": []
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "type": "List(String)",
        "name": "column_names",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "ColumnarDataSource"
  },
  "CrosshairTool": {
    "proto": "{\"dimensions\": \"both\", \"id\": \"5d49d60f-f59a-453c-aee3-826f1a6a22db\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_width\": 1, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}",
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The crosshair tool is a passive inspector tool. It is generally on\n    at all times, but can be configured in the inspector's menu\n    associated with the *toolbar icon* shown above.\n\n    The crosshair tool draws a crosshair annotation over the plot,\n    centered on the current mouse position. The crosshair tool may be\n    configured to draw across only one dimension by setting the\n    ``dimension`` property to only ``width`` or ``height``.\n\n    .. |crosshair_icon| image:: /_images/icons/Crosshair.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Inspection"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "type": "Bool",
        "name": "toggleable",
        "default": true
      },
      {
        "desc": "Stroke width in units of pixels.",
        "type": "Float",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "A color to use to stroke paths with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp",
        "type": "Color",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An alpha value to use to stroke paths with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).",
        "type": "Float",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "Which dimensions the crosshair tool is to track. By default, both a\n    vertical and horizontal line will be drawn. If only \"width\" is supplied,\n    only a horizontal line will be drawn. If only \"height\" is supplied,\n    only a vertical line will be drawn.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "CrosshairTool"
  },
  "DiamondCross": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"23dcbeea-81fb-4280-aaca-4441b8222de6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render diamond markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/DiamondCross.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "DiamondCross"
  },
  "X": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"aea1bb6e-f8af-42f7-854f-58be230bd7ef\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a 'X' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/X.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "X"
  },
  "LogTickFormatter": {
    "proto": "{\"id\": \"d4b6a058-1499-4bc0-bd98-431866d5d36e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null}",
    "desc": "Display tick values from continuous ranges as powers\n    of some base.\n\n    Most often useful in conjunction with a ``LogTicker``.",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "The corresponding ``LogTicker``, used to determine the correct\n    base to use. If unset, the formatter will use base 10 as a default.",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "LogTickFormatter"
  },
  "OpenURL": {
    "proto": "{\"id\": \"b70ada8d-7d7e-4181-a9db-a2f205c96015\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"http://\"}",
    "desc": "Open a URL in a new tab or window (browser dependent).",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The URL to direct the web browser to. This can be a template string,\n    which will be formatted with data from the data source.",
        "type": "String",
        "name": "url",
        "default": "http://"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "OpenURL"
  },
  "Segment": {
    "proto": "{\"id\": \"eafc1fce-af1d-4217-847c-5d58f0b8ae5b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "desc": "Render segments.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Segment.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The y-coordinates of the ending points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y1",
        "default": null
      },
      {
        "desc": "The line cap values for the segments.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the segments.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the segments.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the segments.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the segments.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the segments.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the segments.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the ending points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x1",
        "default": null
      },
      {
        "desc": "The y-coordinates of the starting points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y0",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The x-coordinates of the starting points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x0",
        "default": null
      }
    ],
    "name": "Segment"
  },
  "Square": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"4162a639-ded6-4d92-aba4-14f9e1ae54cc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a square marker, optionally rotated. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Square.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Square"
  },
  "Ray": {
    "proto": "{\"angle\": null, \"id\": \"31a99ee6-5518-4af7-93e7-b0c5b47412ef\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"length\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render rays.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Ray.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the rays.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "length_units",
        "default": "data"
      },
      {
        "desc": "The length to extend the ray. Note that this ``length`` defaults\n    to screen units.",
        "type": "DistanceSpec(units_default='data')",
        "name": "length",
        "default": null
      },
      {
        "desc": "The line dash values for the rays.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the rays.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the rays.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates to start the rays.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the rays.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The line alpha values for the rays.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The angles in radians to extend the rays, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": null
      },
      {
        "desc": "The line cap values for the rays.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates to start the rays.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Ray"
  },
  "Oval": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"19e06c38-1047-4d85-8767-aa6cffdac55b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "desc": "Render ovals.\n\n    This glyph renders ovals using B\u00e9zier curves, which are similar,\n    but not identical to ellipses. In particular, widths equal to heights\n    will not render circles. Use the ``Ellipse`` glyph for that.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Oval.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill alpha values for the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line color values for the ovals.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The overall widths of each oval.",
        "type": "DistanceSpec(units_default='data')",
        "name": "width",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The fill color values for the ovals.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angle the ovals are rotated from horizontal. [rad]",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line width values for the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the ovals.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the ovals.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the centers of the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The overall height of each oval.",
        "type": "DistanceSpec(units_default='data')",
        "name": "height",
        "default": null
      },
      {
        "desc": "The line join values for the ovals.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "width_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "height_units",
        "default": "data"
      },
      {
        "desc": "The line cap values for the ovals.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the centers of the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Oval"
  },
  "AutocompleteInput": {
    "proto": "{\"callback\": null, \"completions\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f16c2c46-70f2-4d32-9a61-0e883b64b3bd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "desc": "Single-line input widget with auto-completion.",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ],
    "props": [
      {
        "desc": "Placeholder for empty input field",
        "type": "String",
        "name": "placeholder",
        "default": ""
      },
      {
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A list of completion strings. This will be used to guide the\n    user upon typing the beginning of a desired value.",
        "type": "List(String)",
        "name": "completions",
        "default": []
      },
      {
        "desc": "Initial or entered text value.",
        "type": "String",
        "name": "value",
        "default": ""
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "AutocompleteInput"
  },
  "Slider": {
    "proto": "{\"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": null, \"disabled\": false, \"end\": 1, \"height\": null, \"id\": \"ec558197-a63a-4148-ad5f-38b7942891e1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"sizing_mode\": \"fixed\", \"start\": 0, \"step\": 0.1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": 0.5, \"width\": null}",
    "desc": "Slider-based number selection widget.",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time.",
        "type": "Enum('continuous', 'throttle', 'mouseup')",
        "name": "callback_policy",
        "default": "throttle"
      },
      {
        "desc": "A callback to run in the browser whenever the current Slider value changes.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "The step between consecutive values.",
        "type": "Float",
        "name": "step",
        "default": 0.1
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "type": "Enum('horizontal', 'vertical')",
        "name": "orientation",
        "default": "horizontal"
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "The maximum allowable value.",
        "type": "Float",
        "name": "end",
        "default": 1
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "The minimum allowable value.",
        "type": "Float",
        "name": "start",
        "default": 0
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Number of microseconds to pause between callback calls as the slider is moved.",
        "type": "Float",
        "name": "callback_throttle",
        "default": 200
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Initial or selected value.",
        "type": "Float",
        "name": "value",
        "default": 0.5
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Slider"
  },
  "CategoricalAxis": {
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"d0a732ad-460b-4af5-9122-17179bdb61c5\", \"type\": \"CategoricalTickFormatter\"}, \"id\": \"f8be6cbd-24e4-4a40-90e7-1a66b0a10013\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"39ed59d4-7999-41e7-be80-b73c474e435e\", \"type\": \"CategoricalTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An axis that picks evenly spaced tick locations for a\n    collection of categories/factors.",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "props": [
      {
        "desc": "The line cap of the axis line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "type": "Int",
        "name": "major_label_standoff",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "type": "Dict(Either(Float, String), String)",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "desc": "The text font style of the axis label.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size of the axis label.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "desc": "The line width of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text baseline of the axis label.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line alpha of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "type": "Int",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text align of the axis label.",
        "type": "Enum('left', 'right', 'center')",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text color of the axis label.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": "{\"id\": \"be033741-9a85-43c4-bd95-54384716b8c1\"}"
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the axis line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "desc": "The text alpha of the axis label.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": "{\"id\": \"22fe412e-e883-4be3-a4fb-62270c39b8f8\"}"
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "desc": "The line dash offset of the axis line.",
        "type": "Int",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color of the axis line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "type": "String",
        "name": "axis_label",
        "default": ""
      },
      {
        "desc": "The line dash of the axis line.",
        "type": "DashPattern",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font of the axis label.",
        "type": "String",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "CategoricalAxis"
  },
  "LinearColorMapper": {
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"14b6f9ed-0113-4be3-81ec-89bcbb267710\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Map numbers in a range [*low*, *high*] linearly into a\n    sequence of colors (a palette).\n\n    For example, if the range is [0, 99] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as\n    follows::\n\n             x < 0  : 'red'     # values < low are clamped\n        0 >= x < 33 : 'red'\n       33 >= x < 66 : 'green'\n       66 >= x < 99 : 'blue'\n       99 >= x      : 'blue'    # values > high are clamped",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "type": "Float",
        "name": "high",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "type": "Seq(Color)",
        "name": "palette",
        "default": null
      },
      {
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "type": "Float",
        "name": "low",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "type": "Color",
        "name": "high_color",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "type": "Color",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "type": "Color",
        "name": "low_color",
        "default": null
      }
    ],
    "name": "LinearColorMapper"
  },
  "MercatorTickFormatter": {
    "proto": "{\"dimension\": null, \"id\": \"61cb1322-4b3c-452c-ae90-40a70b6bfcd9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}",
    "desc": "TickFormatter for values in WebMercator units.\n\n    Some map plot types internally use WebMercator to describe coordinates,\n    plot bounds, etc. These units are not very human-friendly. This tick\n    formatter will convert WebMercator units into Latitude and Longitude\n    for display on axes.",
    "bases": [
      "bokeh.models.formatters.BasicTickFormatter"
    ],
    "props": [
      {
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.",
        "type": "Bool",
        "name": "use_scientific",
        "default": true
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low",
        "type": "Int",
        "name": "power_limit_low",
        "default": -3
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How many digits of precision to display in tick labels.",
        "type": "Either(Auto, Int)",
        "name": "precision",
        "default": "auto"
      },
      {
        "desc": "Specify whether to format ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick labels from Web Mercator requires considering coordinates from both\n    dimensions together. Use this property to specify which result should be\n    used for display.\n\n    Typically, if the formatter is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the formatter is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTickFormatter will result in\n    a validation error and a JavaScript console error.",
        "type": "Enum('lat', 'lon')",
        "name": "dimension",
        "default": null
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high",
        "type": "Int",
        "name": "power_limit_high",
        "default": 5
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "MercatorTickFormatter"
  },
  "Scale": {
    "proto": "{\"id\": \"fe585421-78bd-4eec-a8ec-ff28a0fe4f11\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for ``Scale`` models that represent an invertible\n    computation to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n        invert: (xprime) ->\n            # compute the inverse transform of a single value\n\n        v_invert: (xprimes) ->\n            # compute the inverse transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Scale"
  },
  "Patches": {
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"9b39f436-e17c-4002-a2e4-7001de4db4b5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}",
    "desc": "Render several patches.\n\n    The data for the ``Patches`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Patches.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the patches.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The x-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the x-coordinates for each polygon should be separated by NaN\n        values in the sublists.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "xs",
        "default": null
      },
      {
        "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the y-coordinates for each polygon should be separated by NaN\n        values in the sublists.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "ys",
        "default": null
      },
      {
        "desc": "The fill alpha values for the patches.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the patches.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the patches.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the patches.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the patches.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the patches.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the patches.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the patches.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "Patches"
  },
  "Triangle": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"c2bf1140-7f13-4475-af09-33ec8931eaa1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Triangle.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Triangle"
  },
  "StepInterpolator": {
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"70c44ee2-c7e9-486f-956b-e617c57068d0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mode\": \"after\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Compute a step-wise interpolation between the points provided through\n    the ``x``, ``y``, and ``data`` parameters.",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n    * ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n    * ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n    * ``center``: Assume the y-value associated with the nearest x-value to the point to transform.",
        "type": "Enum('before', 'after', 'center')",
        "name": "mode",
        "default": "after"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "type": "Either(String, Seq(Float))",
        "name": "y",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "type": "Bool",
        "name": "clip",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "type": "Instance(ColumnarDataSource)",
        "name": "data",
        "default": null
      },
      {
        "desc": "Independant coordiante denoting the location of a point.",
        "type": "Either(String, Seq(Float))",
        "name": "x",
        "default": null
      }
    ],
    "name": "StepInterpolator"
  },
  "DateRangeSlider": {
    "proto": "{\"arrows\": true, \"bounds\": null, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"enabled\": true, \"height\": null, \"id\": \"64ee7cf3-4a57-42d2-96da-a6767149045d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"range\": null, \"sizing_mode\": \"fixed\", \"step\": {}, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": null, \"value_labels\": \"show\", \"wheel_mode\": null, \"width\": null}",
    "desc": "Slider-based date range selection widget.",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "Enable or disable this widget.",
        "type": "Bool",
        "name": "enabled",
        "default": true
      },
      {
        "desc": "A callback to run in the browser whenever either slider's value changes.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "The step between consecutive dates.",
        "type": "RelativeDelta",
        "name": "step",
        "default": {}
      },
      {
        "desc": "Whether to show clickable arrows on both ends of the slider.",
        "type": "Bool",
        "name": "arrows",
        "default": true
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The earliest and latest allowable dates.",
        "type": "Tuple(Date, Date)",
        "name": "bounds",
        "default": null
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Whether mouse zoom should scroll or zoom selected range (or\n    do nothing).",
        "type": "Enum('scroll', 'zoom')",
        "name": "wheel_mode",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "[TDB]",
        "type": "Tuple(RelativeDelta, RelativeDelta)",
        "name": "range",
        "default": null
      },
      {
        "desc": "The initial or selected date range.",
        "type": "Tuple(Date, Date)",
        "name": "value",
        "default": null
      },
      {
        "desc": "Show or hide value labels on both sides of the slider.",
        "type": "Enum('show', 'hide', 'change')",
        "name": "value_labels",
        "default": "show"
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "DateRangeSlider"
  },
  "Diamond": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"41a9054e-12a1-4a5f-8f75-47976244ecbe\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render diamond markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Diamond.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Diamond"
  },
  "NumeralTickFormatter": {
    "proto": "{\"format\": \"0,0\", \"id\": \"d2b494e9-a6fe-4f1a-8cf6-d1dda8499d8a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": []}",
    "desc": "Tick formatter based on a human-readable format string.",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "name": "language",
        "default": "en"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html",
        "type": "String",
        "name": "format",
        "default": "0,0"
      },
      {
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "name": "rounding",
        "default": "round"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "NumeralTickFormatter"
  },
  "Whisker": {
    "proto": "{\"base\": null, \"dimension\": \"height\", \"id\": \"4192ee8e-23d9-4bea-835f-96536901a53b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"lower\": null, \"lower_head\": {\"id\": \"8df9176c-9e64-4a93-a360-ad6f32597bcd\", \"type\": \"TeeHead\"}, \"name\": null, \"plot\": null, \"source\": {\"id\": \"b24afa83-b920-41d9-9f40-3b6e6bec2d5b\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"upper_head\": {\"id\": \"5cb421ef-68e7-4c9d-b0f0-ce222a275b2b\", \"type\": \"TeeHead\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a whisker along a dimension.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "lower_units",
        "default": "data"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Instance of ArrowHead.",
        "type": "Instance(ArrowHead)",
        "name": "upper_head",
        "default": "{\"id\": \"c166507e-7fc6-48b5-ae7a-3fec9f366d4a\", \"level\": \"underlay\", \"size\": 10}"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "upper_units",
        "default": "data"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "underlay"
      },
      {
        "desc": "The line color values for the whisker body.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Local data source to use when rendering annotations on the plot.",
        "type": "Instance(DataSource)",
        "name": "source",
        "default": "{\"data\": {}, \"id\": \"4fd2a330-29d6-4b58-8c04-d2c008a725ed\"}"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the whisker body.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Instance of ArrowHead.",
        "type": "Instance(ArrowHead)",
        "name": "lower_head",
        "default": "{\"id\": \"1c87ac7e-94c4-4066-b0be-57adf072566c\", \"level\": \"underlay\", \"size\": 10}"
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line width values for the whisker body.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the whisker body.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the whisker body.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The direction of the band.",
        "type": "Enum('width', 'height')",
        "name": "dimension",
        "default": "height"
      },
      {
        "desc": "The line join values for the whisker body.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The coordinations of the upper end of the whiskers.",
        "type": "DistanceSpec(units_default='data')",
        "name": "upper",
        "default": null
      },
      {
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "type": "DistanceSpec(units_default='data')",
        "name": "base",
        "default": null
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "base_units",
        "default": "data"
      },
      {
        "desc": "The line cap values for the whisker body.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The coordinates of the lower end of the whiskers.",
        "type": "DistanceSpec(units_default='data')",
        "name": "lower",
        "default": null
      }
    ],
    "name": "Whisker"
  },
  "Div": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"2918fa07-7fff-46ce-a8c4-47953f522ad6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"render_as_text\": false, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "A block (div) of text.\n\n    This Bokeh model corresponds to an HTML ``<div>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_div.py\n        :source-position: below",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The contents of the widget.",
        "type": "String",
        "name": "text",
        "default": ""
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Whether the contents should be rendered as raw text or as interpreted HTML.\n    The default value is ``False``, meaning contents are rendered as HTML.",
        "type": "Bool",
        "name": "render_as_text",
        "default": false
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Div"
  },
  "MercatorTicker": {
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"dimension\": null, \"id\": \"63938714-a237-4ffa-8c0d-c2a658aa707e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate nice lat/lon ticks form underlying WebMercator coordinates.",
    "bases": [
      "bokeh.models.tickers.BasicTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "type": "Float",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Specify whether to generate ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick locations from Web Mercator requires considering coordinates from\n    both dimensions together. Use this property to specify which result should\n    be returned.\n\n    Typically, if the ticker is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the ticker is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTicker will result in a\n    validation error and a JavaScript console error.",
        "type": "Enum('lat', 'lon')",
        "name": "dimension",
        "default": null
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "type": "Float",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "type": "Seq(Float)",
        "name": "mantissas",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "type": "Float",
        "name": "base",
        "default": 10.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "MercatorTicker"
  },
  "SquareX": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"cf9affcc-4dbc-4ead-b5e5-df956fc50b2f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render square markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/SquareX.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "SquareX"
  },
  "VeeHead": {
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"3c297e48-1018-4160-80de-c23b3b364a88\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a vee-style arrow head.",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "props": [
      {
        "desc": "The size, in pixels, of the arrow head.",
        "type": "Float",
        "name": "size",
        "default": 25
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the arrow head interior.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the arrow head interior.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "black"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "VeeHead"
  },
  "LinearInterpolator": {
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"6e87ec75-9cac-4ec4-8e8d-d582a1bbcf76\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Compute a linear interpolation between the control points provided through\n    the ``x``, ``y``, and ``data`` parameters.",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "type": "Either(String, Seq(Float))",
        "name": "y",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "type": "Bool",
        "name": "clip",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "type": "Instance(ColumnarDataSource)",
        "name": "data",
        "default": null
      },
      {
        "desc": "Independant coordiante denoting the location of a point.",
        "type": "Either(String, Seq(Float))",
        "name": "x",
        "default": null
      }
    ],
    "name": "LinearInterpolator"
  },
  "Annotation": {
    "proto": "{\"id\": \"3789413e-eaa3-46b7-80c7-80a842dbd7b1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Base class for all annotation models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "Annotation"
  },
  "Tooltip": {
    "proto": "{\"attachment\": \"horizontal\", \"id\": \"7c9ceff5-e3df-48c9-83f9-71e5225d7fb5\", \"inner_only\": true, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a tooltip.\n\n    .. note::\n        This model is currently managed by BokehJS and is not useful\n        directly from python.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Whether the tooltip should display to the left or right off the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension.",
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "name": "attachment",
        "default": "horizontal"
      },
      {
        "desc": "Whether tooltip's arrow should be showed.",
        "type": "Bool",
        "name": "show_arrow",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether to display outside a central plot frame area.",
        "type": "Bool",
        "name": "inner_only",
        "default": true
      }
    ],
    "name": "Tooltip"
  },
  "LegendItem": {
    "proto": "{\"id\": \"a9237279-2d5e-4073-ba5f-71efd883ef8c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": null, \"name\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A label for this legend. Can be a string, or a column of a\n    ColumnDataSource. If ``label`` is a field, then it must\n    be in the renderers' data_source.",
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "label",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A list of the glyph renderers to draw in the legend. If ``label`` is a field,\n    then all data_sources of renderers must be the same.",
        "type": "List(Instance(GlyphRenderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "LegendItem"
  },
  "AbstractIcon": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"78d23c27-b5aa-4c0c-947a-cb3fa6974fea\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "An abstract base class for icon widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "AbstractIcon"
  },
  "LogScale": {
    "proto": "{\"id\": \"37c5678c-12be-4615-8ea4-ecf37947dd26\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "LogScale"
  },
  "Tabs": {
    "proto": "{\"active\": 0, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"0e1ddf48-6183-4870-9a35-68baa380b8ec\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tabs\": [], \"tags\": [], \"width\": null}",
    "desc": "A panel widget with navigation tabs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_tab_panes.py\n        :source-position: below",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "The list of child panel widgets.",
        "type": "List(Instance(Panel))",
        "name": "tabs",
        "default": []
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The index of the active tab.",
        "type": "Int",
        "name": "active",
        "default": 0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Tabs"
  },
  "BoxSelectTool": {
    "proto": "{\"callback\": null, \"dimensions\": \"both\", \"id\": \"bcd30c6f-c483-48aa-a75a-7fbd56124108\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"a50c4eca-6e83-4c29-9eaa-4d110f1b1514\", \"type\": \"BoxAnnotation\"}, \"plot\": null, \"renderers\": [], \"select_every_mousemove\": false, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |box_select_icon|\n\n    The box selection tool allows users to make selections on a\n    Plot by indicating a rectangular region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n\n    .. |box_select_icon| image:: /_images/icons/BoxSelect.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser on completion of drawing a selection box.\n    The cb_data parameter that is available to the Callback code will contain\n    one BoxSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the selection box",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: False",
        "type": "Bool",
        "name": "select_every_mousemove",
        "default": false
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Which dimensions the box selection is to be free in. By default,\n    users may freely draw selections boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "type": "Instance(BoxAnnotation)",
        "name": "overlay",
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"a27eaf6a-c039-4f29-bdef-9b5bf92a5ccb\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}"
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "BoxSelectTool"
  },
  "Legend": {
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"border_line_alpha\": {\"value\": 0.5}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": \"#e5e5e5\"}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"click_policy\": \"none\", \"glyph_height\": 20, \"glyph_width\": 20, \"id\": \"bc2a71e3-6850-419f-9c76-7b792f723cd1\", \"inactive_fill_alpha\": {\"value\": 0.9}, \"inactive_fill_color\": {\"value\": \"white\"}, \"items\": [], \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_height\": 20, \"label_standoff\": 5, \"label_text_align\": \"left\", \"label_text_alpha\": {\"value\": 1.0}, \"label_text_baseline\": \"middle\", \"label_text_color\": {\"value\": \"#444444\"}, \"label_text_font\": \"helvetica\", \"label_text_font_size\": {\"value\": \"10pt\"}, \"label_text_font_style\": \"normal\", \"label_width\": 20, \"level\": \"annotation\", \"location\": \"top_right\", \"margin\": 10, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"spacing\": 3, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render informational legends for a plot.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "The line dash for the legend border outline.",
        "type": "DashPattern",
        "name": "border_line_dash",
        "default": []
      },
      {
        "desc": "The height (in pixels) that the rendered legend glyph should occupy.",
        "type": "Int",
        "name": "glyph_height",
        "default": 20
      },
      {
        "desc": "The width (in pixels) that the rendered legend glyph should occupy.",
        "type": "Int",
        "name": "glyph_width",
        "default": 20
      },
      {
        "desc": "The text font style for the legend labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The text align for the legend labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "label_text_align",
        "default": "left"
      },
      {
        "desc": "Amount of margin around the legend.",
        "type": "Int",
        "name": "margin",
        "default": 10
      },
      {
        "desc": "The fill color for the legend background style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "Defines what happens when a lengend's item is clicked.",
        "type": "Enum('none', 'hide', 'mute')",
        "name": "click_policy",
        "default": "none"
      },
      {
        "desc": "The line join for the legend border outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "Amount of spacing (in pixles) between legend entries.",
        "type": "Int",
        "name": "spacing",
        "default": 3
      },
      {
        "desc": "The text color for the legend labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size for the legend labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The text alpha for the legend labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "The line color for the legend border outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_line_color",
        "default": "#e5e5e5"
      },
      {
        "desc": "A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\n    rendered in the legend.\n\n    This can be specified explicitly, for instance:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n            LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n            LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n        ])\n\n    But as a convenience, can also be given more compactly as a list of tuples:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            (\"sin(x)\"   , [r0, r1]),\n            (\"2*sin(x)\" , [r2]),\n            (\"3*sin(x)\" , [r3, r4])\n        ])\n\n    where each tuple is of the form: *(label, renderers)*.",
        "type": "List(Instance(LegendItem))",
        "name": "items",
        "default": []
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The fill alpha for the legend background style when inactive.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "inactive_fill_alpha",
        "default": 0.9
      },
      {
        "desc": "The text font for the legend labels.",
        "type": "String",
        "name": "label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "Whether the legend entries should be placed vertically or horizontally\n    when they are drawn.",
        "type": "Enum('horizontal', 'vertical')",
        "name": "orientation",
        "default": "vertical"
      },
      {
        "desc": "Amount of padding around the contents of the legend.",
        "type": "Int",
        "name": "padding",
        "default": 10
      },
      {
        "desc": "The line dash offset for the legend border outline.",
        "type": "Int",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The text baseline for the legend labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "label_text_baseline",
        "default": "middle"
      },
      {
        "desc": "The minimum height (in pixels) of the area that legend labels should occupy.",
        "type": "Int",
        "name": "label_height",
        "default": 20
      },
      {
        "desc": "The line cap for the legend border outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance (in pixels) to separate the label from its associated glyph.",
        "type": "Int",
        "name": "label_standoff",
        "default": 5
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The fill alpha for the legend background style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 0.95
      },
      {
        "desc": "The line width for the legend border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_width",
        "default": 1
      },
      {
        "desc": "The minimum width (in pixels) of the area that legend labels should occupy.",
        "type": "Int",
        "name": "label_width",
        "default": 20
      },
      {
        "desc": "The location where the legend should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))",
        "name": "location",
        "default": "top_right"
      },
      {
        "desc": "The fill color for the legend background style when inactive.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "inactive_fill_color",
        "default": "white"
      },
      {
        "desc": "The line alpha for the legend border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_alpha",
        "default": 0.5
      }
    ],
    "name": "Legend"
  },
  "InputWidget": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"dae1c810-26a6-4ce9-abc6-1f86b730877a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "desc": "Abstract base class for input widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "InputWidget"
  },
  "CategoricalColorMapper": {
    "proto": "{\"factors\": null, \"id\": \"fa89d5fb-3f53-4f32-a124-3fdf7d87dbd5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Map categories to colors. Values that are passed to\n    this mapper that aren't in factors will be assigned the nan_color.",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "type": "Seq(Color)",
        "name": "palette",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A sequence of factors / categories that map to the color palette.",
        "type": "Either(Seq(String), Seq(Int), Seq(Float), Seq(Datetime), Seq(Date))",
        "name": "factors",
        "default": null
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "type": "Color",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "CategoricalColorMapper"
  },
  "Widget": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"05fb2d21-92ce-44ad-92bb-e5a54cc2dfc1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A base class for all interactive widget types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Widget"
  },
  "Quadratic": {
    "proto": "{\"cx\": null, \"cy\": null, \"id\": \"98b6168b-3387-4354-b760-bb233ef86f68\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "desc": "Render parabolas.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Quadratic.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The y-coordinates of the control points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cy",
        "default": null
      },
      {
        "desc": "The x-coordinates of the control points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cx",
        "default": null
      },
      {
        "desc": "The y-coordinates of the ending points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y1",
        "default": null
      },
      {
        "desc": "The line cap values for the parabolas.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the parabolas.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the parabolas.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the parabolas.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the parabolas.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join values for the parabolas.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the parabolas.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the ending points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x1",
        "default": null
      },
      {
        "desc": "The y-coordinates of the starting points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y0",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The x-coordinates of the starting points.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x0",
        "default": null
      }
    ],
    "name": "Quadratic"
  },
  "TextEditor": {
    "proto": "{\"id\": \"11b8e004-28db-4286-bc1d-365f46528c71\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Multi-line string cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "TextEditor"
  },
  "Line": {
    "proto": "{\"id\": \"79edd3cf-bdcc-4c8e-a38c-f45e7ae94215\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a single line.\n\n    The ``Line`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Line.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the line.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the line.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates for the points of the line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The line color values for the line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates for the points of the line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Line"
  },
  "FactorRange": {
    "proto": "{\"bounds\": null, \"callback\": null, \"factors\": [], \"id\": \"9100c185-5ce7-4ef8-887d-a73c5925d29f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"offset\": 0, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A range in a categorical dimension.\n\n    In addition to supplying ``factors`` keyword argument to the\n    ``FactorRange`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\n    .. note::\n        ``FactorRange`` may be renamed to ``CategoricalRange`` in\n        the future.",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "props": [
      {
        "desc": "An offset to the (synthetic) range (default: 0)\n\n    .. note::\n        The primary usage of this is to support compatibility and integration\n        with other plotting systems, and will not generally of interest to\n        most users.",
        "type": "Float",
        "name": "offset",
        "default": 0
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum number of visible categories. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well.",
        "type": "Int",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    Unlike Range1d and DataRange1d, factors do not have an order and so a\n    min and max cannot be proved in the same way. bounds accepts a list of\n    factors, that constrain the displayed factors.\n\n    By default, bounds are ``None``, allows unlimited panning or zooming.\n\n    If ``bounds='auto'``, bounds will be the same as factors and the plot\n    will not be able to pan or zoom beyond the first and last factors.\n\n    If you provide a list, then only the factors that are in that list will\n    be displayed on the plot and the plot will not pan or zoom outside the\n    first and last items in the shortened factors list. Note the order of\n    factors is the defining order for your plot.\n\n    Values of bounds that are not in factors are acceptable and will simply\n    have no impact on the plot.\n\n    Examples:\n\n    Auto behavior:\n\n    .. code-block:: python\n\n        x_range = FactorRange(\n            factors=[\"apples\", \"dogs\", \"peaches\", \"bananas\", \"pigs\"],\n            bounds='auto'\n        )\n\n        The plot will display all the factors and you will not be able to\n        pan left of apples or right of pigs.\n\n    Constraining behavior:\n\n    .. code-block:: python\n\n        x_range = FactorRange(\n            factors=[\"apples\", \"dogs\", \"peaches\", \"bananas\", \"pigs\"],\n            bounds=[\"apples\", \"bananas\", \"peaches\"]\n        )\n\n        Only the factors ``[\"apples\", \"peaches\", \"bananas\"]`` (in that\n        order) will appear in the plot, and the plot will not pan left of\n        ``\"apples\"`` or right of ``\"bananas\"``.",
        "type": "Either(Auto, List(String), List(Int))",
        "name": "bounds",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum number of visible categories. If set to ``None`` (default),\n    the minimum interval is not bound.",
        "type": "Int",
        "name": "min_interval",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A list of string or integer factors (categories) to comprise\n    this categorical range.",
        "type": "Either(List(String), List(Int))",
        "name": "factors",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "FactorRange"
  },
  "Image": {
    "proto": "{\"color_mapper\": {\"id\": \"979502a1-8553-410c-8896-6184bdf41387\", \"type\": \"LinearColorMapper\"}, \"dh\": null, \"dilate\": false, \"dw\": null, \"id\": \"a22150a0-0589-48e1-baa1-7a6967c550d3\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render images given as scalar data together with a color mapper.\n\n    In addition to the defined model properties, ``Image`` also can accept\n    a keyword argument ``palette`` in place of an explicit ``color_mapper``.\n    The value should be a list of colors, or the name of one of the built-in\n    palettes in ``bokeh.palettes``. This palette will be used to automatically\n    construct a ``ColorMapper`` model for the ``color_mapper`` property.\n\n    If both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\n    exception will be raised. If neither is passed, then the ``Greys9``\n    palette will be used as a default.",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.",
        "type": "DistanceSpec(units_default='data')",
        "name": "dh",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "type": "Bool",
        "name": "dilate",
        "default": false
      },
      {
        "desc": "The x-coordinates to locate the image anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The y-coordinates to locate the image anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "dh_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "dw_units",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The arrays of scalar data for the images to be colormapped.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "image",
        "default": null
      },
      {
        "desc": "A ``ColorMapper`` to use to map the scalar data from ``image``\n    into RGBA values for display.\n\n    .. note::\n        The color mapping step happens on the client.",
        "type": "Instance(ColorMapper)",
        "name": "color_mapper",
        "default": null
      },
      {
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.",
        "type": "DistanceSpec(units_default='data')",
        "name": "dw",
        "default": null
      }
    ],
    "name": "Image"
  },
  "OpenHead": {
    "proto": "{\"id\": \"342b83e4-d350-4df0-9136-a4fda5732a50\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render an open-body arrow head.",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "props": [
      {
        "desc": "The size, in pixels, of the arrow head.",
        "type": "Float",
        "name": "size",
        "default": 25
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "OpenHead"
  },
  "CategoricalTickFormatter": {
    "proto": "{\"id\": \"a0ebbea2-e674-4010-9f97-012de24d7287\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Display tick values from categorical ranges as string\n    values.",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CategoricalTickFormatter"
  },
  "WheelZoomTool": {
    "proto": "{\"dimensions\": \"both\", \"id\": \"6fe9770f-73af-4028-a91e-5528f0848c99\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |wheel_zoom_icon|\n\n    The wheel zoom tool will zoom the plot in and out, centered on the\n    current mouse location.\n\n    The wheel zoom tool also activates the border regions of a Plot for\n    \"single axis\" zooming. For instance, zooming in the vertical border or\n    axis will effect a zoom in the vertical direction only, with the\n    horizontal dimension kept fixed.\n\n    .. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Which dimensions the wheel zoom tool is constrained to act in. By\n    default the wheel zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "WheelZoomTool"
  },
  "DataTable": {
    "proto": "{\"columns\": [], \"css_classes\": null, \"disabled\": false, \"editable\": false, \"fit_columns\": true, \"height\": 400, \"id\": \"4796f1d3-fe73-4e7c-a86a-bfa2216256dd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"reorderable\": true, \"row_headers\": true, \"scroll_to_selection\": true, \"selectable\": true, \"sizing_mode\": \"fixed\", \"sortable\": true, \"source\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Two dimensional grid for visualisation and editing large amounts\n    of data.",
    "bases": [
      "bokeh.models.widgets.tables.TableWidget"
    ],
    "props": [
      {
        "desc": "Whether columns should be fit to the available width. This results in no\n    horizontal scrollbar showing up, but data can get unreadable if there is\n    no enough space available. If set to ``True``, columns' width is\n    understood as maximum width.",
        "type": "Bool",
        "name": "fit_columns",
        "default": true
      },
      {
        "desc": "Allows the reordering of a tables's columns. To reorder a column,\n    click and drag a table's header to the desired location in the table.\n    The columns on either side will remain in their previous order.",
        "type": "Bool",
        "name": "reorderable",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Enable or disable row headers, i.e. the index column.",
        "type": "Bool",
        "name": "row_headers",
        "default": true
      },
      {
        "desc": "Allows to sort table's contents. By default natural order is preserved.\n    To sort a column, click on it's header. Clicking one more time changes\n    sort direction. Use Ctrl + click to return to natural order. Use\n    Shift + click to sort multiple columns simultaneously.",
        "type": "Bool",
        "name": "sortable",
        "default": true
      },
      {
        "desc": "Whenever a selection is made on the data source, scroll the selected\n    rows into the table's viewport if none of the selected rows are already\n    in the viewport.",
        "type": "Bool",
        "name": "scroll_to_selection",
        "default": true
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "The list of child column widgets.",
        "type": "List(Instance(TableColumn))",
        "name": "columns",
        "default": []
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": 400
      },
      {
        "desc": "The source of data for the widget.",
        "type": "Instance(DataSource)",
        "name": "source",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\n    equivalent  to ``True``, but makes selection visible through a checkbox\n    for each row,  instead of highlighting rows. Multiple selection is\n    allowed and can be achieved by either clicking multiple checkboxes (if\n    enabled) or using Shift + click on rows.",
        "type": "Either(Bool, Enum('checkbox'))",
        "name": "selectable",
        "default": true
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "Allows to edit table's contents. Needs cell editors to be configured on\n    columns that are required to be editable.",
        "type": "Bool",
        "name": "editable",
        "default": false
      }
    ],
    "name": "DataTable"
  },
  "NormalHead": {
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"bef4bd36-d07d-4080-88e9-4190ad485cb4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a closed-body arrow head.",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "props": [
      {
        "desc": "The size, in pixels, of the arrow head.",
        "type": "Float",
        "name": "size",
        "default": 25
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the arrow head interior.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the arrow head interior.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "black"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "NormalHead"
  },
  "Grid": {
    "proto": "{\"band_fill_alpha\": {\"value\": 0}, \"band_fill_color\": {\"value\": null}, \"bounds\": \"auto\", \"dimension\": 0, \"grid_line_alpha\": {\"value\": 1.0}, \"grid_line_cap\": \"butt\", \"grid_line_color\": {\"value\": \"#e5e5e5\"}, \"grid_line_dash\": [], \"grid_line_dash_offset\": 0, \"grid_line_join\": \"miter\", \"grid_line_width\": {\"value\": 1}, \"id\": \"aabc649c-ea6c-4bbc-91a1-817e8ade01c3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"minor_grid_line_alpha\": {\"value\": 1.0}, \"minor_grid_line_cap\": \"butt\", \"minor_grid_line_color\": {\"value\": null}, \"minor_grid_line_dash\": [], \"minor_grid_line_dash_offset\": 0, \"minor_grid_line_join\": \"miter\", \"minor_grid_line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Display horizontal or vertical grid lines at locations\n    given by a supplied ``Ticker``.",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line dash of the minor Grid lines.",
        "type": "DashPattern",
        "name": "minor_grid_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the Grid lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "grid_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash offset of the minor Grid lines.",
        "type": "Int",
        "name": "minor_grid_line_dash_offset",
        "default": 0
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "The line width of the minor Grid lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_grid_line_width",
        "default": 1
      },
      {
        "desc": "Bounds for the rendered grid lines. If unset, the grid\n    lines will span the entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "The line dash offset of the Grid lines.",
        "type": "Int",
        "name": "grid_line_dash_offset",
        "default": 0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "underlay"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line color of the minor Grid lines.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_grid_line_color",
        "default": null
      },
      {
        "desc": "The line width of the Grid lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "grid_line_width",
        "default": 1
      },
      {
        "desc": "The line join of the minor Grid lines.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_grid_line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color of alternating bands between Grid lines.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "band_fill_color",
        "default": null
      },
      {
        "desc": "The line dash of the Grid lines.",
        "type": "DashPattern",
        "name": "grid_line_dash",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Ticker to use for computing locations for the Grid lines.",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line alpha of the minor Grid lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_grid_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The fill alpha of alternating bands between Grid lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "band_fill_alpha",
        "default": 0
      },
      {
        "desc": "Which dimension the Axis Grid lines will intersect. The\n    x-axis is dimension 0 (vertical Grid lines) and the y-axis\n    is dimension 1 (horizontal Grid lines).",
        "type": "Int",
        "name": "dimension",
        "default": 0
      },
      {
        "desc": "The line cap of the Grid lines.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "grid_line_cap",
        "default": "butt"
      },
      {
        "desc": "The line join of the Grid lines.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "grid_line_join",
        "default": "miter"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "The line color of the Grid lines.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "grid_line_color",
        "default": "#e5e5e5"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The line cap of the minor Grid lines.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_grid_line_cap",
        "default": "butt"
      }
    ],
    "name": "Grid"
  },
  "Cross": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"47747fe2-ff26-470a-a758-a8da209c2ab0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render '+' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Cross.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Cross"
  },
  "FixedTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"666a6315-6afa-4bf5-a2e8-70abc87b6de5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"ticks\": []}",
    "desc": "Generate ticks at fixed, explicitly supplied locations.\n\n    .. note::\n        The ``desired_num_ticks`` property is ignored by this Ticker.",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "List of tick locations.",
        "type": "Seq(Float)",
        "name": "ticks",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "FixedTicker"
  },
  "BasicTickFormatter": {
    "proto": "{\"id\": \"76b884a9-276e-4a65-9cdb-b571999030ef\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}",
    "desc": "Display tick values from continuous ranges as \"basic numbers\",\n    using scientific notation when appropriate by default.",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.",
        "type": "Bool",
        "name": "use_scientific",
        "default": true
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low",
        "type": "Int",
        "name": "power_limit_low",
        "default": -3
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How many digits of precision to display in tick labels.",
        "type": "Either(Auto, Int)",
        "name": "precision",
        "default": "auto"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high",
        "type": "Int",
        "name": "power_limit_high",
        "default": 5
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "BasicTickFormatter"
  },
  "Renderer": {
    "proto": "{\"id\": \"fc96d83e-27be-484a-af6a-8e8f01b78c8b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "An abstract base class for renderer types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "image"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Renderer"
  },
  "Button": {
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"clicks\": 0, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"8266967a-4899-40a6-90a6-66960a3e883d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A click button.",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "props": [
      {
        "desc": "A private property used to trigger ``on_click`` event handler.",
        "type": "Int",
        "name": "clicks",
        "default": 0
      },
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "type": "String",
        "name": "label",
        "default": "Button"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "type": "Instance(AbstractIcon)",
        "name": "icon",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Button"
  },
  "AjaxDataSource": {
    "proto": "{\"callback\": null, \"column_names\": [], \"content_type\": \"application/json\", \"data\": {}, \"data_url\": null, \"http_headers\": {}, \"id\": \"6c29d64a-4b60-4f36-878b-6c2ff20b22a1\", \"if_modified\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_size\": null, \"method\": \"POST\", \"mode\": \"replace\", \"name\": null, \"polling_interval\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "bases": [
      "bokeh.models.sources.RemoteSource"
    ],
    "props": [
      {
        "desc": "Maximum size of the data array being kept after each pull requests.\n    Larger than that size, the data will be right shifted.",
        "type": "Int",
        "name": "max_size",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "polling interval for updating data source in milliseconds",
        "type": "Int",
        "name": "polling_interval",
        "default": null
      },
      {
        "desc": "http method - GET or POST",
        "type": "Enum('POST', 'GET')",
        "name": "method",
        "default": "POST"
      },
      {
        "desc": "Whether to append new data to existing data (up to ``max_size``),\n    or to replace existing data entirely.",
        "type": "Enum('replace', 'append')",
        "name": "mode",
        "default": "replace"
      },
      {
        "desc": "Whether to include an ``If-Modified-Since`` header in AJAX requests\n    to the server. If this header is supported by the server, then only\n    new data since the last request will be returned.",
        "type": "Bool",
        "name": "if_modified",
        "default": false
      },
      {
        "desc": "HTTP headers to set for the Ajax request.",
        "type": "Dict(String, String)",
        "name": "http_headers",
        "default": {}
      },
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "type": "Dict(String, Dict(String, Any))",
        "name": "selected",
        "default": {
          "2d": {
            "indices": {}
          },
          "1d": {
            "indices": []
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "desc": "Set the \"contentType\" parameter for the Ajax request.",
        "type": "String",
        "name": "content_type",
        "default": "application/json"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "type": "List(String)",
        "name": "column_names",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "type": "ColumnData(String, Seq(Any))",
        "name": "data",
        "default": {}
      },
      {
        "desc": "The URL to the endpoint for the data.",
        "type": "String",
        "name": "data_url",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "AjaxDataSource"
  },
  "DatetimeTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"722ac83f-9ff7-4f04-b955-1965283aae73\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 0, \"subscribed_events\": [], \"tags\": [], \"tickers\": [{\"id\": \"9a3ec4ed-cbb2-402a-ae39-06fcba1350d5\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"5ad6156b-1fed-401c-8e69-2d707346daf9\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"aecd8e72-e3e4-421c-97ea-67f7cc41e6a6\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"0f6d5797-b39b-4963-b93f-2e7e1d2cbaae\", \"type\": \"DaysTicker\"}, {\"id\": \"7d35a792-3556-45d3-9eb5-3d010e6cdf66\", \"type\": \"DaysTicker\"}, {\"id\": \"384f7972-498f-457b-90d3-103ff9b2b549\", \"type\": \"DaysTicker\"}, {\"id\": \"424d4e98-3268-4ad5-a755-e57693a20667\", \"type\": \"DaysTicker\"}, {\"id\": \"7adfecf8-96a8-461d-b031-39601971dafb\", \"type\": \"MonthsTicker\"}, {\"id\": \"7235a398-7ff6-49b9-a6d5-6baaa72527e3\", \"type\": \"MonthsTicker\"}, {\"id\": \"8c58590f-8f9c-4df8-8690-2679fd07b39d\", \"type\": \"MonthsTicker\"}, {\"id\": \"4ef95b50-9a58-4990-a8b3-bbdf30517ebf\", \"type\": \"MonthsTicker\"}, {\"id\": \"0f38a00c-8b94-40c2-a89e-68c5f015bb39\", \"type\": \"YearsTicker\"}]}",
    "desc": "Generate nice ticks across different date and time scales.",
    "bases": [
      "bokeh.models.tickers.CompositeTicker"
    ],
    "props": [
      {
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()",
        "type": "Seq(Instance(Ticker))",
        "name": "tickers",
        "default": [
          "{\"id\": \"8b691c4d-db25-4c4b-926e-a8eff15dda16\", \"max_interval\": 500.0, \"num_minor_ticks\": 0}",
          "{\"base\": 60, \"id\": \"5fc8eeff-e998-46ff-b432-9f5c72456efd\", \"mantissas\": [1, 2, 5, 10, 15, 20, 30], \"max_interval\": 1800000.0, \"min_interval\": 1000.0, \"num_minor_ticks\": 0}",
          "{\"base\": 24, \"id\": \"4ff8c5a0-bc35-4f85-b997-a529ea3141f3\", \"mantissas\": [1, 2, 4, 6, 8, 12], \"max_interval\": 43200000.0, \"min_interval\": 3600000.0, \"num_minor_ticks\": 0}",
          "{\"days\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], \"id\": \"b983b1b0-5bfd-41ac-93ab-c048d29592cc\"}",
          "{\"days\": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], \"id\": \"a2c03239-7a62-4fbb-b23c-55012cc5780c\"}",
          "{\"days\": [1, 8, 15, 22], \"id\": \"ff2fa2fe-c5bf-428f-a215-a77ab8c152c1\"}",
          "{\"days\": [1, 15], \"id\": \"cde45143-7b44-4056-ba87-0256d93479ad\"}",
          "{\"id\": \"cc1e376a-a883-4c02-bf11-c3db106fb57e\", \"months\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}",
          "{\"id\": \"536b7f0f-4dd5-40cf-b501-f19e67f3a71c\", \"months\": [0, 2, 4, 6, 8, 10]}",
          "{\"id\": \"a04d8cf7-9984-4e07-8254-6570c86b0f33\", \"months\": [0, 4, 8]}",
          "{\"id\": \"8e66eee5-d2ad-4ca5-9d09-c0c6e5ca6424\", \"months\": [0, 6]}",
          "{\"id\": \"1bb13f5c-6038-4f3c-ba67-c08b05631647\"}"
        ]
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "DatetimeTicker"
  },
  "MultiLine": {
    "proto": "{\"id\": \"f0b76e92-19e6-403b-a337-a8c4427d1abc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}",
    "desc": "Render several lines.\n\n    The data for the ``MultiLine`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/MultiLine.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The x-coordinates for all the lines, given as a \"list of lists\".",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "xs",
        "default": null
      },
      {
        "desc": "The y-coordinates for all the lines, given as a \"list of lists\".",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "ys",
        "default": null
      },
      {
        "desc": "The line dash values for the lines.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the lines.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the lines.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the lines.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the lines.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the lines.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "MultiLine"
  },
  "Interpolator": {
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"ec1a00ac-6740-41ca-97ae-501d4b381e74\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Base class for interpolator transforms.\n\n    Interpolators return the value of a function which has been evaluated\n    between specified (x, y) pairs of data.  As an example, if two control\n    point pairs were provided to the interpolator, a linear interpolaction\n    at a specific value of 'x' would result in the value of 'y' which existed\n    on the line conneting the two control points.\n\n    The control point pairs for the interpolators can be specified through either\n\n    * A literal sequence of values:\n\n    .. code-block: python\n\n        interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n    * or a pair of columns defined in a `ColumnDataSource` object:\n\n    .. code-block: python\n\n        interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\n    This is the base class and is not intended to end use.  Please see the\n    documentation for the final derived classes (Jitter, LineraInterpolator,\n    StepInterpolator) for mor information on their specific methods of\n    interpolation.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "type": "Either(String, Seq(Float))",
        "name": "y",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "type": "Bool",
        "name": "clip",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "type": "Instance(ColumnarDataSource)",
        "name": "data",
        "default": null
      },
      {
        "desc": "Independant coordiante denoting the location of a point.",
        "type": "Either(String, Seq(Float))",
        "name": "x",
        "default": null
      }
    ],
    "name": "Interpolator"
  },
  "YearsTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"2a9e2be9-88c6-47b8-8a04-551ea7f29c3f\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks spaced apart even numbers of years.",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The interval between adjacent ticks.",
        "type": "Float",
        "name": "interval",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "YearsTicker"
  },
  "FuncTickFormatter": {
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"feed1761-e586-47d7-ade1-b053304fa83d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Display tick values that are formatted by a user-defined function.",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the formatter code snippet as the values of named\n    parameters to the callback.",
        "type": "Dict(String, Instance(Model))",
        "name": "args",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A snippet of JavaScript code that reformats a single tick to the desired\n    format. The variable ``tick`` will contain the unformatted tick value and\n    can be expected to be present in the code snippet namespace at render time.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            return Math.floor(tick) + \" + \" + (tick % 1).toFixed(2)\n            '''",
        "type": "String",
        "name": "code",
        "default": ""
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "FuncTickFormatter"
  },
  "ZoomInTool": {
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"1e25a34f-8cb8-4ae9-99f9-712abb61b375\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |zoom_in_icon|\n\n    The zoom-in tool allows users to click a button to zoom in\n    by a fixed amount.\n\n    .. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "type": "Percent",
        "name": "factor",
        "default": 0.1
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Which dimensions the zoom-in tool is constrained to act in. By\n    default the zoom-in zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "ZoomInTool"
  },
  "ContinuousAxis": {
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": null, \"id\": \"19504bc0-39de-4a8d-b398-4d5e7656a9fd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "A base class for all numeric, non-categorical axes types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "props": [
      {
        "desc": "The line cap of the axis line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "type": "Int",
        "name": "major_label_standoff",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "type": "Dict(Either(Float, String), String)",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "desc": "The text font style of the axis label.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size of the axis label.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "desc": "The line width of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text baseline of the axis label.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line alpha of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "type": "Int",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text align of the axis label.",
        "type": "Enum('left', 'right', 'center')",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text color of the axis label.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": null
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the axis line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "desc": "The text alpha of the axis label.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": null
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "desc": "The line dash offset of the axis line.",
        "type": "Int",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color of the axis line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "type": "String",
        "name": "axis_label",
        "default": ""
      },
      {
        "desc": "The line dash of the axis line.",
        "type": "DashPattern",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font of the axis label.",
        "type": "String",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "ContinuousAxis"
  },
  "Label": {
    "proto": "{\"angle\": 0, \"angle_units\": \"rad\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"769b307e-4200-46f7-9864-b1978ab07be9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"visible\": true, \"x\": null, \"x_offset\": 0, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": 0, \"y_range_name\": \"default\", \"y_units\": \"data\"}",
    "desc": "Render a single text label as an annotation.\n\n    ``Label`` will render a single text label at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\n    Additionally, the label can be rotated with the ``angle`` property.\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "props": [
      {
        "desc": "The text color values for the text.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash values for the text bounding box.",
        "type": "DashPattern",
        "name": "border_line_dash",
        "default": []
      },
      {
        "desc": "The fill color values for the text bounding box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Offset value to apply to the y-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "type": "Float",
        "name": "y_offset",
        "default": 0
      },
      {
        "desc": "A particular (named) x-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The unit type for the x attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "x_units",
        "default": "data"
      },
      {
        "desc": "The line join values for the text bounding box.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The text baseline values for the text.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The angle to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center.",
        "type": "Angle",
        "name": "angle",
        "default": 0
      },
      {
        "desc": "The text align values for the text.",
        "type": "Enum('left', 'right', 'center')",
        "name": "text_align",
        "default": "left"
      },
      {
        "desc": "The line color values for the text bounding box.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_line_color",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line dash offset values for the text bounding box.",
        "type": "Int",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The text font style values for the text.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "text_font_style",
        "default": "normal"
      },
      {
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "type": "Enum('canvas', 'css')",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "desc": "The line cap values for the text bounding box.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "type": "Float",
        "name": "y",
        "default": null
      },
      {
        "desc": "The text font size values for the text.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "text_font_size",
        "default": {
          "value": "12pt"
        }
      },
      {
        "desc": "The text alpha values for the text.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font values for the text.",
        "type": "String",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "desc": "The unit type for the y attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "y_units",
        "default": "data"
      },
      {
        "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "Offset value to apply to the x-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "type": "Float",
        "name": "x_offset",
        "default": 0
      },
      {
        "desc": "A particular (named) y-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "The fill alpha values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The text value to render.",
        "type": "String",
        "name": "text",
        "default": null
      },
      {
        "desc": "The line width values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_width",
        "default": 1
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "type": "Float",
        "name": "x",
        "default": null
      },
      {
        "desc": "The line alpha values for the text bounding box.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_alpha",
        "default": 1.0
      }
    ],
    "name": "Label"
  },
  "MapOptions": {
    "proto": "{\"id\": \"0e71eb79-5021-42aa-afdc-9cf7ebfd6c98\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}",
    "desc": "Abstract base class for map options' models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The longitude where the map should be centered.",
        "type": "Float",
        "name": "lng",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The latitude where the map should be centered.",
        "type": "Float",
        "name": "lat",
        "default": null
      },
      {
        "desc": "The initial zoom level to use when displaying the map.",
        "type": "Int",
        "name": "zoom",
        "default": 12
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "MapOptions"
  },
  "ToolbarBox": {
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"eadd5742-a2dd-4be7-955b-c9930b1923ba\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"merge_tools\": true, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"toolbar_location\": \"right\", \"tools\": [], \"width\": null}",
    "desc": "A layoutable toolbar that can accept the tools of multiple plots, and\n    can merge the tools into a single button for convenience.",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Should the toolbar be presented as if it was stuck to the `above`, `right`, `left`, `below`\n        edge of a plot. Default is `right`.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "type": "List(Instance(LayoutDOM))",
        "name": "children",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "type": "Enum('normal', 'grey')",
        "name": "logo",
        "default": "normal"
      },
      {
        "desc": "Merge all the tools together so there is one tool to control all the plots.",
        "type": "Bool",
        "name": "merge_tools",
        "default": true
      },
      {
        "desc": "A list of tools to add to the plot.",
        "type": "List(Instance(Tool))",
        "name": "tools",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "ToolbarBox"
  },
  "TextInput": {
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"76db12b5-795a-4433-bf23-b78994b3f1c8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "desc": "Single-line input widget.",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "Placeholder for empty input field",
        "type": "String",
        "name": "placeholder",
        "default": ""
      },
      {
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Initial or entered text value.",
        "type": "String",
        "name": "value",
        "default": ""
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "TextInput"
  },
  "Drag": {
    "proto": "{\"id\": \"1342d95d-82c5-498c-94b3-302b42b20ff8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Drag"
  },
  "InvertedTriangle": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"495dade7-5a0c-45a7-9b80-495dfb41e06a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render upside-down triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/InvertedTriangle.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "InvertedTriangle"
  },
  "ImageSource": {
    "proto": "{\"extra_url_vars\": {}, \"id\": \"6d235bd1-0fcc-43e2-a285-26bffc8e293c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"\"}",
    "desc": "A base class for all image source types.",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A dictionary that maps url variable template keys to values.\n    These variables are useful for parts of tile urls which do not change from tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "tile service url (example: http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png)",
        "type": "String",
        "name": "url",
        "default": ""
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "ImageSource"
  },
  "Markup": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"bb001e2c-0225-4242-8151-7f6283bc96ae\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "Base class for Bokeh models that represent HTML markup elements.\n\n    Markups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The contents of the widget.",
        "type": "String",
        "name": "text",
        "default": ""
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Markup"
  },
  "Arc": {
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"id\": \"0d685363-6350-44f4-a121-ca8450e4ce59\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render arcs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Arc.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The angles to start the arcs, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "start_angle",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "end_angle_units",
        "default": "rad"
      },
      {
        "desc": "The line color values for the arcs.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Radius of the arc.",
        "type": "DistanceSpec(units_default='data')",
        "name": "radius",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the arcs.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "radius_units",
        "default": "data"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to end the arcs, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "end_angle",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "start_angle_units",
        "default": "rad"
      },
      {
        "desc": "Which direction to stroke between the start and end angles.",
        "type": "Enum('clock', 'anticlock')",
        "name": "direction",
        "default": "anticlock"
      },
      {
        "desc": "The line width values for the arcs.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the arcs.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the arcs.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the center of the arcs.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the arcs.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the arcs.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the center of the arcs.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Arc"
  },
  "BoxZoomTool": {
    "proto": "{\"dimensions\": \"both\", \"id\": \"fdca345f-5cbb-4066-b1b8-ffebbb6c85e2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"match_aspect\": false, \"name\": null, \"overlay\": {\"id\": \"3b1c1669-3b17-44c9-90f0-98e92fc9f086\", \"type\": \"BoxAnnotation\"}, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |box_zoom_icon|\n\n    The box zoom tool allows users to define a rectangular\n    region of a Plot to zoom to by dragging he mouse or a\n    finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    .. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "type": "Instance(BoxAnnotation)",
        "name": "overlay",
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"e0b95772-0ad0-49fa-a3a8-1220fb03e408\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Which dimensions the zoom box is to be free in. By default,\n    users may freely draw zoom boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "Whether the box zoom region should be restricted to have the same\n    aspect ratio as the plot region.\n\n    .. note::\n        If the tool is restricted to one dimension, this value has\n        no effect.",
        "type": "Bool",
        "name": "match_aspect",
        "default": false
      }
    ],
    "name": "BoxZoomTool"
  },
  "GeoJSONDataSource": {
    "proto": "{\"callback\": null, \"column_names\": [], \"geojson\": null, \"id\": \"d7d2e97f-1fd1-4d22-9852-51fb3f5c269d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "type": "Dict(String, Dict(String, Any))",
        "name": "selected",
        "default": {
          "2d": {
            "indices": {}
          },
          "1d": {
            "indices": []
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An list of names for all the columns in this DataSource.",
        "type": "List(String)",
        "name": "column_names",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "GeoJSON that contains features for plotting. Currently GeoJSONDataSource can\n    only process a FeatureCollection or GeometryCollection.",
        "type": "JSON",
        "name": "geojson",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "GeoJSONDataSource"
  },
  "GlyphRenderer": {
    "proto": "{\"data_source\": null, \"glyph\": null, \"hover_glyph\": null, \"id\": \"02760119-ddda-4639-89fc-60003571a720\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"glyph\", \"muted\": false, \"muted_glyph\": null, \"name\": null, \"nonselection_glyph\": \"auto\", \"selection_glyph\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "props": [
      {
        "desc": "",
        "type": "Bool",
        "name": "muted",
        "default": false
      },
      {
        "desc": "The glyph to render, in conjunction with the supplied data source\n    and ranges.",
        "type": "Instance(Glyph)",
        "name": "glyph",
        "default": null
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "type": "Instance(DataSource)",
        "name": "data_source",
        "default": null
      },
      {
        "desc": "An optional glyph used for explicitly non-selected points\n    (i.e., non-selected when there are other points that are selected,\n    but not when no points at all are selected.)\n\n    If set to \"auto\" then a glyph with a low alpha value (0.1) will\n    be used for non-selected points.",
        "type": "Either(Auto, Instance(Glyph))",
        "name": "nonselection_glyph",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "",
        "type": "Instance(Glyph)",
        "name": "muted_glyph",
        "default": null
      },
      {
        "desc": "An optional glyph used for inspected points, e.g., those that are\n    being hovered over by a HoverTool.",
        "type": "Instance(Glyph)",
        "name": "hover_glyph",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "glyph"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An optional glyph used for selected points.\n\n    If set to \"auto\" then the standard glyph will be used for selected\n    points.",
        "type": "Either(Auto, Instance(Glyph))",
        "name": "selection_glyph",
        "default": "auto"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default -range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "GlyphRenderer"
  },
  "PanTool": {
    "proto": "{\"dimensions\": \"both\", \"id\": \"99073171-b44d-413b-8c1b-b584ce9d2285\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |pan_icon|\n\n    The pan tool allows the user to pan a Plot by left-dragging\n    a mouse, or on touch devices by dragging a finger or stylus, across\n    the plot region.\n\n    The pan tool also activates the border regions of a Plot for \"single\n    axis\" panning. For instance, dragging in the vertical border or axis\n    will effect a pan in the vertical direction only, with the horizontal\n    dimension kept fixed.\n\n    .. |pan_icon| image:: /_images/icons/Pan.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Which dimensions the pan tool is constrained to act in. By default\n    the pan tool will pan in any dimension, but can be configured to only\n    pan horizontally across the width of the plot, or vertically across the\n    height of the plot.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "PanTool"
  },
  "MultiSelect": {
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"08521f26-e22c-4e04-8a6b-7ee5734f20bf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"size\": 4, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": [], \"width\": null}",
    "desc": "Multi-select widget.",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the current selection value\n    changes.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "The number of visible options in the dropdown list. (This uses the\n    ``select`` HTML element's ``size`` attribute. Some browsers might not\n    show less than 3 options.)",
        "type": "Int",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.",
        "type": "List(Either(String, Tuple(String, String)))",
        "name": "options",
        "default": []
      },
      {
        "desc": "Initial or selected values.",
        "type": "List(String)",
        "name": "value",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "MultiSelect"
  },
  "Plot": {
    "proto": "{\"above\": [], \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"ee69c8af-759d-4ba4-a895-98e3ca2f3eaf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"e226ffa5-28cd-4276-94e9-4f1072c48685\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"5f3a90ad-1bb9-42d4-aa48-294f3b0196d4\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"011fce74-067d-4d2a-bcf7-b4d31c212561\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"7bf564cf-fa72-48e3-9e6b-044405b2d835\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"09f31baf-b30e-4fe3-b9ee-dd2c8338fdb8\", \"type\": \"LinearScale\"}}",
    "desc": "Model representing a plot, containing glyphs, guides, annotations.",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "props": [
      {
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "title_location",
        "default": "above"
      },
      {
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "type": "Dict(String, Instance(Range))",
        "name": "extra_y_ranges",
        "default": {}
      },
      {
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "left",
        "default": []
      },
      {
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_top",
        "default": null
      },
      {
        "desc": "The fill color for the plot background style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill color for the plot border style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "type": "Instance(Range)",
        "name": "x_range",
        "default": null
      },
      {
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "inner_height",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "right",
        "default": []
      },
      {
        "desc": "The fill alpha for the plot border style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "type": "Int",
        "name": "plot_height",
        "default": 600
      },
      {
        "desc": "A ToolEvents object to share and report tool events.",
        "type": "Instance(ToolEvents)",
        "name": "tool_events",
        "default": null
      },
      {
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "type": "Int",
        "name": "plot_width",
        "default": 600
      },
      {
        "desc": "A list of renderers to occupy the area above of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "above",
        "default": []
      },
      {
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "type": "Instance(Scale)",
        "name": "x_scale",
        "default": "{\"id\": \"62eb2b72-060d-4ab5-980b-e0e0b8ce343f\"}"
      },
      {
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_bottom",
        "default": null
      },
      {
        "desc": "The fill alpha for the plot background style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "type": "Bool",
        "name": "toolbar_sticky",
        "default": true
      },
      {
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_left",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      },
      {
        "desc": "A list of renderers to occupy the area below of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "below",
        "default": []
      },
      {
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_right",
        "default": null
      },
      {
        "desc": "The line alpha for the plot border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "outline_line_alpha",
        "default": 1.0
      },
      {
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "type": "Instance(Title)",
        "name": "title",
        "default": "{\"id\": \"2649d5b4-c5dd-4534-ac31-16fa2670bf13\", \"text\": \"\"}"
      },
      {
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "type": "Instance(Range)",
        "name": "y_range",
        "default": null
      },
      {
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "type": "Dict(String, Instance(Range))",
        "name": "extra_x_ranges",
        "default": {}
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "type": "Int",
        "name": "lod_factor",
        "default": 10
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line cap for the plot border outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "outline_line_cap",
        "default": "butt"
      },
      {
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "type": "Int",
        "name": "min_border",
        "default": 5
      },
      {
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "type": "Int",
        "name": "lod_timeout",
        "default": 500
      },
      {
        "desc": "The line join for the plot border outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "outline_line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "type": "Int",
        "name": "lod_threshold",
        "default": 2000
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      },
      {
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "name": "output_backend",
        "default": "canvas"
      },
      {
        "desc": "The line dash for the plot border outline.",
        "type": "DashPattern",
        "name": "outline_line_dash",
        "default": []
      },
      {
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "type": "Instance(Toolbar)",
        "name": "toolbar",
        "default": null
      },
      {
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "type": "Bool",
        "name": "h_symmetry",
        "default": true
      },
      {
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "type": "Instance(Scale)",
        "name": "y_scale",
        "default": "{\"id\": \"c1076d64-a8b1-4849-8639-a59d21d85bfe\"}"
      },
      {
        "desc": "The line width for the plot border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "outline_line_width",
        "default": 1
      },
      {
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "layout_height",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "type": "Int",
        "name": "lod_interval",
        "default": 300
      },
      {
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "inner_width",
        "default": null
      },
      {
        "desc": "Whether to use HiDPI mode when available.",
        "type": "Bool",
        "name": "hidpi",
        "default": true
      },
      {
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "layout_width",
        "default": null
      },
      {
        "desc": "The line color for the plot border outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "outline_line_color",
        "default": "#e5e5e5"
      },
      {
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "type": "Bool",
        "name": "v_symmetry",
        "default": false
      },
      {
        "desc": "The line dash offset for the plot border outline.",
        "type": "Int",
        "name": "outline_line_dash_offset",
        "default": 0
      }
    ],
    "name": "Plot"
  },
  "Box": {
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c648b4a1-9fe3-4b74-b987-c1f7cbc4508a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for Row and Column. Do not use directly.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "type": "List(Instance(LayoutDOM))",
        "name": "children",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Box"
  },
  "Callback": {
    "proto": "{\"id\": \"200ce135-71e6-4b70-9344-eac55ac08732\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for interactive callback.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Callback"
  },
  "ColorMapper": {
    "proto": "{\"id\": \"9cbb4f67-a58e-4165-a850-9b909ae82ca6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "type": "Color",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "type": "Seq(Color)",
        "name": "palette",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "ColorMapper"
  },
  "WidgetBox": {
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"21089824-3a4a-44cb-8f2b-17f805965ea4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A container for widgets that are part of a layout.",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The list of widgets to put in the layout box.",
        "type": "List(Instance(Widget))",
        "name": "children",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "WidgetBox"
  },
  "Panel": {
    "proto": "{\"child\": null, \"closable\": false, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"cef05b6c-0d6c-41f2-a78f-e3575a663bcd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "desc": "A single-widget container with title bar and controls.",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "The child widget. If you need more children, use a layout widget,\n    e.g. ``Row`` or ``Column``.",
        "type": "Instance(LayoutDOM)",
        "name": "child",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional text title of the panel.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Whether this panel is closeable or not. If True, an \"x\" button will\n    appear.",
        "type": "Bool",
        "name": "closable",
        "default": false
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Panel"
  },
  "StringEditor": {
    "proto": "{\"completions\": [], \"id\": \"62ff4d60-4f3c-4829-ada1-43fa28351fb8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Basic string cell editor with auto-completion.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An optional list of completion strings.",
        "type": "List(String)",
        "name": "completions",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "StringEditor"
  },
  "PercentEditor": {
    "proto": "{\"id\": \"47cc36ea-f249-4d6d-b43f-8a6648bc74c5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "``IntEditor`` optimized for editing percentages.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "PercentEditor"
  },
  "CheckboxGroup": {
    "proto": "{\"active\": [], \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"9c6b4c18-28f1-4340-9ef3-919e083aed64\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of check boxes.",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "props": [
      {
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "type": "Bool",
        "name": "inline",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The list of indices of selected check boxes.",
        "type": "List(Int)",
        "name": "active",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "CheckboxGroup"
  },
  "BBoxTileSource": {
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"9b23d938-d08c-44ca-97f0-9590d7667b55\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"use_latlon\": false, \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The BBoxTileSource has the same default tile origin as the\n    WMTSTileSource but requested tiles use a ``{XMIN}``, ``{YMIN}``,\n    ``{XMAX}``, ``{YMAX}`` e.g. ``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``.",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "props": [
      {
        "desc": "Flag which indicates option to output {XMIN},{YMIN},{XMAX},{YMAX} in meters or latitude and longitude.",
        "type": "Bool",
        "name": "use_latlon",
        "default": false
      },
      {
        "desc": "A y-offset in plot coordinates",
        "type": "Float",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "type": "Int",
        "name": "max_zoom",
        "default": 30
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "type": "String",
        "name": "attribution",
        "default": ""
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "type": "Bool",
        "name": "wrap_around",
        "default": true
      },
      {
        "desc": "An x-offset in plot coordinates",
        "type": "Float",
        "name": "x_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "type": "Int",
        "name": "min_zoom",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "type": "String",
        "name": "url",
        "default": ""
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "type": "Int",
        "name": "tile_size",
        "default": 256
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "type": "Float",
        "name": "initial_resolution",
        "default": 156543.03392804097
      }
    ],
    "name": "BBoxTileSource"
  },
  "DataRange1d": {
    "proto": "{\"bounds\": null, \"callback\": null, \"default_span\": 2.0, \"end\": null, \"flipped\": false, \"follow\": null, \"follow_interval\": null, \"id\": \"49760e2b-417f-49da-808d-9b70d6c812d0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"names\": [], \"range_padding\": 0.1, \"range_padding_units\": \"percent\", \"renderers\": [], \"start\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "An auto-fitting range in a continuous scalar dimension.\n    The upper and lower bounds are set to the min and max of the data.",
    "bases": [
      "bokeh.models.ranges.DataRange"
    ],
    "props": [
      {
        "desc": "If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\n    always be constrained to that::\n\n         abs(r.start - r.end) <= follow_interval\n\n    is maintained.",
        "type": "Float",
        "name": "follow_interval",
        "default": null
      },
      {
        "desc": "Whether the range should be \"flipped\" from its normal direction when\n    auto-ranging.",
        "type": "Bool",
        "name": "flipped",
        "default": false
      },
      {
        "desc": "A callback to run in the browser whenever the range is updated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Note that ``bounds`` can impose an\n    implicit constraint on the maximum interval as well.",
        "type": "Float",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)",
        "type": "Enum('percent', 'absolute')",
        "name": "range_padding_units",
        "default": "percent"
      },
      {
        "desc": "An explicitly supplied range end. If provided, will override\n    automatically computed end value.",
        "type": "Float",
        "name": "end",
        "default": null
      },
      {
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the DataRange1d.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether\n    your range is increasing or decreasing, the first item should be the\n    minimum value of the range and the second item should be the maximum.\n    Setting ``min > max`` will result in a ``ValueError``.\n\n    If you only want to constrain one end of the plot, you can set ``min`` or\n    ``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``",
        "type": "MinMaxBounds(Auto, Tuple(Float, Float))",
        "name": "bounds",
        "default": null
      },
      {
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      },
      {
        "desc": "An explicitly supplied range start. If provided, will override\n    automatically computed start value.",
        "type": "Float",
        "name": "start",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound.",
        "type": "Float",
        "name": "min_interval",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "How much padding to add around the computed data bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``.",
        "type": "Float",
        "name": "range_padding",
        "default": 0.1
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A default width for the interval, in case ``start`` is equal to ``end``\n    (if used with a log axis, default_span is in powers of 10).",
        "type": "Float",
        "name": "default_span",
        "default": 2.0
      },
      {
        "desc": "Configure the data to follow one or the other data extreme, with a\n    maximum range size of ``follow_interval``.\n\n    If set to ``\"start\"`` then the range will adjust so that ``start`` always\n    corresponds to the minimum data value (or maximum, if ``flipped`` is\n    ``True``).\n\n    If set to ``\"end\"`` then the range will adjust so that ``end`` always\n    corresponds to the maximum data value (or minimum, if ``flipped`` is\n    ``True``).\n\n    If set to ``None`` (default), then auto-ranging does not follow, and\n    the range will encompass both the minimum and maximum data values.\n\n    ``follow`` cannot be used with bounds, and if set, bounds will be set to\n    ``None``.",
        "type": "Enum('start', 'end')",
        "name": "follow",
        "default": null
      }
    ],
    "name": "DataRange1d"
  },
  "CheckboxButtonGroup": {
    "proto": "{\"active\": [], \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"0dae7c85-59af-45c2-908a-a62e758dcd58\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of check boxes rendered as toggle buttons.",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The list of indices of selected check boxes.",
        "type": "List(Int)",
        "name": "active",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "CheckboxButtonGroup"
  },
  "GMapOptions": {
    "proto": "{\"id\": \"4e97718d-f1fa-402d-a50c-d9cdf9642876\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"map_type\": \"roadmap\", \"name\": null, \"scale_control\": false, \"styles\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}",
    "desc": "Options for GMapPlot objects.",
    "bases": [
      "bokeh.models.map_plots.MapOptions"
    ],
    "props": [
      {
        "desc": "Whether the Google map should display its distance scale control.",
        "type": "Bool",
        "name": "scale_control",
        "default": false
      },
      {
        "desc": "A JSON array of `map styles`_ to use for the GMapPlot. Many example styles can\n    `be found here`_.\n\n    .. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n    .. _be found here: https://snazzymaps.com",
        "type": "JSON",
        "name": "styles",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The longitude where the map should be centered.",
        "type": "Float",
        "name": "lng",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The latitude where the map should be centered.",
        "type": "Float",
        "name": "lat",
        "default": null
      },
      {
        "desc": "The initial zoom level to use when displaying the map.",
        "type": "Int",
        "name": "zoom",
        "default": 12
      },
      {
        "desc": "The `map type`_ to use for the GMapPlot.\n\n    .. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId",
        "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')",
        "name": "map_type",
        "default": "roadmap"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "GMapOptions"
  },
  "Ellipse": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"b57edb4e-1ed5-435b-a63f-cacd40942bd7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "desc": "Render ellipses.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Ellipse.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill alpha values for the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line color values for the ovals.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The widths of each ellipse.",
        "type": "DistanceSpec(units_default='data')",
        "name": "width",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The fill color values for the ovals.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angle the ellipses are rotated from horizontal. [rad]",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line width values for the ovals.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the ovals.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the ovals.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the centers of the ellipses.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The heights of each ellipse.",
        "type": "DistanceSpec(units_default='data')",
        "name": "height",
        "default": null
      },
      {
        "desc": "The line join values for the ovals.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "width_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "height_units",
        "default": "data"
      },
      {
        "desc": "The line cap values for the ovals.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the centers of the ellipses.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Ellipse"
  },
  "SaveTool": {
    "proto": "{\"id\": \"167fe398-740a-4f4c-95a3-d55acd7fd9d0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |save_icon|\n\n    The save tool is an action. When activated, the tool opens a download dialog\n    which allows to save an image reproduction of the plot in PNG format. If\n    automatic download is not support by a web browser, the tool falls back to\n    opening the generated image in a new tab or window. User then can manually\n    save it by right clicking on the image and choosing \"Save As\" (or similar)\n    menu item.\n\n    .. |save_icon| image:: /_images/icons/Save.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "SaveTool"
  },
  "Annulus": {
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"35c0e8fc-189f-4536-84ca-f5e9dac9809e\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render annuli.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Annulus.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the annuli.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the annuli.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the annuli.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the annuli.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The y-coordinates of the center of the annuli.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the annuli.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the annuli.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The inner radii of the annuli.",
        "type": "DistanceSpec(units_default='data')",
        "name": "inner_radius",
        "default": null
      },
      {
        "desc": "The line dash offset values for the annuli.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line alpha values for the annuli.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "The outer radii of the annuli.",
        "type": "DistanceSpec(units_default='data')",
        "name": "outer_radius",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "outer_radius_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "inner_radius_units",
        "default": "data"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the annuli.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the center of the annuli.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Annulus"
  },
  "TextAnnotation": {
    "proto": "{\"id\": \"96b3f125-c92b-4404-8dc6-093337e84799\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Base class for text annotation models such as labels and titles.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "TextAnnotation"
  },
  "Circle": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"6da434f1-0eb9-45f4-b787-4717a1ea97a5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"radius_dimension\": \"x\", \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render circle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Circle.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The radius values for circle markers (in \"data space\" units, by default).\n\n    .. note::\n        Circle markers are slightly unusual in that they support specifying\n        a radius in addition to a size. Only one of ``radius`` or ``size``\n        should be given.\n\n    .. warning::\n        Note that ``Circle`` glyphs are always drawn as circles on the screen,\n        even in cases where the data space aspect ratio is not 1-1. In all\n        cases where radius values are specified, the \"distance\" for the radius\n        is measured along the dimension specified by ``radius_dimension``. If\n        the aspect ratio is very large or small, the drawn circles may appear\n        much larger or smaller than expected. See :bokeh-issue:`626` for more\n        information.",
        "type": "DistanceSpec(units_default='data')",
        "name": "radius",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "radius_units",
        "default": "data"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "What dimension to measure circle radii along.\n\n    When the data space aspect ratio is not 1-1, then the size of the drawn\n    circles depends on what direction is used to measure the \"distance\" of\n    the radius. This property allows that direction to be controlled.",
        "type": "Enum('x', 'y')",
        "name": "radius_dimension",
        "default": "x"
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Circle"
  },
  "TableWidget": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"b68f1c87-9a1d-4cf6-97ba-ce6e24171c06\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"source\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for data table (data grid) widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The source of data for the widget.",
        "type": "Instance(DataSource)",
        "name": "source",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "TableWidget"
  },
  "TapTool": {
    "proto": "{\"behavior\": \"select\", \"callback\": null, \"id\": \"e9e16468-cea3-426f-bc7e-0bdc536dbcfa\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"plot\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |tap_select_icon|\n\n    The tap selection tool allows the user to select at single points by\n    left-clicking a mouse, or tapping with a finger.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. |tap_select_icon| image:: /_images/icons/TapSelect.png\n        :height: 18pt\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.",
    "bases": [
      "bokeh.models.tools.Tap"
    ],
    "props": [
      {
        "desc": "This tool can be configured to either make selections or inspections\n    on associated data sources. The difference is that selection changes\n    propagate across bokeh and other components (e.g. selection glyph)\n    will be notified. Inspecions don't act like this, so it's useful to\n    configure `callback` when setting `behavior='inspect'`.",
        "type": "Enum('select', 'inspect')",
        "name": "behavior",
        "default": "select"
      },
      {
        "desc": "A client-side action specification, like opening a URL, showing\n    a dialog box, etc. See :class:`~bokeh.models.actions.Action` for details.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "TapTool"
  },
  "LinearAxis": {
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"d7d25f94-4276-44eb-b80a-6c8fe7566a05\", \"type\": \"BasicTickFormatter\"}, \"id\": \"53f71f38-58d4-4b26-bf0c-4c65b715e61f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"74dbb244-5ba6-4271-84e5-101e31fa4267\", \"type\": \"BasicTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An axis that picks nice numbers for tick locations on a\n    linear scale. Configured with a ``BasicTickFormatter`` by default.",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "props": [
      {
        "desc": "The line cap of the axis line.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "type": "Int",
        "name": "major_label_standoff",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "overlay"
      },
      {
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "type": "Dict(Either(Float, String), String)",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "desc": "The text font style of the axis label.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font size of the axis label.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "desc": "The line width of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text baseline of the axis label.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line alpha of the axis line.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "type": "Int",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text align of the axis label.",
        "type": "Enum('left', 'right', 'center')",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The text color of the axis label.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": "{\"id\": \"b8df6287-b5fb-4ad3-82f9-41b885628128\"}"
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the axis line.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "name": "bounds",
        "default": "auto"
      },
      {
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "desc": "The text alpha of the axis label.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": "{\"id\": \"2cf0fc06-8fe9-49ed-b68d-9e219c7ff24b\"}"
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "desc": "The line dash offset of the axis line.",
        "type": "Int",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color of the axis line.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "type": "String",
        "name": "axis_label",
        "default": ""
      },
      {
        "desc": "The line dash of the axis line.",
        "type": "DashPattern",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font of the axis label.",
        "type": "String",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this guide renderer is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "LinearAxis"
  },
  "GMapPlot": {
    "proto": "{\"above\": [], \"api_key\": null, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"fa572c2a-1bf4-4981-a36d-53928479ebc6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"map_options\": null, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"1ead665e-b583-455c-b47f-6f9335fe2276\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"0426481a-7f1e-467d-b229-98e9534f26d3\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"60199926-fc01-4a6c-9d75-3d84970ef660\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"fca5320d-4822-4e18-b980-bc4c1facc807\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"eca83546-8e1e-45bd-8b5e-85e92c8e3187\", \"type\": \"LinearScale\"}}",
    "desc": "A Bokeh Plot with a `Google Map`_ displayed underneath.\n\n    Data placed on this plot should be specified in decimal lat long coordinates e.g. 37.123, -122.404.\n    It will be automatically converted into the web mercator projection to display properly over\n    google maps tiles.\n\n    .. _Google Map: https://www.google.com/maps/",
    "bases": [
      "bokeh.models.map_plots.MapPlot"
    ],
    "props": [
      {
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "title_location",
        "default": "above"
      },
      {
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "type": "Dict(String, Instance(Range))",
        "name": "extra_y_ranges",
        "default": {}
      },
      {
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "left",
        "default": []
      },
      {
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_top",
        "default": null
      },
      {
        "desc": "The fill color for the plot background style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill color for the plot border style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "type": "Instance(Range)",
        "name": "x_range",
        "default": null
      },
      {
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "inner_height",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "right",
        "default": []
      },
      {
        "desc": "The fill alpha for the plot border style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "type": "Int",
        "name": "plot_height",
        "default": 600
      },
      {
        "desc": "A ToolEvents object to share and report tool events.",
        "type": "Instance(ToolEvents)",
        "name": "tool_events",
        "default": null
      },
      {
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "type": "Int",
        "name": "plot_width",
        "default": 600
      },
      {
        "desc": "Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\n    for more information on how to obtain your own.",
        "type": "String",
        "name": "api_key",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area above of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "above",
        "default": []
      },
      {
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "type": "Instance(Scale)",
        "name": "x_scale",
        "default": "{\"id\": \"cca45a7b-cb0b-4eb3-9354-09936b06885a\"}"
      },
      {
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_bottom",
        "default": null
      },
      {
        "desc": "The fill alpha for the plot background style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "Options for displaying the plot.",
        "type": "Instance(GMapOptions)",
        "name": "map_options",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "type": "Bool",
        "name": "toolbar_sticky",
        "default": true
      },
      {
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_left",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      },
      {
        "desc": "A list of renderers to occupy the area below of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "below",
        "default": []
      },
      {
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_right",
        "default": null
      },
      {
        "desc": "The line alpha for the plot border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "outline_line_alpha",
        "default": 1.0
      },
      {
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "type": "Instance(Title)",
        "name": "title",
        "default": "{\"id\": \"485a5fea-ef60-46e2-a202-83f5301b4726\", \"text\": \"\"}"
      },
      {
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "type": "Instance(Range)",
        "name": "y_range",
        "default": null
      },
      {
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "type": "Dict(String, Instance(Range))",
        "name": "extra_x_ranges",
        "default": {}
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "type": "Int",
        "name": "lod_factor",
        "default": 10
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line cap for the plot border outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "outline_line_cap",
        "default": "butt"
      },
      {
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "type": "Int",
        "name": "min_border",
        "default": 5
      },
      {
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "type": "Int",
        "name": "lod_timeout",
        "default": 500
      },
      {
        "desc": "The line join for the plot border outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "outline_line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "type": "Int",
        "name": "lod_threshold",
        "default": 2000
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      },
      {
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "name": "output_backend",
        "default": "canvas"
      },
      {
        "desc": "The line dash for the plot border outline.",
        "type": "DashPattern",
        "name": "outline_line_dash",
        "default": []
      },
      {
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "type": "Instance(Toolbar)",
        "name": "toolbar",
        "default": null
      },
      {
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "type": "Bool",
        "name": "h_symmetry",
        "default": true
      },
      {
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "type": "Instance(Scale)",
        "name": "y_scale",
        "default": "{\"id\": \"1abb57c6-daec-4301-80c5-cfe029185e54\"}"
      },
      {
        "desc": "The line width for the plot border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "outline_line_width",
        "default": 1
      },
      {
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "layout_height",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "type": "Int",
        "name": "lod_interval",
        "default": 300
      },
      {
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "inner_width",
        "default": null
      },
      {
        "desc": "Whether to use HiDPI mode when available.",
        "type": "Bool",
        "name": "hidpi",
        "default": true
      },
      {
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "layout_width",
        "default": null
      },
      {
        "desc": "The line color for the plot border outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "outline_line_color",
        "default": "#e5e5e5"
      },
      {
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "type": "Bool",
        "name": "v_symmetry",
        "default": false
      },
      {
        "desc": "The line dash offset for the plot border outline.",
        "type": "Int",
        "name": "outline_line_dash_offset",
        "default": 0
      }
    ],
    "name": "GMapPlot"
  },
  "DatePicker": {
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d0f54d83-caff-4fa5-8437-0658d573a6e8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_date\": null, \"min_date\": null, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": 1500595200000.0, \"width\": null}",
    "desc": "Calendar-based date picker widget.",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "Optional latest allowable date.",
        "type": "Date",
        "name": "max_date",
        "default": null
      },
      {
        "desc": "A callback to run in the browser whenever the current date value changes.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "Optional earliest allowable date.",
        "type": "Date",
        "name": "min_date",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The initial or picked date.",
        "type": "Date",
        "name": "value",
        "default": "2017-07-21"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "DatePicker"
  },
  "RadioButtonGroup": {
    "proto": "{\"active\": null, \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"84db6a9e-6e19-4013-bec6-d78e326b457a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of radio boxes rendered as toggle buttons.",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected.",
        "type": "Int",
        "name": "active",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "RadioButtonGroup"
  },
  "ToolEvents": {
    "proto": "{\"geometries\": [], \"id\": \"121d37b9-1cbd-4ebf-ac28-86c4b51769fd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A class for reporting tools geometries from BokehJS.\n\n    .. warning::\n        This class will be superceded by a new general events system in the\n        near future.",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "List(Dict(String, Any))",
        "name": "geometries",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "ToolEvents"
  },
  "LayoutDOM": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ac28d39f-a3c9-4cbd-9423-c7e5aab09265\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "An abstract base class for layout components.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "LayoutDOM"
  },
  "LogColorMapper": {
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"7fe0244e-4f3b-4b15-9b07-9e99f846db28\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Map numbers in a range [*low*, *high*] into a\n    sequence of colors (a palette) on a natural logarithm scale.\n\n    For example, if the range is [0, 25] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as\n    follows::\n\n                x < 0     : 'red'     # values < low are clamped\n       0     >= x < 2.72  : 'red'     # math.e ** 1\n       2.72  >= x < 7.39  : 'green'   # math.e ** 2\n       7.39  >= x < 20.09 : 'blue'    # math.e ** 3\n       20.09 >= x         : 'blue'    # values > high are clamped\n\n    .. warning::\n        The LogColorMapper only works for images with scalar values that are\n        non-negative.",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "type": "Float",
        "name": "high",
        "default": null
      },
      {
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "type": "Seq(Color)",
        "name": "palette",
        "default": null
      },
      {
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "type": "Float",
        "name": "low",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "type": "Color",
        "name": "high_color",
        "default": null
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "type": "Color",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "type": "Color",
        "name": "low_color",
        "default": null
      }
    ],
    "name": "LogColorMapper"
  },
  "AbstractGroup": {
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"4fe006e0-51eb-4ac5-8991-75c730a40ff7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for all kinds of groups.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "AbstractGroup"
  },
  "UndoTool": {
    "proto": "{\"id\": \"5c616563-783f-4805-9cb2-4e744d13aee1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |undo_icon|\n\n    Undo tool allows to restore previous state of the plot.\n\n    .. |undo_icon| image:: /_images/icons/Undo.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "UndoTool"
  },
  "PreText": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"38d546d2-4453-4f9c-9e32-1ce34af7602f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "A block (paragraph) of pre-formatted text.\n\n    This Bokeh model corresponds to an HTML ``<pre>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_pretext.py\n        :source-position: below",
    "bases": [
      "bokeh.models.widgets.markups.Paragraph"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The contents of the widget.",
        "type": "String",
        "name": "text",
        "default": ""
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "PreText"
  },
  "RangeSlider": {
    "proto": "{\"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": null, \"disabled\": false, \"end\": 1, \"height\": null, \"id\": \"aac90b72-3e16-403a-949c-1de0f2c77011\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"range\": [0.1, 0.9], \"sizing_mode\": \"fixed\", \"start\": 0, \"step\": 0.1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "desc": "Range-slider based range selection widget",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "props": [
      {
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time.",
        "type": "Enum('continuous', 'throttle', 'mouseup')",
        "name": "callback_policy",
        "default": "throttle"
      },
      {
        "desc": "A callback to run in the browser whenever the current Slider value changes.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "The step between consecutive values.",
        "type": "Float",
        "name": "step",
        "default": 0.1
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "type": "Enum('horizontal', 'vertical')",
        "name": "orientation",
        "default": "horizontal"
      },
      {
        "desc": "Widget's label.",
        "type": "String",
        "name": "title",
        "default": ""
      },
      {
        "desc": "The maximum allowable value.",
        "type": "Float",
        "name": "end",
        "default": 1
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "The minimum allowable value.",
        "type": "Float",
        "name": "start",
        "default": 0
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Number of microseconds to pause between callback calls as the slider is moved.",
        "type": "Float",
        "name": "callback_throttle",
        "default": 200
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Initial or selected range.",
        "type": "Tuple(Float, Float)",
        "name": "range",
        "default": [
          0.1,
          0.9
        ]
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "RangeSlider"
  },
  "AdaptiveTicker": {
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"6bcb98f7-dc60-45dc-9d16-ea705ade9b70\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate \"nice\" round ticks at any magnitude.\n\n    Creates ticks that are \"base\" multiples of a set of given\n    mantissas. For example, with ``base=10`` and\n    ``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n        ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ...",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "props": [
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "type": "Float",
        "name": "max_interval",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "type": "Float",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "desc": "The acceptable list numbers to generate multiples of.",
        "type": "Seq(Float)",
        "name": "mantissas",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "The multiplier to use for scaling mantissas.",
        "type": "Float",
        "name": "base",
        "default": 10.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "AdaptiveTicker"
  },
  "CategoricalTicker": {
    "proto": "{\"id\": \"4f82730f-06d0-4cba-9ec8-e3dfbf0dbfe4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks for categorical ranges.",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CategoricalTicker"
  },
  "HBar": {
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"a94b7776-89d8-41a4-b62a-5b776c1bb9bd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": {\"value\": 0}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"y\": null}",
    "desc": "Render horizontal bars, given a center coordinate, ``height`` and\n    (``left``, ``right``) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/HBar.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The x-coordinates of the left edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "left",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the horizontal bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the horizontal bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the horizontal bars.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the horizontal bars.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The y-coordinates of the centers of the horizontal bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The heights of the vertical bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "height",
        "default": null
      },
      {
        "desc": "The line join values for the horizontal bars.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the horizontal bars.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line dash offset values for the horizontal bars.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line alpha values for the horizontal bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The x-coordinates of the right edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "right",
        "default": null
      },
      {
        "desc": "The line cap values for the horizontal bars.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "HBar"
  },
  "HoverTool": {
    "proto": "{\"anchor\": \"center\", \"attachment\": \"horizontal\", \"callback\": null, \"formatters\": {}, \"id\": \"24ca17b3-c262-44dd-b529-d569ce3afa92\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_policy\": \"nearest\", \"mode\": \"mouse\", \"name\": null, \"names\": [], \"plot\": null, \"point_policy\": \"snap_to_data\", \"renderers\": [], \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true, \"tooltips\": [[\"index\", \"$index\"], [\"data (x, y)\", \"($x, $y)\"], [\"canvas (x, y)\", \"($sx, $sy)\"]]}",
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The hover tool is a passive inspector tool. It is generally on at\n    all times, but can be configured in the inspector's menu associated\n    with the *toolbar icon* shown above.\n\n    By default, the hover tool displays informational tooltips whenever\n    the cursor is directly over a glyph. The data to show comes from the\n    glyph's data source, and what is to be displayed is configurable with\n    the ``tooltips`` attribute that maps display names to columns in the\n    data source, or to special known variables.\n\n    Here is an example of how to configure and use the hover tool::\n\n        # Add tooltip (name, field) pairs to the tool. See below for a\n        # description of possible field values.\n        hover.tooltips = [\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"radius\", \"@radius\"),\n            (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n            (\"foo\", \"@foo\"),\n            (\"bar\", \"@bar\"),\n            (\"baz\", \"@baz{safe}\"),\n            (\"total\", \"@total{$0,0.00}\"\n        ]\n\n    You can also supply a ``Callback`` to the HoverTool, to build custom\n    interactions on hover. In this case you may want to turn the tooltips\n    off by setting ``tooltips=None``.\n\n    .. warning::\n\n        Hover tool does not currently work with the following glyphs:\n\n        .. hlist::\n            :columns: 3\n\n            * annulus\n            * arc\n            * bezier\n            * image\n            * image_rgba\n            * image_url\n            * oval\n            * patch\n            * quadratic\n            * ray\n            * text\n\n    .. |hover_icon| image:: /_images/icons/Hover.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Inspection"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the input's value changes. The\n    cb_data parameter that is available to the Callback code will contain two\n    HoverTool specific fields:\n\n    :index: object containing the indices of the hovered points in the data source\n    :geometry: object containing the coordinates of the hover cursor",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "Whether to consider hover pointer as a point (x/y values), or a\n    span on h or v directions.",
        "type": "Enum('mouse', 'hline', 'vline')",
        "name": "mode",
        "default": "mouse"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "type": "Bool",
        "name": "toggleable",
        "default": true
      },
      {
        "desc": "When showing tooltips for lines, designates whether the tooltip position\n    should be the \"previous\" or \"next\" points on the line, the \"nearest\" point\n    to the current mouse position, or \"interpolate\" along the line to the\n    current mouse position.",
        "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')",
        "name": "line_policy",
        "default": "nearest"
      },
      {
        "desc": "The (name, field) pairs describing what the hover tool should\n    display when there is a hit.\n\n    Field names starting with \"@\" are interpreted as columns on the\n    data source. For instance, \"@temp\" would look up values to display\n    from the \"temp\" column of the data source.\n\n    Field names starting with \"$\" are special, known fields:\n\n    :$index: index of selected point in the data source\n    :$x: x-coordinate under the cursor in data space\n    :$y: y-coordinate under the cursor in data space\n    :$sx: x-coordinate under the cursor in screen (canvas) space\n    :$sy: y-coordinate under the cursor in screen (canvas) space\n    :$color: color data from data source, with the syntax:\n        ``$color[options]:field_name``. The available options\n        are: 'hex' (to display the color as a hex value), and\n        'swatch' to also display a small color swatch.\n\n    Field names that begin with ``@`` are associated with columns in a\n    ``ColumnDataSource``. For instance the field name ``\"@price\"`` will\n    display values from the ``\"price\"`` column whenever a hover is triggered.\n    If the hover is for the 17th glyph, then the hover tooltip will\n    correspondingly display the 17th price value.\n\n    Note that if a column name contains spaces, the it must be supplied by\n    surrounding it in curly braces, e.g. ``@{adjusted close}`` will display\n    values from a column named ``\"adjusted close\"``.\n\n    By default, values for fields (e.g. ``@foo``) are displayed in a basic\n    numeric format. However it is possible to control the formatting of values\n    more precisely. Fields can be modified by appending a format specified to\n    the end in curly braces. Some examples are below.\n\n    .. code-block:: python\n\n        \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n        \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n        \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\n    Specifying a format ``{safe}`` after a field name will override automatic\n    escaping of the tooltip data source. Any HTML tags in the data tags will\n    be rendered as HTML in the resulting HoverTool output. See\n    :ref:`custom_hover_tooltip` for a more detailed example.\n\n    ``None`` is also a valid value for tooltips. This turns off the\n    rendering of tooltips. This is mostly useful when supplying other\n    actions on hover via the callback property.\n\n    .. note::\n        The tooltips attribute can also be configured with a mapping type,\n        e.g. ``dict`` or ``OrderedDict``. However, if a ``dict`` is used,\n        the visual presentation order is unspecified.",
        "type": "Either(String, List(Tuple(String, String)))",
        "name": "tooltips",
        "default": [
          [
            "index",
            "$index"
          ],
          [
            "data (x, y)",
            "($x, $y)"
          ],
          [
            "canvas (x, y)",
            "($sx, $sy)"
          ]
        ]
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Whether tooltip's arrow should be showed.",
        "type": "Bool",
        "name": "show_arrow",
        "default": true
      },
      {
        "desc": "Whether tooltip's arrow should appear in the horizontal or vertical dimension.",
        "type": "Enum('horizontal', 'vertical')",
        "name": "attachment",
        "default": "horizontal"
      },
      {
        "desc": "Specify the formatting scheme for data source columns, e.g.\n\n    .. code-block:: python\n\n        tool.formatters = dict(date=\"datetime\")\n\n    will cause format specifications for the \"date\" column to be interpreted\n    according to the \"datetime\" formatting scheme. The following schemed are\n    available:\n\n    :``\"numeral\"``:\n        Provides a wide variety of formats for numbers, currency, bytes, times,\n        and percentages. The full set of formats can be found in the\n        |NumeralTickFormatter| reference documentation.\n\n    :``\"datetime\"``:\n        Provides formats for date and time values. The full set of formats is\n        listed in the |DatetimeTickFormatter| reference documentation.\n\n    :``\"printf\"``:\n        Provides formats similar to C-style \"printf\" type specifiers. See the\n        |PrintfTickFormatter| reference documentation for complete details.\n\n    If no formatter is specified for a column name, the default ``\"numeral\"``\n    formatter is assumed.\n\n    .. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n    .. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n    .. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`",
        "type": "Dict(String, Enum('numeral', 'datetime', 'printf'))",
        "name": "formatters",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Whether the tooltip position should snap to the \"center\" (or other anchor)\n    position of the associated glyph, or always follow the current mouse cursor\n    position.",
        "type": "Enum('snap_to_data', 'follow_mouse', 'none')",
        "name": "point_policy",
        "default": "snap_to_data"
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\n    point of a tooltip. The default is to attach to the center of a glyph.",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')",
        "name": "anchor",
        "default": "center"
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "HoverTool"
  },
  "AnnularWedge": {
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"b9f0f64c-cb08-4c18-ba0d-ae2fe0138e41\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render annular wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/AnnularWedge.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The angles to start the annular wedges, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "start_angle",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill alpha values for the annular wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "end_angle_units",
        "default": "rad"
      },
      {
        "desc": "The line color values for the annular wedges.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The fill color values for the annular wedges.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The inner radii of the annular wedges.",
        "type": "DistanceSpec(units_default='data')",
        "name": "inner_radius",
        "default": null
      },
      {
        "desc": "The line alpha values for the annular wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "The outer radii of the annular wedges.",
        "type": "DistanceSpec(units_default='data')",
        "name": "outer_radius",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "outer_radius_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "inner_radius_units",
        "default": "data"
      },
      {
        "desc": "The angles to end the annular wedges, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "end_angle",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "start_angle_units",
        "default": "rad"
      },
      {
        "desc": "Which direction to stroke between the start and end angles.",
        "type": "Enum('clock', 'anticlock')",
        "name": "direction",
        "default": "anticlock"
      },
      {
        "desc": "The line width values for the annular wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the annular wedges.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the annular wedges.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the center of the annular wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the annular wedges.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the annular wedges.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the center of the annular wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "AnnularWedge"
  },
  "TileSource": {
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"d568fffc-eaec-44d4-824e-83737fb0fc3a\", \"initial_resolution\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"x_origin_offset\": null, \"y_origin_offset\": null}",
    "desc": "A base class for all tile source types.\n\n    In general, tile sources are used as a required input for ``TileRenderer``.",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A y-offset in plot coordinates",
        "type": "Float",
        "name": "y_origin_offset",
        "default": null
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "type": "Int",
        "name": "max_zoom",
        "default": 30
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "type": "String",
        "name": "attribution",
        "default": ""
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "type": "Float",
        "name": "initial_resolution",
        "default": null
      },
      {
        "desc": "An x-offset in plot coordinates",
        "type": "Float",
        "name": "x_origin_offset",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "type": "Int",
        "name": "min_zoom",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "type": "Int",
        "name": "tile_size",
        "default": 256
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "type": "String",
        "name": "url",
        "default": ""
      }
    ],
    "name": "TileSource"
  },
  "TickFormatter": {
    "proto": "{\"id\": \"ac9208ca-abf3-4c56-97f8-16799e348b83\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all tick formatter types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "TickFormatter"
  },
  "Spacer": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"1b6bb8b5-32ac-4a37-aac5-422bb4151834\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A container for space used to fill an empty spot in a row or column.",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Spacer"
  },
  "DataRenderer": {
    "proto": "{\"id\": \"22670a6a-36f4-4041-81d5-f9977f544348\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``TileRenderer``).\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "props": [
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "image"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "DataRenderer"
  },
  "VBar": {
    "proto": "{\"bottom\": {\"value\": 0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"d71d4524-f148-4578-9040-0090ad3c0f8d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null, \"width\": null, \"x\": null}",
    "desc": "Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/VBar.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The y-coordinates of the bottom edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "bottom",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The y-coordinates of the top edges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "top",
        "default": null
      },
      {
        "desc": "The line width values for the vertical bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the vertical bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the vertical bars.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the vertical bars.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the vertical bars.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the vertical bars.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The fill color values for the vertical bars.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The widths of the vertical bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "width",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The line alpha values for the vertical bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line cap values for the vertical bars.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the centers of the vertical bars.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "VBar"
  },
  "CircleX": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"ef5791d4-3175-4b2b-9d21-52d15d6fbed2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render circle markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/CircleX.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CircleX"
  },
  "ResetTool": {
    "proto": "{\"id\": \"7a184c3a-54f1-4e05-80a6-485f68374664\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"reset_size\": true, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |reset_icon|\n\n    The reset tool is an action. When activated in the toolbar, the tool\n    resets the data bounds of the plot to their values when the plot was\n    initially created.\n\n    Optionally, the reset tool also resets the plat canvas dimensions to\n    their original size\n\n    .. |reset_icon| image:: /_images/icons/Reset.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "Whether activating the Reset tool should also reset the plot's canvas\n    dimensions to their original size.",
        "type": "Bool",
        "name": "reset_size",
        "default": true
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "ResetTool"
  },
  "Asterisk": {
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"64b5cae3-92aa-4c28-8bcd-5dd9e3602ee1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render asterisk '*' markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Asterisk.py\n        :source-position: below",
    "bases": [
      "bokeh.models.markers.Marker"
    ],
    "props": [
      {
        "desc": "The size (diameter) values for the markers in screen space units.",
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "size",
        "default": 4
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The fill alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash values for the markers.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line dash offset values for the markers.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The fill color values for the markers.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "The line join values for the markers.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "The line alpha values for the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the markers.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0.0
      },
      {
        "desc": "The line cap values for the markers.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-axis coordinates for the center of the markers.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Asterisk"
  },
  "TeeHead": {
    "proto": "{\"id\": \"42a736e9-a2de-471f-9e88-179cff1787bd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a tee-style arrow head.",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "props": [
      {
        "desc": "The size, in pixels, of the arrow head.",
        "type": "Float",
        "name": "size",
        "default": 25
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The line width values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The line dash values for the arrow head outline.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the arrow head outline.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line color values for the arrow head outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "The line join values for the arrow head outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the arrow head outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the arrow head outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "TeeHead"
  },
  "WMTSTileSource": {
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"97f66a5e-1759-4039-a480-0075daa0a68c\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The ``WMTSTileSource`` behaves much like ``TMSTileSource`` but has its\n    tile-origin in the top-left.\n\n    This is the most common used tile source for web mapping applications.\n    Such companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\n    service which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``.",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "props": [
      {
        "desc": "A y-offset in plot coordinates",
        "type": "Float",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "type": "Int",
        "name": "max_zoom",
        "default": 30
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "type": "String",
        "name": "attribution",
        "default": ""
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "type": "Bool",
        "name": "wrap_around",
        "default": true
      },
      {
        "desc": "An x-offset in plot coordinates",
        "type": "Float",
        "name": "x_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "type": "Int",
        "name": "min_zoom",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "type": "String",
        "name": "url",
        "default": ""
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "type": "Int",
        "name": "tile_size",
        "default": 256
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "type": "Float",
        "name": "initial_resolution",
        "default": 156543.03392804097
      }
    ],
    "name": "WMTSTileSource"
  },
  "QUADKEYTileSource": {
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"5e2a6f2d-e52a-4068-b1fb-971e65f27818\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The QUADKEYTileSource has the same tile origin as the WMTSTileSource\n    but requests tiles using a `quadkey` argument instead of X, Y, Z e.g. ``http://your.quadkey.tile.host/{Q}.png``",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "props": [
      {
        "desc": "A y-offset in plot coordinates",
        "type": "Float",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "type": "Int",
        "name": "max_zoom",
        "default": 30
      },
      {
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "type": "Dict(String, Any)",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Data provider attribution content. This can include HTML content.",
        "type": "String",
        "name": "attribution",
        "default": ""
      },
      {
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "type": "Bool",
        "name": "wrap_around",
        "default": true
      },
      {
        "desc": "An x-offset in plot coordinates",
        "type": "Float",
        "name": "x_origin_offset",
        "default": 20037508.34
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "type": "Int",
        "name": "min_zoom",
        "default": 0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "type": "String",
        "name": "url",
        "default": ""
      },
      {
        "desc": "Tile size in pixels (e.g. 256)",
        "type": "Int",
        "name": "tile_size",
        "default": 256
      },
      {
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "type": "Float",
        "name": "initial_resolution",
        "default": 156543.03392804097
      }
    ],
    "name": "QUADKEYTileSource"
  },
  "ContinuousTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"bbc34ff1-bdd2-4207-9315-59f88c53b23d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for non-categorical ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "props": [
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "ContinuousTicker"
  },
  "ToolbarBase": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"08ee669e-60d6-491b-9d38-c21bd23f0ccc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"sizing_mode\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": [], \"width\": null}",
    "desc": "A base class for different toolbars.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": null
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "type": "Enum('normal', 'grey')",
        "name": "logo",
        "default": "normal"
      },
      {
        "desc": "A list of tools to add to the plot.",
        "type": "List(Instance(Tool))",
        "name": "tools",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "ToolbarBase"
  },
  "LassoSelectTool": {
    "proto": "{\"callback\": null, \"id\": \"2c3917ba-844a-4b55-b90e-88fa7589f5f9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"76803597-b346-46ff-afcb-dc71e6a1439a\", \"type\": \"PolyAnnotation\"}, \"plot\": null, \"renderers\": [], \"select_every_mousemove\": true, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |lasso_select_icon|\n\n    The lasso selection tool allows users to make selections on a\n    Plot by indicating a free-drawn \"lasso\" region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser on every selection of a lasso area.\n    The cb_data parameter that is available to the Callback code will contain\n    one LassoSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the lasso area",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "type": "List(String)",
        "name": "names",
        "default": []
      },
      {
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: True",
        "type": "Bool",
        "name": "select_every_mousemove",
        "default": true
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "type": "Instance(PolyAnnotation)",
        "name": "overlay",
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"40cf1b73-39e7-476b-b3d7-f4cd2c0fc485\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      }
    ],
    "name": "LassoSelectTool"
  },
  "CompositeTicker": {
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"0be6dad3-4965-4c87-b191-0ffdd5fa603f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"tickers\": []}",
    "desc": "Combine different tickers at different scales.\n\n    Uses the ``min_interval`` and ``max_interval`` interval attributes\n    of the tickers to select the appropriate ticker at different\n    scales.",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "props": [
      {
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()",
        "type": "Seq(Instance(Ticker))",
        "name": "tickers",
        "default": []
      },
      {
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "type": "Int",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "type": "Int",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "CompositeTicker"
  },
  "ImageRGBA": {
    "proto": "{\"cols\": null, \"dh\": null, \"dilate\": false, \"dw\": null, \"id\": \"35cd008c-6197-4c80-a182-6453f4e40a9a\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"rows\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render images given as RGBA data.",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The numbers of columns in the images",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "cols",
        "default": null
      },
      {
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.",
        "type": "DistanceSpec(units_default='data')",
        "name": "dh",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "type": "Bool",
        "name": "dilate",
        "default": false
      },
      {
        "desc": "The numbers of rows in the images",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "rows",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The y-coordinates to locate the image anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "dh_units",
        "default": "data"
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "dw_units",
        "default": "data"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The arrays of RGBA data for the images.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "image",
        "default": null
      },
      {
        "desc": "The x-coordinates to locate the image anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.",
        "type": "DistanceSpec(units_default='data')",
        "name": "dw",
        "default": null
      }
    ],
    "name": "ImageRGBA"
  },
  "NumberFormatter": {
    "proto": "{\"font_style\": \"normal\", \"format\": \"0,0\", \"id\": \"9f19e8c1-4785-4c1d-9594-7abe2ad52d82\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}",
    "desc": "Number cell formatter.",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "props": [
      {
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details.",
        "type": "Color",
        "name": "text_color",
        "default": null
      },
      {
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "name": "language",
        "default": "en"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An optional text font style, e.g. bold, italic.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "font_style",
        "default": "normal"
      },
      {
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html",
        "type": "String",
        "name": "format",
        "default": "0,0"
      },
      {
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "name": "rounding",
        "default": "round"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An optional text align, i.e. left, center or right.",
        "type": "Enum('left', 'right', 'center')",
        "name": "text_align",
        "default": "left"
      }
    ],
    "name": "NumberFormatter"
  },
  "CheckboxEditor": {
    "proto": "{\"id\": \"b2d294ef-c2ec-48f6-a18b-08588ca4c4b4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Boolean value cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CheckboxEditor"
  },
  "PrintfTickFormatter": {
    "proto": "{\"format\": \"%s\", \"id\": \"857247e4-7c95-4f37-899e-038682238122\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Tick formatter based on a printf-style format string.",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "props": [
      {
        "desc": "The number format, as defined as follows: the placeholder in the format\n    string is marked by % and is followed by one or more of these elements,\n    in this order:\n\n    * An optional ``+`` sign\n        Causes the result to be preceded with a plus or minus sign on numeric\n        values. By default, only the ``-`` sign is used on negative numbers.\n\n    * An optional padding specifier\n        Specifies what (if any) character to use for padding. Possible values\n        are 0 or any other character preceded by a ``'`` (single quote). The\n        default is to pad with spaces.\n\n    * An optional ``-`` sign\n        Causes sprintf to left-align the result of this placeholder. The default\n        is to right-align the result.\n\n    * An optional number\n        Specifies how many characters the result should have. If the value to be\n        returned is shorter than this number, the result will be padded.\n\n    * An optional precision modifier\n        Consists of a ``.`` (dot) followed by a number, specifies how many digits\n        should be displayed for floating point numbers. When used on a string, it\n        causes the result to be truncated.\n\n    * A type specifier\n        Can be any of:\n\n        - ``%`` --- yields a literal ``%`` character\n        - ``b`` --- yields an integer as a binary number\n        - ``c`` --- yields an integer as the character with that ASCII value\n        - ``d`` or ``i`` --- yields an integer as a signed decimal number\n        - ``e`` --- yields a float using scientific notation\n        - ``u`` --- yields an integer as an unsigned decimal number\n        - ``f`` --- yields a float as is\n        - ``o`` --- yields an integer as an octal number\n        - ``s`` --- yields a string as is\n        - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n        - ``X`` --- yields an integer as a hexadecimal number (upper-case)",
        "type": "String",
        "name": "format",
        "default": "%s"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "PrintfTickFormatter"
  },
  "StringFormatter": {
    "proto": "{\"font_style\": \"normal\", \"id\": \"041fe1b8-aa64-4ea5-ab6e-d4a9d859251e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}",
    "desc": "Basic string cell formatter.",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "props": [
      {
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details.",
        "type": "Color",
        "name": "text_color",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "An optional text font style, e.g. bold, italic.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "font_style",
        "default": "normal"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An optional text align, i.e. left, center or right.",
        "type": "Enum('left', 'right', 'center')",
        "name": "text_align",
        "default": "left"
      }
    ],
    "name": "StringFormatter"
  },
  "ImageURL": {
    "proto": "{\"anchor\": \"top_left\", \"angle\": {\"units\": \"rad\", \"value\": 0}, \"dilate\": false, \"global_alpha\": 1.0, \"h\": null, \"id\": \"a04de5ae-dbf8-4cfd-a3fd-479eda13276a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"retry_attempts\": 0, \"retry_timeout\": 0, \"subscribed_events\": [], \"tags\": [], \"url\": null, \"w\": null, \"x\": null, \"y\": null}",
    "desc": "Render images loaded from given URLs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/ImageURL.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).",
        "type": "DistanceSpec(units_default='data')",
        "name": "h",
        "default": null
      },
      {
        "desc": "Number of attempts to retry loading the images from the specified URL.\n    Default is zero.",
        "type": "Int",
        "name": "retry_attempts",
        "default": 0
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Timeout (in ms) between retry attempts to load the image from the\n    specified URL. Default is zero ms.",
        "type": "Int",
        "name": "retry_timeout",
        "default": 0
      },
      {
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "type": "Bool",
        "name": "dilate",
        "default": false
      },
      {
        "desc": "The URLs to retrieve images from.\n\n    .. note::\n        The actual retrieving and loading of the images happens on\n        the client.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "url",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "The y-coordinates to locate the image anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself).",
        "type": "Float",
        "name": "global_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "What position of the image should be anchored at the `x`, `y`\n    coordinates.",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')",
        "name": "anchor",
        "default": "top_left"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to rotate the images, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "angle",
        "default": 0
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "w_units",
        "default": "data"
      },
      {
        "desc": "The x-coordinates to locate the image anchors.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      },
      {
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).",
        "type": "DistanceSpec(units_default='data')",
        "name": "w",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "h_units",
        "default": "data"
      }
    ],
    "name": "ImageURL"
  },
  "Wedge": {
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"8f79d7e7-93a2-44ae-a775-877598dd767c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Wedge.py\n        :source-position: below",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ],
    "props": [
      {
        "desc": "The angles to start the wedges, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "start_angle",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill alpha values for the wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "end_angle_units",
        "default": "rad"
      },
      {
        "desc": "The line color values for the wedges.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "black"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Radii of the wedges.",
        "type": "DistanceSpec(units_default='data')",
        "name": "radius",
        "default": null
      },
      {
        "desc": "The fill color values for the wedges.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line alpha values for the wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "desc": "",
        "type": "Enum('screen', 'data')",
        "name": "radius_units",
        "default": "data"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The angles to end the wedges, as measured from the horizontal.",
        "type": "AngleSpec(units_default='rad')",
        "name": "end_angle",
        "default": null
      },
      {
        "desc": "",
        "type": "Enum('deg', 'rad')",
        "name": "start_angle_units",
        "default": "rad"
      },
      {
        "desc": "Which direction to stroke between the start and end angles.",
        "type": "Enum('clock', 'anticlock')",
        "name": "direction",
        "default": "anticlock"
      },
      {
        "desc": "The line width values for the wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The line dash values for the wedges.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the wedges.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The y-coordinates of the points of the wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "y",
        "default": null
      },
      {
        "desc": "The line join values for the wedges.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line cap values for the wedges.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The x-coordinates of the points of the wedges.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "x",
        "default": null
      }
    ],
    "name": "Wedge"
  },
  "ZoomOutTool": {
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"a5c700f4-09b1-41b4-9207-2dba3f0a933e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |zoom_out_icon|\n\n    The zoom-out tool allows users to click a button to zoom out\n    by a fixed amount.\n\n    .. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "type": "Percent",
        "name": "factor",
        "default": 0.1
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Which dimensions the zoom-out tool is constrained to act in. By\n    default the zoom-out tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "type": "Enum('width', 'height', 'both')",
        "name": "dimensions",
        "default": "both"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "ZoomOutTool"
  },
  "CellFormatter": {
    "proto": "{\"id\": \"9b24fb6e-0af2-45b8-84e4-c5fa78d2190e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Abstract base class for data table's cell formatters.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CellFormatter"
  },
  "Jitter": {
    "proto": "{\"distribution\": \"uniform\", \"id\": \"68362dbc-13ef-4582-8d22-d072bcbb5c0c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mean\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": 1}",
    "desc": "Apply either a uniform or normally sampled random jitter to data.",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The central value for the random sample",
        "type": "Float",
        "name": "mean",
        "default": 0
      },
      {
        "desc": "The width (absolute for uniform distribution and sigma for the normal distribution) of the random sample.",
        "type": "Float",
        "name": "width",
        "default": 1
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The random distribution upon which to pull the random scatter",
        "type": "Enum('uniform', 'normal')",
        "name": "distribution",
        "default": "uniform"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "Jitter"
  },
  "RedoTool": {
    "proto": "{\"id\": \"3782deed-3e4b-4aa6-9267-5c11dbc3780f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |redo_icon|\n\n    Redo tool reverses the last action performed by undo tool.\n\n    .. |redo_icon| image:: /_images/icons/Redo.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "RedoTool"
  },
  "CellEditor": {
    "proto": "{\"id\": \"89377bcf-336f-41d0-8584-d4995ad0e7ad\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Abstract base class for data table's cell editors.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "CellEditor"
  },
  "ButtonGroup": {
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"8547afa4-b98e-4b8b-8a48-43628eae75ae\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for groups with items rendered as buttons.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of text labels contained in this group.",
        "type": "List(String)",
        "name": "labels",
        "default": []
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "ButtonGroup"
  },
  "TableColumn": {
    "proto": "{\"default_sort\": \"ascending\", \"editor\": {\"id\": \"8c0ab084-5a2d-4ad4-9467-1bdcf0f2ac33\", \"type\": \"StringEditor\"}, \"field\": null, \"formatter\": {\"id\": \"61d99932-e39a-4c30-bce8-d7bcd8c2beae\", \"type\": \"StringFormatter\"}, \"id\": \"6b9a9d2c-9470-418c-9f2c-509ea3261478\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sortable\": true, \"subscribed_events\": [], \"tags\": [], \"title\": null, \"width\": 300}",
    "desc": "Table column widget.",
    "bases": [
      "bokeh.model.Model"
    ],
    "props": [
      {
        "desc": "The cell editor for this column. By default, a simple string editor\n    is used.",
        "type": "Instance(CellEditor)",
        "name": "editor",
        "default": "{\"id\": \"ef79f7c3-107e-4c92-949f-470a0687ff52\"}"
      },
      {
        "desc": "The cell formatter for this column. By default, a simple string\n    formatter is used.",
        "type": "Instance(CellFormatter)",
        "name": "formatter",
        "default": "{\"id\": \"b6b22203-75df-4ebf-9037-86ffc02802bb\"}"
      },
      {
        "desc": "The name of the field mapping to a column in the data source.",
        "type": "String",
        "name": "field",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Whether this column is sortable or not. Note that data table has\n    to have sorting enabled to allow sorting in general.",
        "type": "Bool",
        "name": "sortable",
        "default": true
      },
      {
        "desc": "The title of this column. If not set, column's data field is\n    used instead.",
        "type": "String",
        "name": "title",
        "default": null
      },
      {
        "desc": "The width or maximum width (depending on data table's configuration)\n    in pixels of this column.",
        "type": "Int",
        "name": "width",
        "default": 300
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The default sorting order. By default ``ascending`` order is used.",
        "type": "Enum('ascending', 'descending')",
        "name": "default_sort",
        "default": "ascending"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "TableColumn"
  },
  "NumberEditor": {
    "proto": "{\"id\": \"742908ff-f418-48c4-8543-67313de76535\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 0.01, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Spinner-based number cell editor.",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The major step value.",
        "type": "Float",
        "name": "step",
        "default": 0.01
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "NumberEditor"
  },
  "ResizeTool": {
    "proto": "{\"id\": \"b9c43c94-39a9-40ef-af17-35373b90f796\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |resize_icon|\n\n    The resize tool allows the user to left-drag a mouse or drag a finger\n    to resize the entire plot area on the screen.\n\n    .. |resize_icon| image:: /_images/icons/Resize.png\n        :height: 18pt",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "ResizeTool"
  },
  "HelpTool": {
    "proto": "{\"help_tooltip\": \"Click the question mark to learn more about Bokeh plot tools.\", \"id\": \"13225307-25c8-43b5-b815-b2a22205ca93\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"redirect\": \"http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools\", \"subscribed_events\": [], \"tags\": []}",
    "desc": "A button tool to provide a \"help\" link to users.\n\n    The hover text can be customized through the ``help_tooltip`` attribute\n    and the redirect site overridden as well.",
    "bases": [
      "bokeh.models.tools.Action"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "Site to be redirected through upon click.",
        "type": "String",
        "name": "redirect",
        "default": "http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools"
      },
      {
        "desc": "Tooltip displayed when hovering over the help icon.",
        "type": "String",
        "name": "help_tooltip",
        "default": "Click the question mark to learn more about Bokeh plot tools."
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "HelpTool"
  },
  "Toggle": {
    "proto": "{\"active\": false, \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"f13b0cc0-efdb-43c9-a083-428674438fb3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Toggle\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A two-state toggle button.",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "props": [
      {
        "desc": "A callback to run in the browser whenever the button is activated.",
        "type": "Instance(Callback)",
        "name": "callback",
        "default": null
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text label for the button to display.",
        "type": "String",
        "name": "label",
        "default": "Toggle"
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "A style for the button, signifying it's role.",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "name": "button_type",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The initial state of a button. Also used to trigger ``on_click`` event\n    handler.",
        "type": "Bool",
        "name": "active",
        "default": false
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional image appearing to the left of button's text.",
        "type": "Instance(AbstractIcon)",
        "name": "icon",
        "default": null
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Toggle"
  },
  "PolyAnnotation": {
    "proto": "{\"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"3b44bc17-ecfd-46e0-83d3-f7672f48353d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"xs\": [], \"xs_units\": \"data\", \"y_range_name\": \"default\", \"ys\": [], \"ys_units\": \"data\"}",
    "desc": "Render a shaded polygonal region as an annotation.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range.",
        "type": "String",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "desc": "The fill alpha values for the polygon.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "fill_alpha",
        "default": 0.4
      },
      {
        "desc": "The x-coordinates of the region to draw.",
        "type": "Seq(Float)",
        "name": "xs",
        "default": []
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "ys_units",
        "default": "data"
      },
      {
        "desc": "The line color values for the polygon.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "line_color",
        "default": "#cccccc"
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The fill color values for the polygon.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "fill_color",
        "default": "#fff9ba"
      },
      {
        "desc": "The line alpha values for the polygon.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_alpha",
        "default": 0.3
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The line cap values for the polygon.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "desc": "The line width values for the polygon.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "line_width",
        "default": 1
      },
      {
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default.",
        "type": "Enum('screen', 'data')",
        "name": "xs_units",
        "default": "data"
      },
      {
        "desc": "The y-coordinates of the region to draw.",
        "type": "Seq(Float)",
        "name": "ys",
        "default": []
      },
      {
        "desc": "The line dash values for the polygon.",
        "type": "DashPattern",
        "name": "line_dash",
        "default": []
      },
      {
        "desc": "The line dash offset values for the polygon.",
        "type": "Int",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join values for the polygon.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "line_join",
        "default": "miter"
      },
      {
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range.",
        "type": "String",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      }
    ],
    "name": "PolyAnnotation"
  },
  "Action": {
    "proto": "{\"id\": \"b2957212-f9ae-4de3-b942-5fb9a3a204a9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that are buttons in the toolbar.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "props": [
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The Plot that this tool will act on.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      }
    ],
    "name": "Action"
  },
  "ColorBar": {
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"bar_line_alpha\": {\"value\": 1.0}, \"bar_line_cap\": \"butt\", \"bar_line_color\": {\"value\": null}, \"bar_line_dash\": [], \"bar_line_dash_offset\": 0, \"bar_line_join\": \"miter\", \"bar_line_width\": {\"value\": 1}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"color_mapper\": null, \"formatter\": {\"id\": \"97c09051-d582-410c-9503-d78dfd484d2f\", \"type\": \"BasicTickFormatter\"}, \"height\": \"auto\", \"id\": \"be739deb-f5c9-4a3a-ab1b-5424f894f0a9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_standoff\": 5, \"level\": \"annotation\", \"location\": \"top_right\", \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"middle\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 5, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"#ffffff\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 0, \"margin\": 30, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": null}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 0, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"scale_alpha\": 1.0, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"36c40d14-54f0-4610-a600-b91ec118593b\", \"type\": \"BasicTicker\"}, \"title\": null, \"title_standoff\": 2, \"title_text_align\": \"left\", \"title_text_alpha\": {\"value\": 1.0}, \"title_text_baseline\": \"bottom\", \"title_text_color\": {\"value\": \"#444444\"}, \"title_text_font\": \"helvetica\", \"title_text_font_size\": {\"value\": \"10pt\"}, \"title_text_font_style\": \"italic\", \"visible\": true, \"width\": \"auto\"}",
    "desc": "Render a color bar based on a color mapper.",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "props": [
      {
        "desc": "The line dash for the color bar border outline.",
        "type": "DashPattern",
        "name": "border_line_dash",
        "default": []
      },
      {
        "desc": "The fill color for the color bar background style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The text baseline of the major tick labels.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "major_label_text_baseline",
        "default": "middle"
      },
      {
        "desc": "The text alpha of the major tick labels.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "desc": "Specifies the level in which to paint this renderer.",
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "name": "level",
        "default": "annotation"
      },
      {
        "desc": "The alpha with which to render the color scale.",
        "type": "Float",
        "name": "scale_alpha",
        "default": 1.0
      },
      {
        "desc": "The text color of the major tick labels.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_out",
        "default": 0
      },
      {
        "desc": "A continuous color mapper containing a color palette to render.\n\n    .. warning::\n        If the `low` and `high` attributes of the ColorMapper aren't set, ticks\n        and tick labels won't be rendered. Additionally, if a LogTicker is\n        passed to the `ticker` argument and either or both of the logarithms\n        of `low` and `high` values of the color_mapper are non-numeric\n        (i.e. `low=0`), the tick and tick labels won't be rendered.",
        "type": "Instance(ContinuousColorMapper)",
        "name": "color_mapper",
        "default": null
      },
      {
        "desc": "The line alpha of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The line dash for the color scale bar outline.",
        "type": "DashPattern",
        "name": "bar_line_dash",
        "default": []
      },
      {
        "desc": "Whether the color bar should be oriented vertically or horizontally.",
        "type": "Enum('horizontal', 'vertical')",
        "name": "orientation",
        "default": "vertical"
      },
      {
        "desc": "The text color values for the title text.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "title_text_color",
        "default": "#444444"
      },
      {
        "desc": "The text font style of the major tick labels.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "desc": "Is the renderer visible.",
        "type": "Bool",
        "name": "visible",
        "default": true
      },
      {
        "desc": "The distance (in pixels) to separate the tick labels from the color bar.",
        "type": "Int",
        "name": "label_standoff",
        "default": 5
      },
      {
        "desc": "The text alpha values for the title text.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "title_text_alpha",
        "default": 1.0
      },
      {
        "desc": "The text font size values for the title text.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "title_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "desc": "The line cap for the color scale bar outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "bar_line_cap",
        "default": "butt"
      },
      {
        "desc": "The line alpha for the color scale bar outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "bar_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The fill alpha for the color bar background style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 0.95
      },
      {
        "desc": "The text align values for the title text.",
        "type": "Enum('left', 'right', 'center')",
        "name": "title_text_align",
        "default": "left"
      },
      {
        "desc": "The line cap of the major ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The text font size of the major tick labels.",
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "desc": "The line width for the color bar border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_width",
        "default": 1
      },
      {
        "desc": "The line dash of the minor ticks.",
        "type": "DashPattern",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "desc": "The line cap of the minor ticks.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "desc": "The location where the color bar should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).\n\n    .. warning::\n        If the color bar is placed in a side panel, the location will likely\n        have to be set to `(0,0)`.",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))",
        "name": "location",
        "default": "top_right"
      },
      {
        "desc": "The text font style values for the title text.",
        "type": "Enum('normal', 'italic', 'bold')",
        "name": "title_text_font_style",
        "default": "italic"
      },
      {
        "desc": "The line alpha for the color bar border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_line_alpha",
        "default": 1.0
      },
      {
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_out",
        "default": 0
      },
      {
        "desc": "A TickFormatter to use for formatting the visual appearance of ticks.",
        "type": "Instance(TickFormatter)",
        "name": "formatter",
        "default": "{\"id\": \"0cf9716e-ecf5-47ae-ae9d-a3ae83cb0d57\"}"
      },
      {
        "desc": "The distance (in pixels) to separate the title from the color bar.",
        "type": "Int",
        "name": "title_standoff",
        "default": 2
      },
      {
        "desc": "The line dash offset for the color scale bar outline.",
        "type": "Int",
        "name": "bar_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line dash offset of the minor ticks.",
        "type": "Int",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line join of the minor ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "The line join of the major ticks.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "desc": "Amount of margin (in pixels) around the outside of the color bar.",
        "type": "Int",
        "name": "margin",
        "default": 30
      },
      {
        "desc": "The title text to render.",
        "type": "String",
        "name": "title",
        "default": null
      },
      {
        "desc": "The distance (in pixels) that minor ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "desc": "The line join for the color bar border outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "desc": "The width (in pixels) that the color scale should occupy.",
        "type": "Either(Auto, Int)",
        "name": "width",
        "default": "auto"
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The text font of the major tick labels.",
        "type": "String",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line width for the color scale bar outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "bar_line_width",
        "default": 1
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "The line color for the color bar border outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_line_color",
        "default": null
      },
      {
        "desc": "A Ticker to use for computing locations of axis components.",
        "type": "Instance(Ticker)",
        "name": "ticker",
        "default": "{\"id\": \"c0112d8f-5e00-4a9f-bc54-0023733ecdff\"}"
      },
      {
        "desc": "The line width of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "desc": "The line join for the color scale bar outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "bar_line_join",
        "default": "miter"
      },
      {
        "desc": "The text font values for the title text.",
        "type": "String",
        "name": "title_text_font",
        "default": "helvetica"
      },
      {
        "desc": "The line color for the color scale bar outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "bar_line_color",
        "default": null
      },
      {
        "desc": "The line color of the minor ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "minor_tick_line_color",
        "default": null
      },
      {
        "desc": "Amount of padding (in pixels) between the color scale and color bar border.",
        "type": "Int",
        "name": "padding",
        "default": 10
      },
      {
        "desc": "The text baseline values for the title text.",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "name": "title_text_baseline",
        "default": "bottom"
      },
      {
        "desc": "The line dash of the major ticks.",
        "type": "DashPattern",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "desc": "The distance (in pixels) that major ticks should extend into the\n    main plot area.",
        "type": "Int",
        "name": "major_tick_in",
        "default": 5
      },
      {
        "desc": "The line dash offset for the color bar border outline.",
        "type": "Int",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line dash offset of the major ticks.",
        "type": "Int",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "desc": "The line cap for the color bar border outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "desc": "The height (in pixels) that the color scale should occupy.",
        "type": "Either(Auto, Int)",
        "name": "height",
        "default": "auto"
      },
      {
        "desc": "The line alpha of the minor ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "The line color of the major ticks.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "major_tick_line_color",
        "default": "#ffffff"
      },
      {
        "desc": "The line width of the major ticks.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "desc": "The plot to which this annotation is attached.",
        "type": "Instance(Plot)",
        "name": "plot",
        "default": null
      },
      {
        "desc": "The text align of the major tick labels.",
        "type": "Enum('left', 'right', 'center')",
        "name": "major_label_text_align",
        "default": "center"
      }
    ],
    "name": "ColorBar"
  },
  "Paragraph": {
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ceeee02f-bc84-4e90-953d-3bcfd171973d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "A block (paragraph) of text.\n\n    This Bokeh model corresponds to an HTML ``<p>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_paragraph.py\n        :source-position: below",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "props": [
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The contents of the widget.",
        "type": "String",
        "name": "text",
        "default": ""
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      }
    ],
    "name": "Paragraph"
  },
  "MapPlot": {
    "proto": "{\"above\": [], \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"31bbcecc-95ea-48ae-bdb2-851a64ccb745\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"d3d5ffd2-3793-4297-8e7c-38ef2dde9859\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"94359ab5-bad9-41a6-a1e4-bc1d8177ff1c\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"31f61b82-ce20-489c-9517-9a691427920a\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"573d5176-67b0-40d4-85f5-ef721614d985\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"d779e752-e535-48d8-950a-7aef62510472\", \"type\": \"LinearScale\"}}",
    "desc": "Abstract base class for map plot models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "bases": [
      "bokeh.models.plots.Plot"
    ],
    "props": [
      {
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "title_location",
        "default": "above"
      },
      {
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "type": "Dict(String, Instance(Range))",
        "name": "extra_y_ranges",
        "default": {}
      },
      {
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "left",
        "default": []
      },
      {
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_top",
        "default": null
      },
      {
        "desc": "The fill color for the plot background style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "type": "String",
        "name": "name",
        "default": null
      },
      {
        "desc": "The fill color for the plot border style.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "border_fill_color",
        "default": "#ffffff"
      },
      {
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "type": "Instance(Range)",
        "name": "x_range",
        "default": null
      },
      {
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "inner_height",
        "default": null
      },
      {
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "right",
        "default": []
      },
      {
        "desc": "The fill alpha for the plot border style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "border_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "type": "Int",
        "name": "plot_height",
        "default": 600
      },
      {
        "desc": "A ToolEvents object to share and report tool events.",
        "type": "Instance(ToolEvents)",
        "name": "tool_events",
        "default": null
      },
      {
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "type": "Enum('above', 'below', 'left', 'right')",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "type": "Int",
        "name": "plot_width",
        "default": 600
      },
      {
        "desc": "A list of renderers to occupy the area above of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "above",
        "default": []
      },
      {
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "type": "Instance(Scale)",
        "name": "x_scale",
        "default": "{\"id\": \"4e0aafb4-0f4f-47d1-b2bb-91d6708314a6\"}"
      },
      {
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_bottom",
        "default": null
      },
      {
        "desc": "The fill alpha for the plot background style.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "type": "Bool",
        "name": "toolbar_sticky",
        "default": true
      },
      {
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_left",
        "default": null
      },
      {
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "type": "List(String)",
        "name": "subscribed_events",
        "default": []
      },
      {
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "type": "Bool",
        "name": "disabled",
        "default": false
      },
      {
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "type": "List(Instance(Renderer))",
        "name": "renderers",
        "default": []
      },
      {
        "desc": "A list of renderers to occupy the area below of the plot.",
        "type": "List(Instance(Renderer))",
        "name": "below",
        "default": []
      },
      {
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "type": "Int",
        "name": "min_border_right",
        "default": null
      },
      {
        "desc": "The line alpha for the plot border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "outline_line_alpha",
        "default": 1.0
      },
      {
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "type": "Instance(Title)",
        "name": "title",
        "default": "{\"id\": \"ea38db4d-37eb-4c21-8d59-2bf799bb5f8e\", \"text\": \"\"}"
      },
      {
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "type": "Instance(Range)",
        "name": "y_range",
        "default": null
      },
      {
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "type": "Dict(String, Instance(Range))",
        "name": "extra_x_ranges",
        "default": {}
      },
      {
        "desc": "An optional width for the component (in pixels).",
        "type": "Int",
        "name": "width",
        "default": null
      },
      {
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "type": "Int",
        "name": "lod_factor",
        "default": 10
      },
      {
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "type": "List(Any)",
        "name": "tags",
        "default": []
      },
      {
        "desc": "The line cap for the plot border outline.",
        "type": "Enum('butt', 'round', 'square')",
        "name": "outline_line_cap",
        "default": "butt"
      },
      {
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "type": "Int",
        "name": "min_border",
        "default": 5
      },
      {
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "type": "Int",
        "name": "lod_timeout",
        "default": 500
      },
      {
        "desc": "The line join for the plot border outline.",
        "type": "Enum('miter', 'round', 'bevel')",
        "name": "outline_line_join",
        "default": "miter"
      },
      {
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "type": "Int",
        "name": "lod_threshold",
        "default": 2000
      },
      {
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "type": "Seq(String)",
        "name": "css_classes",
        "default": null
      },
      {
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "name": "output_backend",
        "default": "canvas"
      },
      {
        "desc": "The line dash for the plot border outline.",
        "type": "DashPattern",
        "name": "outline_line_dash",
        "default": []
      },
      {
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "type": "Instance(Toolbar)",
        "name": "toolbar",
        "default": null
      },
      {
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "type": "Bool",
        "name": "h_symmetry",
        "default": true
      },
      {
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "type": "Instance(Scale)",
        "name": "y_scale",
        "default": "{\"id\": \"b2c3d461-0f54-42ec-be06-0e3f31e56054\"}"
      },
      {
        "desc": "The line width for the plot border outline.",
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "name": "outline_line_width",
        "default": 1
      },
      {
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "layout_height",
        "default": null
      },
      {
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "desc": "An optional height for the component (in pixels).",
        "type": "Int",
        "name": "height",
        "default": null
      },
      {
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "type": "Int",
        "name": "lod_interval",
        "default": 300
      },
      {
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "inner_width",
        "default": null
      },
      {
        "desc": "Whether to use HiDPI mode when available.",
        "type": "Bool",
        "name": "hidpi",
        "default": true
      },
      {
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "type": "Int",
        "name": "layout_width",
        "default": null
      },
      {
        "desc": "The line color for the plot border outline.",
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "name": "outline_line_color",
        "default": "#e5e5e5"
      },
      {
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "type": "Bool",
        "name": "v_symmetry",
        "default": false
      },
      {
        "desc": "The line dash offset for the plot border outline.",
        "type": "Int",
        "name": "outline_line_dash_offset",
        "default": 0
      }
    ],
    "name": "MapPlot"
  }
}
