{
  "Annotation": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      }
    ],
    "proto": "{\"id\": \"db3350d9-008f-4a1e-b47a-1719d71b732c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Base class for all annotation models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Annotation",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ]
  },
  "LogColorMapper": {
    "props": [
      {
        "type": "Color",
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "name": "high_color",
        "default": null
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "name": "low_color",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "name": "high",
        "default": null
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "type": "Float",
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "name": "low",
        "default": null
      },
      {
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "default": null
      }
    ],
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"087f1995-2e59-4698-865e-aaa889323468\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Map numbers in a range [*low*, *high*] into a\n    sequence of colors (a palette) on a natural logarithm scale.\n\n    For example, if the range is [0, 25] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as\n    follows::\n\n                x < 0     : 'red'     # values < low are clamped\n       0     >= x < 2.72  : 'red'     # math.e ** 1\n       2.72  >= x < 7.39  : 'green'   # math.e ** 2\n       7.39  >= x < 20.09 : 'blue'    # math.e ** 3\n       20.09 >= x         : 'blue'    # values > high are clamped\n\n    .. warning::\n        The LogColorMapper only works for images with scalar values that are\n        non-negative.",
    "name": "LogColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ]
  },
  "Button": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(AbstractIcon)",
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The text label for the button to display.",
        "name": "label",
        "default": "Button"
      },
      {
        "type": "Int",
        "desc": "A private property used to trigger ``on_click`` event handler.",
        "name": "clicks",
        "default": 0
      }
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"clicks\": 0, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"cf83803a-a68e-42f6-9d67-d4db7124e710\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A click button.",
    "name": "Button",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ]
  },
  "DateFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TICKS', 'TIMESTAMP'), String)",
        "desc": "The date format can be combinations of the following:\n\n    d\n        day of month (no leading zero)\n\n    dd\n        day of month (two digit)\n\n    o\n        day of year (no leading zeros)\n\n    oo\n        day of year (three digit)\n\n    D\n        day name short\n\n    DD\n        day name long\n\n    m\n        month of year (no leading zero)\n\n    mm\n        month of year (two digit)\n\n    M\n        month name short\n\n    MM\n        month name long\n\n    y\n        year (two digit)\n\n    yy\n        year (four digit)\n\n    @\n        Unix timestamp (ms since 01/01/1970)\n\n    !\n        Windows ticks (100ns since 01/01/0001)\n\n    \"...\"\n        literal text\n\n    ''\n        single quote",
        "name": "format",
        "default": "yy M d"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"format\": \"yy M d\", \"id\": \"0442c1a5-27d3-47b5-9036-e16e8a681ca6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Date cell formatter.",
    "name": "DateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ]
  },
  "Whisker": {
    "props": [
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "upper_units",
        "default": "data"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the whisker body.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "Instance(ArrowHead)",
        "desc": "Instance of ArrowHead.",
        "name": "upper_head",
        "default": "{\"id\": \"d3e2695b-90d5-4105-b36f-3fd8c26d9571\", \"level\": \"underlay\", \"size\": 10}"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the whisker body.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height')",
        "desc": "The direction of the band.",
        "name": "dimension",
        "default": "height"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the whisker body.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "underlay"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the whisker body.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Instance(ArrowHead)",
        "desc": "Instance of ArrowHead.",
        "name": "lower_head",
        "default": "{\"id\": \"bf277082-45a5-4e38-9d03-e3a5d6d5b993\", \"level\": \"underlay\", \"size\": 10}"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the whisker body.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the whisker body.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the whisker body.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "name": "base",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "base_units",
        "default": "data"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "lower_units",
        "default": "data"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "default": "{\"data\": {}, \"id\": \"c52f3e09-929d-491d-957e-7e7c58506b5f\"}"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The coordinations of the upper end of the whiskers.",
        "name": "upper",
        "default": null
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The coordinates of the lower end of the whiskers.",
        "name": "lower",
        "default": null
      }
    ],
    "proto": "{\"base\": null, \"dimension\": \"height\", \"id\": \"db7be027-799e-4abc-9c75-fc3aeb380c97\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"lower\": null, \"lower_head\": {\"id\": \"98fe7bf1-0325-41f9-b942-e94d55ed2e58\", \"type\": \"TeeHead\"}, \"name\": null, \"plot\": null, \"source\": {\"id\": \"7d604d14-348e-4830-8998-9eb175450304\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"upper_head\": {\"id\": \"d5858441-5c7c-418e-a58e-01a35d498ae6\", \"type\": \"TeeHead\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a whisker along a dimension.",
    "name": "Whisker",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "ImageURL": {
    "props": [
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).",
        "name": "w",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "Int",
        "desc": "Number of attempts to retry loading the images from the specified URL.\n    Default is zero.",
        "name": "retry_attempts",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the image anchors.",
        "name": "y",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the images, as measured from the horizontal.",
        "name": "angle",
        "default": 0
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "name": "dilate",
        "default": false
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "w_units",
        "default": "data"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "h_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the image anchors.",
        "name": "x",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The URLs to retrieve images from.\n\n    .. note::\n        The actual retrieving and loading of the images happens on\n        the client.",
        "name": "url",
        "default": null
      },
      {
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')",
        "desc": "What position of the image should be anchored at the `x`, `y`\n    coordinates.",
        "name": "anchor",
        "default": "top_left"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).",
        "name": "h",
        "default": null
      },
      {
        "type": "Float",
        "desc": "An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself).",
        "name": "global_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "Timeout (in ms) between retry attempts to load the image from the\n    specified URL. Default is zero ms.",
        "name": "retry_timeout",
        "default": 0
      }
    ],
    "proto": "{\"anchor\": \"top_left\", \"angle\": {\"units\": \"rad\", \"value\": 0}, \"dilate\": false, \"global_alpha\": 1.0, \"h\": null, \"id\": \"3990a7c6-7574-4d7d-873d-2baccabc404a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"retry_attempts\": 0, \"retry_timeout\": 0, \"subscribed_events\": [], \"tags\": [], \"url\": null, \"w\": null, \"x\": null, \"y\": null}",
    "desc": "Render images loaded from given URLs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/ImageURL.py\n        :source-position: below",
    "name": "ImageURL",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Patches": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the patches.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the patches.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the patches.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the x-coordinates for each polygon should be separated by NaN\n        values in the sublists.",
        "name": "xs",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the patches.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the patches.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the patches.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the patches.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the y-coordinates for each polygon should be separated by NaN\n        values in the sublists.",
        "name": "ys",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the patches.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the patches.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"7e492bee-c8bc-4d3b-a212-2df8b45b68c6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}",
    "desc": "Render several patches.\n\n    The data for the ``Patches`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Patches.py\n        :source-position: below",
    "name": "Patches",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "AbstractGroup": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d51455c5-562d-4fec-ae90-f5e1ba8b3973\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for all kinds of groups.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "AbstractGroup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "Model": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"4af613e3-9b99-4cd9-baf5-4429d3376248\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for all objects stored in Bokeh  |Document| instances.",
    "name": "Model",
    "bases": [
      "bokeh.core.has_props.HasProps",
      "bokeh.util.callback_manager.PropertyCallbackManager",
      "bokeh.util.callback_manager.EventCallbackManager"
    ]
  },
  "TextInput": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "Placeholder for empty input field",
        "name": "placeholder",
        "default": ""
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Initial or entered text value.",
        "name": "value",
        "default": ""
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"0e9d02a7-b74a-49fe-90a8-2924d7445278\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "desc": "Single-line input widget.",
    "name": "TextInput",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "TickFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"7c177e69-9908-4874-8993-2698db53e10c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all tick formatter types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "TickFormatter",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "Tap": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"d43aa744-9838-4764-a49a-bcc0c7574320\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that respond to tap/click events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Tap",
    "bases": [
      "bokeh.models.tools.Tool"
    ]
  },
  "StepInterpolator": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('before', 'after', 'center')",
        "desc": "Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n    * ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n    * ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n    * ``center``: Assume the y-value associated with the nearest x-value to the point to transform.",
        "name": "mode",
        "default": "after"
      },
      {
        "type": "Either(String, Seq(Float))",
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "name": "y",
        "default": null
      },
      {
        "type": "Instance(ColumnarDataSource)",
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "name": "data",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Either(String, Seq(Float))",
        "desc": "Independant coordiante denoting the location of a point.",
        "name": "x",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "name": "clip",
        "default": true
      }
    ],
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"6a1ff327-218b-4a62-9554-70a86d7d0deb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mode\": \"after\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Compute a step-wise interpolation between the points provided through\n    the ``x``, ``y``, and ``data`` parameters.",
    "name": "StepInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ]
  },
  "CircleX": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"924906dd-d1f7-4aba-a255-a146d1f90e4f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render circle markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/CircleX.py\n        :source-position: below",
    "name": "CircleX",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "Quadratic": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the control points.",
        "name": "cy",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the starting points.",
        "name": "y0",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the control points.",
        "name": "cx",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the parabolas.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the parabolas.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the parabolas.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the ending points.",
        "name": "y1",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the parabolas.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the parabolas.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the ending points.",
        "name": "x1",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the parabolas.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the starting points.",
        "name": "x0",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the parabolas.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"cx\": null, \"cy\": null, \"id\": \"0a253e32-3320-4d79-834e-9e66e40ee000\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "desc": "Render parabolas.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Quadratic.py\n        :source-position: below",
    "name": "Quadratic",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "BasicTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "default": 10.0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "type": "Float",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"6b78445e-3146-4fec-a8df-3437c65ed2f8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks on a linear scale.\n\n    .. note::\n        This class may be renamed to ``LinearTicker`` in the future.",
    "name": "BasicTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ]
  },
  "CategoricalColorMapper": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Either(Seq(String), Seq(Int), Seq(Float), Seq(Datetime), Seq(Date))",
        "desc": "A sequence of factors / categories that map to the color palette.",
        "name": "factors",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "default": null
      }
    ],
    "proto": "{\"factors\": null, \"id\": \"6824e9b1-6dd8-46e9-9715-261440c70c39\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Map categories to colors. Values that are passed to\n    this mapper that aren't in factors will be assigned the nan_color.",
    "name": "CategoricalColorMapper",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ]
  },
  "Markup": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The contents of the widget.",
        "name": "text",
        "default": ""
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f698794e-a168-447c-bfcb-98364ae1b08b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "Base class for Bokeh models that represent HTML markup elements.\n\n    Markups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Markup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "MapOptions": {
    "props": [
      {
        "type": "Int",
        "desc": "The initial zoom level to use when displaying the map.",
        "name": "zoom",
        "default": 12
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The longitude where the map should be centered.",
        "name": "lng",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The latitude where the map should be centered.",
        "name": "lat",
        "default": null
      }
    ],
    "proto": "{\"id\": \"0e364e97-6b72-4d79-804d-f69fe6af53cb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}",
    "desc": "Abstract base class for map options' models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "MapOptions",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "MultiSelect": {
    "props": [
      {
        "type": "List(Either(String, Tuple(String, String)))",
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.",
        "name": "options",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the current selection value\n    changes.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The number of visible options in the dropdown list. (This uses the\n    ``select`` HTML element's ``size`` attribute. Some browsers might not\n    show less than 3 options.)",
        "name": "size",
        "default": 4
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "Initial or selected values.",
        "name": "value",
        "default": []
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d4fd5a5c-a2b3-4bc6-8752-a19bf71c83a7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"size\": 4, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": [], \"width\": null}",
    "desc": "Multi-select widget.",
    "name": "MultiSelect",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "Legend": {
    "props": [
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size for the legend labels.",
        "name": "label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline for the legend labels.",
        "name": "label_text_baseline",
        "default": "middle"
      },
      {
        "type": "Int",
        "desc": "The width (in pixels) that the rendered legend glyph should occupy.",
        "name": "glyph_width",
        "default": 20
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align for the legend labels.",
        "name": "label_text_align",
        "default": "left"
      },
      {
        "type": "Int",
        "desc": "The height (in pixels) that the rendered legend glyph should occupy.",
        "name": "glyph_height",
        "default": 20
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width for the legend border outline.",
        "name": "border_line_width",
        "default": 1
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the legend background style when inactive.",
        "name": "inactive_fill_alpha",
        "default": 0.9
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the legend border outline.",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha for the legend border outline.",
        "name": "border_line_alpha",
        "default": 0.5
      },
      {
        "type": "Int",
        "desc": "Amount of margin around the legend.",
        "name": "margin",
        "default": 10
      },
      {
        "type": "Int",
        "desc": "The line dash offset for the legend border outline.",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha for the legend labels.",
        "name": "label_text_alpha",
        "default": 1.0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash for the legend border outline.",
        "name": "border_line_dash",
        "default": []
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style for the legend labels.",
        "name": "label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) to separate the label from its associated glyph.",
        "name": "label_standoff",
        "default": 5
      },
      {
        "type": "Enum('none', 'hide', 'mute')",
        "desc": "Defines what happens when a lengend's item is clicked.",
        "name": "click_policy",
        "default": "none"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Whether the legend entries should be placed vertically or horizontally\n    when they are drawn.",
        "name": "orientation",
        "default": "vertical"
      },
      {
        "type": "Int",
        "desc": "The minimum height (in pixels) of the area that legend labels should occupy.",
        "name": "label_height",
        "default": 20
      },
      {
        "type": "String",
        "desc": "The text font for the legend labels.",
        "name": "label_text_font",
        "default": "helvetica"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color for the legend labels.",
        "name": "label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))",
        "desc": "The location where the legend should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).",
        "name": "location",
        "default": "top_right"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color for the legend border outline.",
        "name": "border_line_color",
        "default": "#e5e5e5"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the legend background style when inactive.",
        "name": "inactive_fill_color",
        "default": "white"
      },
      {
        "type": "Int",
        "desc": "The minimum width (in pixels) of the area that legend labels should occupy.",
        "name": "label_width",
        "default": 20
      },
      {
        "type": "Int",
        "desc": "Amount of spacing (in pixles) between legend entries.",
        "name": "spacing",
        "default": 3
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the legend border outline.",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "type": "List(Instance(LegendItem))",
        "desc": "A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\n    rendered in the legend.\n\n    This can be specified explicitly, for instance:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n            LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n            LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n        ])\n\n    But as a convenience, can also be given more compactly as a list of tuples:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            (\"sin(x)\"   , [r0, r1]),\n            (\"2*sin(x)\" , [r2]),\n            (\"3*sin(x)\" , [r3, r4])\n        ])\n\n    where each tuple is of the form: *(label, renderers)*.",
        "name": "items",
        "default": []
      },
      {
        "type": "Int",
        "desc": "Amount of padding around the contents of the legend.",
        "name": "padding",
        "default": 10
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the legend background style.",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the legend background style.",
        "name": "background_fill_alpha",
        "default": 0.95
      }
    ],
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"border_line_alpha\": {\"value\": 0.5}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": \"#e5e5e5\"}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"click_policy\": \"none\", \"glyph_height\": 20, \"glyph_width\": 20, \"id\": \"61d50ead-4c00-45f1-9613-ea5123d93de1\", \"inactive_fill_alpha\": {\"value\": 0.9}, \"inactive_fill_color\": {\"value\": \"white\"}, \"items\": [], \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_height\": 20, \"label_standoff\": 5, \"label_text_align\": \"left\", \"label_text_alpha\": {\"value\": 1.0}, \"label_text_baseline\": \"middle\", \"label_text_color\": {\"value\": \"#444444\"}, \"label_text_font\": \"helvetica\", \"label_text_font_size\": {\"value\": \"10pt\"}, \"label_text_font_style\": \"normal\", \"label_width\": 20, \"level\": \"annotation\", \"location\": \"top_right\", \"margin\": 10, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"spacing\": 3, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render informational legends for a plot.",
    "name": "Legend",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "Toolbar": {
    "props": [
      {
        "type": "Either(Auto, Instance(Scroll))",
        "desc": "Specify a scroll/pinch tool to be active when the plot is displayed.",
        "name": "active_scroll",
        "default": "auto"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Either(Auto, Instance(Drag))",
        "desc": "Specify a drag tool to be active when the plot is displayed.",
        "name": "active_drag",
        "default": "auto"
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Enum('normal', 'grey')",
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "name": "logo",
        "default": "normal"
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Either(Auto, Instance(Tap))",
        "desc": "Specify a tap/click tool to be active when the plot is displayed.",
        "name": "active_tap",
        "default": "auto"
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": null
      },
      {
        "type": "List(Instance(Tool))",
        "desc": "A list of tools to add to the plot.",
        "name": "tools",
        "default": []
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Either(Auto, Instance(Inspection), Seq(Instance(Inspection)))",
        "desc": "Specify an inspection tool or sequence of inspection tools to be active when\n    the plot is displayed.",
        "name": "active_inspect",
        "default": "auto"
      }
    ],
    "proto": "{\"active_drag\": \"auto\", \"active_inspect\": \"auto\", \"active_scroll\": \"auto\", \"active_tap\": \"auto\", \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"b8ccb35b-a6f0-4f68-b9b6-ba6f76e08637\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"sizing_mode\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": [], \"width\": null}",
    "desc": "Collect tools to display for a single plot.",
    "name": "Toolbar",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ]
  },
  "Quad": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the bottom edges.",
        "name": "bottom",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the left edges.",
        "name": "left",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the quads.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the quads.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the quads.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the right edges.",
        "name": "right",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the quads.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the quads.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the quads.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the quads.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the quads.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the quads.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the top edges.",
        "name": "top",
        "default": null
      }
    ],
    "proto": "{\"bottom\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"d79362a6-4ae2-4fcf-8746-daefaa3603d0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null}",
    "desc": "Render axis-aligned quads.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Quad.py\n        :source-position: below",
    "name": "Quad",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Title": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "",
        "name": "text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "String",
        "desc": "Name of a font to use for rendering text, e.g., ``'times'``,\n    ``'helvetica'``.",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the text bounding box.",
        "name": "border_line_width",
        "default": 1
      },
      {
        "type": "Float",
        "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\n    different directions based on the location of the title:\n\n        * above: shifts title right\n        * right: shifts title down\n        * below: shifts title right\n        * left: shifts title up",
        "name": "offset",
        "default": 0
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the text bounding box.",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the text bounding box.",
        "name": "border_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "A style to use for rendering text.\n\n    Acceptable values are:\n\n    - ``'normal'`` normal text\n    - ``'italic'`` *italic text*\n    - ``'bold'`` **bold text**",
        "name": "text_font_style",
        "default": "bold"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the text bounding box.",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "An alpha value to use to fill text with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the text bounding box.",
        "name": "border_line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "The text value to render.",
        "name": "text",
        "default": null
      },
      {
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the text bounding box.",
        "name": "border_line_color",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "Location to align the title text.",
        "name": "align",
        "default": "left"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "A color to use to fill text with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the text bounding box.",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the text bounding box.",
        "name": "background_fill_color",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the text bounding box.",
        "name": "background_fill_alpha",
        "default": 1.0
      }
    ],
    "proto": "{\"align\": \"left\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"fe569b4e-b256-49d7-97a2-9e687e2a76cb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"offset\": 0, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_alpha\": {\"value\": 1.0}, \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"10pt\"}, \"text_font_style\": \"bold\", \"visible\": true}",
    "desc": "Render a single title box as an annotation.",
    "name": "Title",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ]
  },
  "ImageRGBA": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The numbers of columns in the images",
        "name": "cols",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "dw_units",
        "default": "data"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.",
        "name": "dh",
        "default": null
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.",
        "name": "dw",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The arrays of RGBA data for the images.",
        "name": "image",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the image anchors.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "name": "dilate",
        "default": false
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the image anchors.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "dh_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The numbers of rows in the images",
        "name": "rows",
        "default": null
      }
    ],
    "proto": "{\"cols\": null, \"dh\": null, \"dilate\": false, \"dw\": null, \"id\": \"6db16c3f-c2a2-425d-a0bc-61e49cdae677\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"rows\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render images given as RGBA data.",
    "name": "ImageRGBA",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "ToolbarBase": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Enum('normal', 'grey')",
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "name": "logo",
        "default": "normal"
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(Instance(Tool))",
        "desc": "A list of tools to add to the plot.",
        "name": "tools",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": null
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"4e8ea942-dd84-4f39-825e-ad4d1ebfb889\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"sizing_mode\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": [], \"width\": null}",
    "desc": "A base class for different toolbars.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ToolbarBase",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ]
  },
  "X": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"e22655a0-fb6c-4fd8-b2a2-fd52ba0d02b7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a 'X' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/X.py\n        :source-position: below",
    "name": "X",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "CircleCross": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"ff44cdbe-8603-4bbe-8853-2dd851e35ead\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render circle markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/CircleCross.py\n        :source-position: below",
    "name": "CircleCross",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "ButtonGroup": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c8ce13f9-3f6b-4877-b23a-bcf514d3f1fd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for groups with items rendered as buttons.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup",
      "bokeh.models.widgets.buttons.ButtonLike"
    ]
  },
  "Patch": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the patch.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the patch.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        y-coordinates for each polygon should be separated by NaN\n        values in the sequence.",
        "name": "y",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the patch.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the patch.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the patch.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the patch.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        x-coordinates for each polygon should be separated by NaN\n        values in the sequence.",
        "name": "x",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the patch.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the patch.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the patch.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"9441e56c-7f09-407d-bc5a-8100100d1997\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a single patch.\n\n    The ``Patch`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Patch.py\n        :source-position: below",
    "name": "Patch",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "CategoricalTickFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"2254198d-a05d-4358-ad0f-5e82ade76072\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Display tick values from categorical ranges as string\n    values.",
    "name": "CategoricalTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "CellFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"c774e175-698a-478a-a169-0289732a3914\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Abstract base class for data table's cell formatters.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "CellFormatter",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "MercatorTileSource": {
    "props": [
      {
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "default": 30
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "default": 156543.03392804097
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "default": 0
      },
      {
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "default": ""
      },
      {
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "default": 256
      },
      {
        "type": "Float",
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "type": "Float",
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "default": 20037508.34
      }
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"b285db99-e9e8-4e97-a1c4-5e6cf4c53a74\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "A base class for Mercator tile services (e.g.``WMTSTileSource``).",
    "name": "MercatorTileSource",
    "bases": [
      "bokeh.models.tiles.TileSource"
    ]
  },
  "Arrow": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the arrow body.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the arrow body.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the start_x and start_y attributes. Interpreted as \"data\n    space\" units by default.",
        "name": "start_units",
        "default": "data"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the arrow body.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the arrow body.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the arrow body.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Instance(ArrowHead)",
        "desc": "Instance of ArrowHead.",
        "name": "start",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the start of the arrows.",
        "name": "y_start",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the arrow body.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the arrow body.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the end_x and end_y attributes. Interpreted as \"data\n    space\" units by default.",
        "name": "end_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the start of the arrows.",
        "name": "x_start",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the end of the arrows.",
        "name": "x_end",
        "default": null
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Instance(ArrowHead)",
        "desc": "Instance of ArrowHead.",
        "name": "end",
        "default": "{\"id\": \"13d85ee9-8e27-40de-a2c2-2767b96421a9\"}"
      },
      {
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the end of the arrows.",
        "name": "y_end",
        "default": null
      }
    ],
    "proto": "{\"end\": {\"id\": \"67433b12-e16a-44e4-a567-b621777ffa1d\", \"type\": \"OpenHead\"}, \"end_units\": \"data\", \"id\": \"e3ab334a-9734-4273-a590-f476b3672262\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"source\": null, \"start\": null, \"start_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_end\": null, \"x_range_name\": \"default\", \"x_start\": null, \"y_end\": null, \"y_range_name\": \"default\", \"y_start\": null}",
    "desc": "Render an arrow as an annotation.",
    "name": "Arrow",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "NumeralTickFormatter": {
    "props": [
      {
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "name": "language",
        "default": "en"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "name": "rounding",
        "default": "round"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html",
        "name": "format",
        "default": "0,0"
      }
    ],
    "proto": "{\"format\": \"0,0\", \"id\": \"2b1265f2-c0c9-48b4-b249-17781b950cc2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": []}",
    "desc": "Tick formatter based on a human-readable format string.",
    "name": "NumeralTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "ResetTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether activating the Reset tool should also reset the plot's canvas\n    dimensions to their original size.",
        "name": "reset_size",
        "default": true
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"53dc049d-9278-4332-94c9-3b2784503221\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"reset_size\": true, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |reset_icon|\n\n    The reset tool is an action. When activated in the toolbar, the tool\n    resets the data bounds of the plot to their values when the plot was\n    initially created.\n\n    Optionally, the reset tool also resets the plat canvas dimensions to\n    their original size\n\n    .. |reset_icon| image:: /_images/icons/Reset.png\n        :height: 18pt",
    "name": "ResetTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "StringFormatter": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "An optional text font style, e.g. bold, italic.",
        "name": "font_style",
        "default": "normal"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Color",
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details.",
        "name": "text_color",
        "default": null
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "An optional text align, i.e. left, center or right.",
        "name": "text_align",
        "default": "left"
      }
    ],
    "proto": "{\"font_style\": \"normal\", \"id\": \"fd3075ad-1867-4495-9708-046c352fc48b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}",
    "desc": "Basic string cell formatter.",
    "name": "StringFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ]
  },
  "LayoutDOM": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"026cad12-7c9c-4c22-ae4d-bba6132fb075\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "An abstract base class for layout components.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "LayoutDOM",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "PreText": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The contents of the widget.",
        "name": "text",
        "default": ""
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"f8ef7cad-75d6-4ce6-84d2-8a9c38a6e08c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "A block (paragraph) of pre-formatted text.\n\n    This Bokeh model corresponds to an HTML ``<pre>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_pretext.py\n        :source-position: below",
    "name": "PreText",
    "bases": [
      "bokeh.models.widgets.markups.Paragraph"
    ]
  },
  "NormalHead": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Float",
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "default": 25
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the arrow head interior.",
        "name": "fill_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the arrow head interior.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"1a05eccd-79ac-4a6d-9d51-1502c47b5172\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a closed-body arrow head.",
    "name": "NormalHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ]
  },
  "BoxAnnotation": {
    "props": [
      {
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "desc": "The x-coordinates of the left edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "left",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the box.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the box.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the box.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "desc": "The x-coordinates of the right edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "right",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the box.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the left attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "left_units",
        "default": "data"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the box.",
        "name": "fill_color",
        "default": "#fff9ba"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the box.",
        "name": "line_alpha",
        "default": 0.3
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the box.",
        "name": "fill_alpha",
        "default": 0.4
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the bottom attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "bottom_units",
        "default": "data"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the box.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the box.",
        "name": "line_color",
        "default": "#cccccc"
      },
      {
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "desc": "The y-coordinates of the top edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "top",
        "default": null
      },
      {
        "type": "Either(Auto, NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float))",
        "desc": "The y-coordinates of the bottom edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "bottom",
        "default": null
      },
      {
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the box is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\"",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the top attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "top_units",
        "default": "data"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the right attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "right_units",
        "default": "data"
      }
    ],
    "proto": "{\"bottom\": null, \"bottom_units\": \"data\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"a9dd22d4-b067-4cf5-867a-26088e789fb1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"left_units\": \"data\", \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"right\": null, \"right_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"top\": null, \"top_units\": \"data\", \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a shaded rectangular region as an annotation.",
    "name": "BoxAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "LassoSelectTool": {
    "props": [
      {
        "type": "Instance(PolyAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"391e44a8-7b38-4555-9e88-a0c4f41c70a1\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser on every selection of a lasso area.\n    The cb_data parameter that is available to the Callback code will contain\n    one LassoSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the lasso area",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: True",
        "name": "select_every_mousemove",
        "default": true
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "default": []
      }
    ],
    "proto": "{\"callback\": null, \"id\": \"a3c5066d-7de5-4103-8d8e-62a4395892ad\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"29b06614-ab20-48d2-8d17-2dd0e9fa8610\", \"type\": \"PolyAnnotation\"}, \"plot\": null, \"renderers\": [], \"select_every_mousemove\": true, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |lasso_select_icon|\n\n    The lasso selection tool allows users to make selections on a\n    Plot by indicating a free-drawn \"lasso\" region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n        :height: 18pt",
    "name": "LassoSelectTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ]
  },
  "PolyAnnotation": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the polygon.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the polygon.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the polygon.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the polygon.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the polygon.",
        "name": "fill_color",
        "default": "#fff9ba"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the polygon.",
        "name": "line_alpha",
        "default": 0.3
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the polygon.",
        "name": "fill_alpha",
        "default": 0.4
      },
      {
        "type": "Seq(Float)",
        "desc": "The y-coordinates of the region to draw.",
        "name": "ys",
        "default": []
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the polygon.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the polygon.",
        "name": "line_color",
        "default": "#cccccc"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "xs_units",
        "default": "data"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "ys_units",
        "default": "data"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Seq(Float)",
        "desc": "The x-coordinates of the region to draw.",
        "name": "xs",
        "default": []
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"8af26884-ba86-403a-867e-5c101171826c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"xs\": [], \"xs_units\": \"data\", \"y_range_name\": \"default\", \"ys\": [], \"ys_units\": \"data\"}",
    "desc": "Render a shaded polygonal region as an annotation.",
    "name": "PolyAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "ZoomOutTool": {
    "props": [
      {
        "type": "Percent",
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "name": "factor",
        "default": 0.1
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the zoom-out tool is constrained to act in. By\n    default the zoom-out tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"929968af-e44e-453b-8802-a7fd452decac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |zoom_out_icon|\n\n    The zoom-out tool allows users to click a button to zoom out\n    by a fixed amount.\n\n    .. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n        :height: 18pt",
    "name": "ZoomOutTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "Scroll": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"e4770cfe-265d-41ba-a867-037dab5f73d7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that respond to scroll events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Scroll",
    "bases": [
      "bokeh.models.tools.Tool"
    ]
  },
  "Drag": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"53ecf47b-09ba-4c13-b121-4c880b6de0de\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Drag",
    "bases": [
      "bokeh.models.tools.Tool"
    ]
  },
  "SquareX": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"e269cad8-d324-4c67-a7bc-8afc36c19a37\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render square markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/SquareX.py\n        :source-position: below",
    "name": "SquareX",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "Ticker": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"b5145555-d4d4-4458-931f-36e4841b7de1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Ticker",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "Text": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "y_offset",
        "default": 0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size values for the text.",
        "name": "text_font_size",
        "default": {
          "value": "12pt"
        }
      },
      {
        "type": "String",
        "desc": "The text font values for the text.",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "x_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the text anchors.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color values for the text.",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style values for the text.",
        "name": "text_font_style",
        "default": "normal"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the text anchors.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the text, as measured from the horizontal.",
        "name": "angle",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha values for the text.",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the text.",
        "name": "text_baseline",
        "default": "bottom"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the text.",
        "name": "text_align",
        "default": "left"
      },
      {
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text values to render.",
        "name": "text",
        "default": "text"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"id\": \"0bebd03f-4ef1-4a1e-a72e-2dda58457b16\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"x\": null, \"x_offset\": {\"value\": 0}, \"y\": null, \"y_offset\": {\"value\": 0}}",
    "desc": "Render text.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Text.py\n        :source-position: below",
    "name": "Text",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Tooltip": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether tooltip's arrow should be showed.",
        "name": "show_arrow",
        "default": true
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "desc": "Whether the tooltip should display to the left or right off the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension.",
        "name": "attachment",
        "default": "horizontal"
      },
      {
        "type": "Bool",
        "desc": "Whether to display outside a central plot frame area.",
        "name": "inner_only",
        "default": true
      }
    ],
    "proto": "{\"attachment\": \"horizontal\", \"id\": \"27e99191-cc3a-4c8c-917e-9efe0f410793\", \"inner_only\": true, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a tooltip.\n\n    .. note::\n        This model is currently managed by BokehJS and is not useful\n        directly from python.",
    "name": "Tooltip",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "DatePicker": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Date",
        "desc": "Optional earliest allowable date.",
        "name": "min_date",
        "default": null
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the current date value changes.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Date",
        "desc": "Optional latest allowable date.",
        "name": "max_date",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Date",
        "desc": "The initial or picked date.",
        "name": "value",
        "default": "2017-09-30"
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"12064951-1dfa-48dc-9d28-2d0b05c869a9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_date\": null, \"min_date\": null, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": 1506729600000.0, \"width\": null}",
    "desc": "Calendar-based date picker widget.",
    "name": "DatePicker",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "ColorMapper": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "default": null
      }
    ],
    "proto": "{\"id\": \"104c329a-a852-487d-ae9f-d36995aa3d90\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ColorMapper",
    "bases": [
      "bokeh.models.transforms.Transform"
    ]
  },
  "ColumnDataSource": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "default": null
      },
      {
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "name": "data",
        "default": {}
      },
      {
        "type": "Dict(String, Dict(String, Any))",
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "default": {
          "1d": {
            "indices": []
          },
          "2d": {
            "indices": {}
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"data\": {}, \"id\": \"d31b39f0-73b4-4bf1-a7a7-c95843953c93\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Maps names of columns to sequences or arrays.\n\n    If the ColumnDataSource initializer is called with a single argument that\n    is a dict or pandas.DataFrame, that argument is used as the value for the\n    \"data\" attribute. For example::\n\n        ColumnDataSource(mydict) # same as ColumnDataSource(data=mydict)\n        ColumnDataSource(df) # same as ColumnDataSource(data=df)\n\n    .. note::\n        There is an implicit assumption that all the columns in a\n        a given ColumnDataSource have the same length.",
    "name": "ColumnDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ]
  },
  "DynamicImageRenderer": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "underlay"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Float",
        "desc": "tile opacity 0.0 - 1.0",
        "name": "alpha",
        "default": 1.0
      },
      {
        "type": "Bool",
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "name": "render_parents",
        "default": true
      },
      {
        "type": "Instance(ImageSource)",
        "desc": "Image source to use when rendering on the plot.",
        "name": "image_source",
        "default": null
      }
    ],
    "proto": "{\"alpha\": 1.0, \"id\": \"0de46fb2-f342-40d3-a148-760c17465efe\", \"image_source\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "",
    "name": "DynamicImageRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ]
  },
  "DataRenderer": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "image"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"82be6a11-4ade-4d8b-978f-500746cc19e7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``TileRenderer``).\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "DataRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ]
  },
  "AbstractIcon": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"7e63b7aa-0f64-4ed2-94b1-44aa54549aea\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "An abstract base class for icon widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "AbstractIcon",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "VBar": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the bottom edges.",
        "name": "bottom",
        "default": 0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the vertical bars.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the vertical bars.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the vertical bars.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the vertical bars.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The widths of the vertical bars.",
        "name": "width",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the vertical bars.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the vertical bars.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the centers of the vertical bars.",
        "name": "x",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the vertical bars.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the vertical bars.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the vertical bars.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the top edges.",
        "name": "top",
        "default": null
      }
    ],
    "proto": "{\"bottom\": {\"value\": 0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"d6bd9e74-93d9-4ea7-a373-61054e939320\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null, \"width\": null, \"x\": null}",
    "desc": "Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/VBar.py\n        :source-position: below",
    "name": "VBar",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "CrosshairTool": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the crosshair tool is to track. By default, both a\n    vertical and horizontal line will be drawn. If only \"width\" is supplied,\n    only a horizontal line will be drawn. If only \"height\" is supplied,\n    only a vertical line will be drawn.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "Stroke width in units of pixels.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "An alpha value to use to stroke paths with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Bool",
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "name": "toggleable",
        "default": true
      },
      {
        "type": "Color",
        "desc": "A color to use to stroke paths with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"785c7867-6fb6-4775-9280-7a08831a1b4d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_width\": 1, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}",
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The crosshair tool is a passive inspector tool. It is generally on\n    at all times, but can be configured in the inspector's menu\n    associated with the *toolbar icon* shown above.\n\n    The crosshair tool draws a crosshair annotation over the plot,\n    centered on the current mouse position. The crosshair tool may be\n    configured to draw across only one dimension by setting the\n    ``dimension`` property to only ``width`` or ``height``.\n\n    .. |crosshair_icon| image:: /_images/icons/Crosshair.png\n        :height: 18pt",
    "name": "CrosshairTool",
    "bases": [
      "bokeh.models.tools.Inspection"
    ]
  },
  "Scale": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"dd2482a6-9cea-4d40-922a-794e2bafef7f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for ``Scale`` models that represent an invertible\n    computation to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n        invert: (xprime) ->\n            # compute the inverse transform of a single value\n\n        v_invert: (xprimes) ->\n            # compute the inverse transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Scale",
    "bases": [
      "bokeh.models.transforms.Transform"
    ]
  },
  "Dropdown": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(AbstractIcon)",
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "default": null
      },
      {
        "type": "List(Tuple(String, String))",
        "desc": "Button's dropdown menu consisting of entries containing item's text and\n    value name. Use ``None`` as a menu separator.",
        "name": "menu",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "String",
        "desc": "The default value, otherwise the first item in ``menu`` will be used.",
        "name": "default_value",
        "default": null
      },
      {
        "type": "String",
        "desc": "A private property used to trigger ``on_click`` event handler.",
        "name": "value",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The text label for the button to display.",
        "name": "label",
        "default": "Dropdown"
      }
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"default_value\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"e2ea6756-7f90-4186-8537-65f685b01abd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Dropdown\", \"menu\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"value\": null, \"width\": null}",
    "desc": "A dropdown button.",
    "name": "Dropdown",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ]
  },
  "Renderer": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "image"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"b179d228-01e4-4c91-9d7a-dfd1ce4dc1f0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "An abstract base class for renderer types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Renderer",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "Ellipse": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the ovals.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the ovals.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The heights of each ellipse.",
        "name": "height",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the ovals.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the centers of the ellipses.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the ovals.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the ovals.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the ovals.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the ovals.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angle the ellipses are rotated from horizontal. [rad]",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the ovals.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the ovals.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "width_units",
        "default": "data"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The widths of each ellipse.",
        "name": "width",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the centers of the ellipses.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "height_units",
        "default": "data"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"88a4495d-7464-48bd-ba19-b03994f7b4ed\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "desc": "Render ellipses.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Ellipse.py\n        :source-position: below",
    "name": "Ellipse",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Cross": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"aca25a18-8225-4a89-9ed6-b17e701f9a9d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render '+' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Cross.py\n        :source-position: below",
    "name": "Cross",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "AnnularWedge": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the annular wedges.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the annular wedges.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "outer_radius_units",
        "default": "data"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The outer radii of the annular wedges.",
        "name": "outer_radius",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to end the annular wedges, as measured from the horizontal.",
        "name": "end_angle",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the annular wedges.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the center of the annular wedges.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the annular wedges.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the annular wedges.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the annular wedges.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "inner_radius_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the annular wedges.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the annular wedges.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the annular wedges.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The inner radii of the annular wedges.",
        "name": "inner_radius",
        "default": null
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "start_angle_units",
        "default": "rad"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to start the annular wedges, as measured from the horizontal.",
        "name": "start_angle",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the center of the annular wedges.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "end_angle_units",
        "default": "rad"
      },
      {
        "type": "Enum('clock', 'anticlock')",
        "desc": "Which direction to stroke between the start and end angles.",
        "name": "direction",
        "default": "anticlock"
      }
    ],
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"03f9b695-e2c9-45b7-a777-5589473b8d63\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render annular wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/AnnularWedge.py\n        :source-position: below",
    "name": "AnnularWedge",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Select": {
    "props": [
      {
        "type": "List(Either(String, Tuple(String, String)))",
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.",
        "name": "options",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the current Select dropdown\n    value changes.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "String",
        "desc": "Initial or selected value.",
        "name": "value",
        "default": ""
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"6137abde-e13e-462f-83fa-c900a13f78ed\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "desc": "Single-select widget.",
    "name": "Select",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "MapPlot": {
    "props": [
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_right",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the plot border outline.",
        "name": "outline_line_join",
        "default": "miter"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "name": "left",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha for the plot border outline.",
        "name": "outline_line_alpha",
        "default": 1.0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "name": "lod_interval",
        "default": 300
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_top",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether to use HiDPI mode when available.",
        "name": "hidpi",
        "default": true
      },
      {
        "type": "Bool",
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "name": "toolbar_sticky",
        "default": true
      },
      {
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "name": "output_backend",
        "default": "canvas"
      },
      {
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_x_ranges",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the plot border style.",
        "name": "border_fill_alpha",
        "default": 1.0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color for the plot border outline.",
        "name": "outline_line_color",
        "default": "#e5e5e5"
      },
      {
        "type": "Instance(Title)",
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "name": "title",
        "default": "{\"id\": \"a8a1f2df-d66d-4d63-b7bc-c1871532b033\", \"text\": \"\"}"
      },
      {
        "type": "Bool",
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "name": "h_symmetry",
        "default": true
      },
      {
        "type": "Int",
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_height",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "name": "x_scale",
        "default": "{\"id\": \"5867cb27-684d-4366-8796-14ff4367faba\"}"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area below of the plot.",
        "name": "below",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The line dash offset for the plot border outline.",
        "name": "outline_line_dash_offset",
        "default": 0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash for the plot border outline.",
        "name": "outline_line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width for the plot border outline.",
        "name": "outline_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "name": "plot_height",
        "default": 600
      },
      {
        "type": "Int",
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_width",
        "default": null
      },
      {
        "type": "Int",
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "name": "lod_factor",
        "default": 10
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the plot border style.",
        "name": "border_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the plot background style.",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Instance(ToolEvents)",
        "desc": "A ToolEvents object to share and report tool events.",
        "name": "tool_events",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Int",
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_height",
        "default": null
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "name": "min_border",
        "default": 5
      },
      {
        "type": "Int",
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "name": "lod_timeout",
        "default": 500
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "name": "right",
        "default": []
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_left",
        "default": null
      },
      {
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_y_ranges",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "name": "lod_threshold",
        "default": 2000
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_bottom",
        "default": null
      },
      {
        "type": "Instance(Range)",
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "name": "x_range",
        "default": null
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "name": "title_location",
        "default": "above"
      },
      {
        "type": "Int",
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "name": "plot_width",
        "default": 600
      },
      {
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "name": "y_scale",
        "default": "{\"id\": \"0ea3764b-abb9-4b7b-8028-57ef93f7f5ac\"}"
      },
      {
        "type": "Int",
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_width",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the plot border outline.",
        "name": "outline_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area above of the plot.",
        "name": "above",
        "default": []
      },
      {
        "type": "Instance(Range)",
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "name": "y_range",
        "default": null
      },
      {
        "type": "Instance(Toolbar)",
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "name": "toolbar",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the plot background style.",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "type": "Bool",
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "name": "v_symmetry",
        "default": false
      }
    ],
    "proto": "{\"above\": [], \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"95fc4754-56bc-4c75-9ea8-d564bdcf0e3b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"4f2c14ad-ad42-456e-ab57-9080d98aff49\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"58753031-9790-458a-b426-3042ac9c99d8\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"f725ffad-6ce1-4f46-b4f8-f9bde2dbed94\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"e5ec8cea-b6d3-41a4-b0c8-dd504ef88db9\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"797f1627-560d-4fcf-976d-e132928f65b2\", \"type\": \"LinearScale\"}}",
    "desc": "Abstract base class for map plot models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "MapPlot",
    "bases": [
      "bokeh.models.plots.Plot"
    ]
  },
  "MonthsTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "type": "Seq(Int)",
        "desc": "The intervals of months to use.",
        "name": "months",
        "default": []
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"ed4a17dd-159e-46b7-b3e1-2ea72b0631b9\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"months\": [], \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks spaced apart by specific, even multiples of months.",
    "name": "MonthsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ]
  },
  "DatetimeTicker": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 0
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(Instance(Ticker))",
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()",
        "name": "tickers",
        "default": [
          "{\"id\": \"682907bc-52db-4be8-9ddf-48fc9ebb3bbe\", \"max_interval\": 500.0, \"num_minor_ticks\": 0}",
          "{\"base\": 60, \"id\": \"f75ad45d-c173-4e17-9c0d-fd1482eaa48a\", \"mantissas\": [1, 2, 5, 10, 15, 20, 30], \"max_interval\": 1800000.0, \"min_interval\": 1000.0, \"num_minor_ticks\": 0}",
          "{\"base\": 24, \"id\": \"d718e7c1-9e05-4e49-8490-adf2932df1f4\", \"mantissas\": [1, 2, 4, 6, 8, 12], \"max_interval\": 43200000.0, \"min_interval\": 3600000.0, \"num_minor_ticks\": 0}",
          "{\"days\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], \"id\": \"ef14e3e4-83fd-4972-9d14-96252dd67ae4\"}",
          "{\"days\": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], \"id\": \"2fc39ad8-d3cd-4918-b37a-2660e052dc67\"}",
          "{\"days\": [1, 8, 15, 22], \"id\": \"b111ece4-3aa1-46d9-846d-4eaa512ba922\"}",
          "{\"days\": [1, 15], \"id\": \"661468ff-0359-4a1c-8de3-58e4b7d48647\"}",
          "{\"id\": \"39681e8d-d769-48ce-af20-7861b4d27deb\", \"months\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}",
          "{\"id\": \"2d9a40d3-0790-4d69-9011-5cdaec479e20\", \"months\": [0, 2, 4, 6, 8, 10]}",
          "{\"id\": \"1204f346-3bec-47d9-b3e5-11015275080f\", \"months\": [0, 4, 8]}",
          "{\"id\": \"02d1e886-8d15-4c0c-a072-7a1cb13493b1\", \"months\": [0, 6]}",
          "{\"id\": \"5c162849-2f30-4e79-bef7-87ce8f183845\"}"
        ]
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"68b4cb9b-2473-4505-af0e-601e7baaf19d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 0, \"subscribed_events\": [], \"tags\": [], \"tickers\": [{\"id\": \"df6c2884-8863-4d51-8a50-d9e5e1d0e001\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"7cc442bb-d7c3-4797-9724-29182447341c\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"c64f1172-e752-41fa-b8ba-cc0fcc1e3ce8\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"0c52c297-04d0-47ba-8d15-5c1e01c8ad2e\", \"type\": \"DaysTicker\"}, {\"id\": \"587fbcdf-d1ea-4179-8142-4b87a014f5a2\", \"type\": \"DaysTicker\"}, {\"id\": \"59d31a93-5e35-46d5-b9a8-3532dee5a9db\", \"type\": \"DaysTicker\"}, {\"id\": \"8a9b1291-bcf1-493e-872c-7ceae6488179\", \"type\": \"DaysTicker\"}, {\"id\": \"9b7ce436-34de-42b3-b7f9-60affc4680d8\", \"type\": \"MonthsTicker\"}, {\"id\": \"660db4f9-193e-4a5f-9262-e33adaf5984f\", \"type\": \"MonthsTicker\"}, {\"id\": \"592b7ebe-9c6d-4359-b555-2dd59aaa77f3\", \"type\": \"MonthsTicker\"}, {\"id\": \"6542455e-a7a3-48af-bc30-fd0f90caf99f\", \"type\": \"MonthsTicker\"}, {\"id\": \"0b449c87-8b05-433f-b8e9-c77f7dba8489\", \"type\": \"YearsTicker\"}]}",
    "desc": "Generate nice ticks across different date and time scales.",
    "name": "DatetimeTicker",
    "bases": [
      "bokeh.models.tickers.CompositeTicker"
    ]
  },
  "TileRenderer": {
    "props": [
      {
        "type": "Instance(TileSource)",
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "name": "tile_source",
        "default": "{\"id\": \"317d3634-7862-4f7c-b2db-e48e20453d7f\"}"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "underlay"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Float",
        "desc": "tile opacity 0.0 - 1.0",
        "name": "alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "name": "render_parents",
        "default": true
      }
    ],
    "proto": "{\"alpha\": 1.0, \"id\": \"6eeb3188-e032-4090-9240-6a11c44b0b86\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"subscribed_events\": [], \"tags\": [], \"tile_source\": {\"id\": \"3561fb53-8b63-4a42-8c41-10c8573817fd\", \"type\": \"WMTSTileSource\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "",
    "name": "TileRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ]
  },
  "Tabs": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "List(Instance(Panel))",
        "desc": "The list of child panel widgets.",
        "name": "tabs",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The index of the active tab.",
        "name": "active",
        "default": 0
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"active\": 0, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"2c221c01-8b41-4617-8784-aba1c9c0cd04\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tabs\": [], \"tags\": [], \"width\": null}",
    "desc": "A panel widget with navigation tabs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_tab_panes.py\n        :source-position: below",
    "name": "Tabs",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "GlyphRenderer": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Either(Auto, Instance(Glyph))",
        "desc": "An optional glyph used for selected points.\n\n    If set to \"auto\" then the standard glyph will be used for selected\n    points.",
        "name": "selection_glyph",
        "default": "auto"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Glyph)",
        "desc": "An optional glyph used for inspected points, e.g., those that are\n    being hovered over by a HoverTool.",
        "name": "hover_glyph",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "glyph"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "name": "data_source",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default -range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Glyph)",
        "desc": "The glyph to render, in conjunction with the supplied data source\n    and ranges.",
        "name": "glyph",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "",
        "name": "muted",
        "default": false
      },
      {
        "type": "Instance(Glyph)",
        "desc": "",
        "name": "muted_glyph",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Either(Auto, Instance(Glyph))",
        "desc": "An optional glyph used for explicitly non-selected points\n    (i.e., non-selected when there are other points that are selected,\n    but not when no points at all are selected.)\n\n    If set to \"auto\" then a glyph with a low alpha value (0.1) will\n    be used for non-selected points.",
        "name": "nonselection_glyph",
        "default": "auto"
      }
    ],
    "proto": "{\"data_source\": null, \"glyph\": null, \"hover_glyph\": null, \"id\": \"aee6f491-716a-4b8e-ba02-c27c196f851a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"glyph\", \"muted\": false, \"muted_glyph\": null, \"name\": null, \"nonselection_glyph\": \"auto\", \"selection_glyph\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "",
    "name": "GlyphRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ]
  },
  "ToolbarBox": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Should the toolbar be presented as if it was stuck to the `above`, `right`, `left`, `below`\n        edge of a plot. Default is `right`.",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "type": "Enum('normal', 'grey')",
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.",
        "name": "logo",
        "default": "normal"
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Bool",
        "desc": "Merge all the tools together so there is one tool to control all the plots.",
        "name": "merge_tools",
        "default": true
      },
      {
        "type": "List(Instance(Tool))",
        "desc": "A list of tools to add to the plot.",
        "name": "tools",
        "default": []
      }
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"6b8ddf21-1375-4290-bbcb-a814ca49e899\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"merge_tools\": true, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"toolbar_location\": \"right\", \"tools\": [], \"width\": null}",
    "desc": "A layoutable toolbar that can accept the tools of multiple plots, and\n    can merge the tools into a single button for convenience.",
    "name": "ToolbarBox",
    "bases": [
      "bokeh.models.layouts.Box"
    ]
  },
  "Annulus": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The inner radii of the annuli.",
        "name": "inner_radius",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the annuli.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the annuli.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "outer_radius_units",
        "default": "data"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The outer radii of the annuli.",
        "name": "outer_radius",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the annuli.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the center of the annuli.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the annuli.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the annuli.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the annuli.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "inner_radius_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the center of the annuli.",
        "name": "x",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the annuli.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the annuli.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the annuli.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"4caf754a-037f-4090-8b3c-ae86ed2ba863\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render annuli.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Annulus.py\n        :source-position: below",
    "name": "Annulus",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "CompositeTicker": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(Instance(Ticker))",
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()",
        "name": "tickers",
        "default": []
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"36963e32-2964-4d0d-bf95-4cba70eccb20\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"tickers\": []}",
    "desc": "Combine different tickers at different scales.\n\n    Uses the ``min_interval`` and ``max_interval`` interval attributes\n    of the tickers to select the appropriate ticker at different\n    scales.",
    "name": "CompositeTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ]
  },
  "Range": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"callback\": null, \"id\": \"6229e1c4-d1fb-4daa-ba02-4f571ad308a5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Range",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "LogAxis": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "default": "{\"id\": \"7bbf581e-02af-4e5b-a197-c59661d0272b\"}"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "default": "{\"id\": \"ecf3bc87-325c-4b9a-be8a-146d525135c5\"}"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "default": ""
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(Either(Float, String), String)",
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "type": "String",
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "default": 5
      }
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"beda4370-7d81-474d-a6b0-fc22686df2c1\", \"type\": \"LogTickFormatter\"}, \"id\": \"e84a9400-e151-4796-bbe0-d7ce9c1e8475\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"5a55f6b9-ed73-44a6-b329-d7f77147c746\", \"type\": \"LogTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An axis that picks nice numbers for tick locations on a\n    log scale. Configured with a ``LogTickFormatter`` by default.",
    "name": "LogAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ]
  },
  "Toggle": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(AbstractIcon)",
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "The initial state of a button. Also used to trigger ``on_click`` event\n    handler.",
        "name": "active",
        "default": false
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The text label for the button to display.",
        "name": "label",
        "default": "Toggle"
      }
    ],
    "proto": "{\"active\": false, \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"dc4435dc-2ee9-451f-985f-3ca7fb6bcf02\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Toggle\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A two-state toggle button.",
    "name": "Toggle",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ]
  },
  "Slider": {
    "props": [
      {
        "type": "Enum('continuous', 'throttle', 'mouseup')",
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time.",
        "name": "callback_policy",
        "default": "throttle"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the current Slider value changes.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Float",
        "desc": "The maximum allowable value.",
        "name": "end",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Float",
        "desc": "Initial or selected value.",
        "name": "value",
        "default": 0.5
      },
      {
        "type": "Float",
        "desc": "Number of microseconds to pause between callback calls as the slider is moved.",
        "name": "callback_throttle",
        "default": 200
      },
      {
        "type": "Float",
        "desc": "The step between consecutive values.",
        "name": "step",
        "default": 0.1
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "The minimum allowable value.",
        "name": "start",
        "default": 0
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "name": "orientation",
        "default": "horizontal"
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      }
    ],
    "proto": "{\"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": null, \"disabled\": false, \"end\": 1, \"height\": null, \"id\": \"404fba31-197b-4b87-8664-f4f474ee9c6d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"sizing_mode\": \"fixed\", \"start\": 0, \"step\": 0.1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": 0.5, \"width\": null}",
    "desc": "Slider-based number selection widget.",
    "name": "Slider",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "YearsTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"8632dc4c-49f5-4a25-b97f-75394abd4f93\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks spaced apart even numbers of years.",
    "name": "YearsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ]
  },
  "Inspection": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Bool",
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "name": "toggleable",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"bcc8a0af-881c-4413-8cca-9253d4ea494e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}",
    "desc": "A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Inspection",
    "bases": [
      "bokeh.models.tools.Tool"
    ]
  },
  "LinearScale": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"e6842a8e-681d-495b-8b4f-9392b490a0c8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "name": "LinearScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ]
  },
  "AbstractButton": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the button is activated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(AbstractIcon)",
        "desc": "An optional image appearing to the left of button's text.",
        "name": "icon",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The text label for the button to display.",
        "name": "label",
        "default": "Button"
      }
    ],
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"ce6a8850-a8b5-4207-bf3c-17a00ef42e44\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A base class that defines common properties for all button types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "AbstractButton",
    "bases": [
      "bokeh.models.widgets.widget.Widget",
      "bokeh.models.widgets.buttons.ButtonLike"
    ]
  },
  "ArrowHead": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      }
    ],
    "proto": "{\"id\": \"05876a2a-3f79-44f6-8c8b-c6e7bc3337e3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Base class for arrow heads.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ArrowHead",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "PolySelectTool": {
    "props": [
      {
        "type": "Instance(PolyAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"3be43480-07a1-4cdc-896f-6cc5945ea390\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "default": []
      }
    ],
    "proto": "{\"id\": \"02d425c4-6bf5-40ec-af87-5bf90afba8a1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"e7887476-0582-4074-b104-c3a42b4bff4b\", \"type\": \"PolyAnnotation\"}, \"plot\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |poly_select_icon|\n\n    The polygon selection tool allows users to make selections on a\n    Plot by indicating a polygonal region with mouse clicks. single\n    clicks (or taps) add successive points to the definition of the\n    polygon, and a double click (or tap) indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n        :height: 18pt",
    "name": "PolySelectTool",
    "bases": [
      "bokeh.models.tools.Tap"
    ]
  },
  "LogTickFormatter": {
    "props": [
      {
        "type": "Instance(Ticker)",
        "desc": "The corresponding ``LogTicker``, used to determine the correct\n    base to use. If unset, the formatter will use base 10 as a default.",
        "name": "ticker",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"5fc1b49c-e44c-40e6-9f44-6f91cd832ca3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null}",
    "desc": "Display tick values from continuous ranges as powers\n    of some base.\n\n    Most often useful in conjunction with a ``LogTicker``.",
    "name": "LogTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "Arc": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the arcs.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the arcs.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "Radius of the arc.",
        "name": "radius",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to end the arcs, as measured from the horizontal.",
        "name": "end_angle",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the arcs.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the center of the arcs.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the arcs.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the arcs.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "radius_units",
        "default": "data"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the arcs.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the arcs.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "start_angle_units",
        "default": "rad"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to start the arcs, as measured from the horizontal.",
        "name": "start_angle",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the center of the arcs.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "end_angle_units",
        "default": "rad"
      },
      {
        "type": "Enum('clock', 'anticlock')",
        "desc": "Which direction to stroke between the start and end angles.",
        "name": "direction",
        "default": "anticlock"
      }
    ],
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"id\": \"66cf8b8a-ce2a-4548-b5de-7e04de47d6d0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render arcs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Arc.py\n        :source-position: below",
    "name": "Arc",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "ContinuousTicker": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"9aa83b1b-f8a4-4f4f-ba15-42d63f9472a5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for non-categorical ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ContinuousTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ]
  },
  "Marker": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"6015d28b-4750-48a4-ab95-dbad2a95401c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Base class for glyphs that are simple markers with line and\n    fill properties, located at an (x, y) location with a specified\n    size.\n\n    .. note::\n        For simplicity, all markers have both line and fill properties\n        declared, however some markers (`Asterisk`, `Cross`, `X`) only\n        draw lines. For these markers, the fill values are simply\n        ignored.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Marker",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "SelectEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "The list of options to select from.",
        "name": "options",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"23875c58-534a-4cdb-a137-7c8851bbb36b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "Select cell editor.",
    "name": "SelectEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "DataSource": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, Dict(String, Any))",
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "default": {
          "1d": {
            "indices": []
          },
          "2d": {
            "indices": {}
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      }
    ],
    "proto": "{\"callback\": null, \"id\": \"0e45407b-36fc-44bb-af39-9aa8747e5b42\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for data source types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "DataSource",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "BoxSelectTool": {
    "props": [
      {
        "type": "Instance(BoxAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"6348aba4-f463-4aed-a1fc-2062ddd4a536\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the box selection is to be free in. By default,\n    users may freely draw selections boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser on completion of drawing a selection box.\n    The cb_data parameter that is available to the Callback code will contain\n    one BoxSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the selection box",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: False",
        "name": "select_every_mousemove",
        "default": false
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "default": []
      }
    ],
    "proto": "{\"callback\": null, \"dimensions\": \"both\", \"id\": \"d608debe-14b9-4dfe-9860-e13a48b08f2a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"5b07899d-0d2f-4870-bbc5-9e3b283e5aed\", \"type\": \"BoxAnnotation\"}, \"plot\": null, \"renderers\": [], \"select_every_mousemove\": false, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |box_select_icon|\n\n    The box selection tool allows users to make selections on a\n    Plot by indicating a rectangular region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n\n    .. |box_select_icon| image:: /_images/icons/BoxSelect.png\n        :height: 18pt",
    "name": "BoxSelectTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ]
  },
  "HelpTool": {
    "props": [
      {
        "type": "String",
        "desc": "Site to be redirected through upon click.",
        "name": "redirect",
        "default": "http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools"
      },
      {
        "type": "String",
        "desc": "Tooltip displayed when hovering over the help icon.",
        "name": "help_tooltip",
        "default": "Click the question mark to learn more about Bokeh plot tools."
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"help_tooltip\": \"Click the question mark to learn more about Bokeh plot tools.\", \"id\": \"2e941a63-a9fb-47f3-8647-3f68e5228409\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"redirect\": \"http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools\", \"subscribed_events\": [], \"tags\": []}",
    "desc": "A button tool to provide a \"help\" link to users.\n\n    The hover text can be customized through the ``help_tooltip`` attribute\n    and the redirect site overridden as well.",
    "name": "HelpTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "Square": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"3ecb374f-e7a5-441e-8b39-332cec49a3e0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a square marker, optionally rotated. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Square.py\n        :source-position: below",
    "name": "Square",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "LegendItem": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(GlyphRenderer))",
        "desc": "A list of the glyph renderers to draw in the legend. If ``label`` is a field,\n    then all data_sources of renderers must be the same.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "A label for this legend. Can be a string, or a column of a\n    ColumnDataSource. If ``label`` is a field, then it must\n    be in the renderers' data_source.",
        "name": "label",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"3ab992e2-ce8a-487f-be9d-53fdf1ba2d47\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": null, \"name\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "name": "LegendItem",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "BoxZoomTool": {
    "props": [
      {
        "type": "Instance(BoxAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "name": "overlay",
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"534f2a19-0d46-4259-9c92-77a52a12f71e\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the zoom box is to be free in. By default,\n    users may freely draw zoom boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the box zoom region should be restricted to have the same\n    aspect ratio as the plot region.\n\n    .. note::\n        If the tool is restricted to one dimension, this value has\n        no effect.",
        "name": "match_aspect",
        "default": false
      }
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"42317fb9-57c8-430b-aa71-4c8aa20196ed\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"match_aspect\": false, \"name\": null, \"overlay\": {\"id\": \"9dda11dd-2f30-45ec-b7ef-b56351b806b9\", \"type\": \"BoxAnnotation\"}, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |box_zoom_icon|\n\n    The box zoom tool allows users to define a rectangular\n    region of a Plot to zoom to by dragging he mouse or a\n    finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    .. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n        :height: 18pt",
    "name": "BoxZoomTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ]
  },
  "Asterisk": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"17ae87c7-4bb3-4b01-9dc4-85384781000e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render asterisk '*' markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Asterisk.py\n        :source-position: below",
    "name": "Asterisk",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "RadioGroup": {
    "props": [
      {
        "type": "Bool",
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "name": "inline",
        "default": false
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected.",
        "name": "active",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"active\": null, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"de209132-8562-43d1-b308-0939f13a0938\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of radio boxes.",
    "name": "RadioGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ]
  },
  "PercentEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"cd2d7584-dcfc-470b-8b36-76780ffbf11b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "``IntEditor`` optimized for editing percentages.",
    "name": "PercentEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "ContinuousAxis": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "default": ""
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(Either(Float, String), String)",
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "type": "String",
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "default": 5
      }
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": null, \"id\": \"8be1b245-13a9-41c3-ae1b-5d9cd2093804\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "A base class for all numeric, non-categorical axes types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ContinuousAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ]
  },
  "DaysTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "default": null
      },
      {
        "type": "Seq(Int)",
        "desc": "The intervals of days to use.",
        "name": "days",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"days\": [], \"desired_num_ticks\": 6, \"id\": \"06af1138-d2de-44ac-a6a7-d9c242789097\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks spaced apart by specific, even multiples of days.",
    "name": "DaysTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ]
  },
  "Axis": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "default": ""
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(Either(Float, String), String)",
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "type": "String",
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "default": 5
      }
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": null, \"id\": \"43f19797-09f0-45c3-ad68-dfceeb816c33\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "A base class that defines common properties for all axis types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Axis",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ]
  },
  "ZoomInTool": {
    "props": [
      {
        "type": "Percent",
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "name": "factor",
        "default": 0.1
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the zoom-in tool is constrained to act in. By\n    default the zoom-in zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"f8231774-16e6-41bf-9f16-3513bcb53476\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |zoom_in_icon|\n\n    The zoom-in tool allows users to click a button to zoom in\n    by a fixed amount.\n\n    .. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n        :height: 18pt",
    "name": "ZoomInTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "Line": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the line.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the line.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the line.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates for the points of the line.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the line.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the line.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates for the points of the line.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the line.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the line.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"id\": \"f45aa3f6-59a2-485d-9b71-27d8130b64be\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render a single line.\n\n    The ``Line`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Line.py\n        :source-position: below",
    "name": "Line",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Spacer": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"b4fad416-8df4-4c21-8f0b-ac9050df0abf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A container for space used to fill an empty spot in a row or column.",
    "name": "Spacer",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ]
  },
  "TableColumn": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Instance(CellFormatter)",
        "desc": "The cell formatter for this column. By default, a simple string\n    formatter is used.",
        "name": "formatter",
        "default": "{\"id\": \"730e93fa-c887-4167-bb87-922f6cbf1d72\"}"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('ascending', 'descending')",
        "desc": "The default sorting order. By default ``ascending`` order is used.",
        "name": "default_sort",
        "default": "ascending"
      },
      {
        "type": "String",
        "desc": "The name of the field mapping to a column in the data source.",
        "name": "field",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether this column is sortable or not. Note that data table has\n    to have sorting enabled to allow sorting in general.",
        "name": "sortable",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The width or maximum width (depending on data table's configuration)\n    in pixels of this column.",
        "name": "width",
        "default": 300
      },
      {
        "type": "String",
        "desc": "The title of this column. If not set, column's data field is\n    used instead.",
        "name": "title",
        "default": null
      },
      {
        "type": "Instance(CellEditor)",
        "desc": "The cell editor for this column. By default, a simple string editor\n    is used.",
        "name": "editor",
        "default": "{\"id\": \"eafa31f5-4133-44e4-85f1-42bddc798000\"}"
      }
    ],
    "proto": "{\"default_sort\": \"ascending\", \"editor\": {\"id\": \"a8fa3fce-3d62-410c-ab11-f840a4c13347\", \"type\": \"StringEditor\"}, \"field\": null, \"formatter\": {\"id\": \"ab205893-7f55-49b3-b683-8db8ebe1e0a6\", \"type\": \"StringFormatter\"}, \"id\": \"c864773a-d4e3-4c70-8fb4-511e31e3c5ac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sortable\": true, \"subscribed_events\": [], \"tags\": [], \"title\": null, \"width\": 300}",
    "desc": "Table column widget.",
    "name": "TableColumn",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "VeeHead": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Float",
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "default": 25
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the arrow head interior.",
        "name": "fill_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the arrow head interior.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"fd6fe5c2-99a5-4fd4-ad11-daebda87d8b3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a vee-style arrow head.",
    "name": "VeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ]
  },
  "TeeHead": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Float",
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "default": 25
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"id\": \"810c04a7-5baa-4e5f-9883-560200f34c22\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render a tee-style arrow head.",
    "name": "TeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ]
  },
  "NumberFormatter": {
    "props": [
      {
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "name": "language",
        "default": "en"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "An optional text font style, e.g. bold, italic.",
        "name": "font_style",
        "default": "normal"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "name": "rounding",
        "default": "round"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html",
        "name": "format",
        "default": "0,0"
      },
      {
        "type": "Color",
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details.",
        "name": "text_color",
        "default": null
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "An optional text align, i.e. left, center or right.",
        "name": "text_align",
        "default": "left"
      }
    ],
    "proto": "{\"font_style\": \"normal\", \"format\": \"0,0\", \"id\": \"9dfa37fb-d479-4777-a68e-e912fe6b8d72\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}",
    "desc": "Number cell formatter.",
    "name": "NumberFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ]
  },
  "FixedTicker": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      },
      {
        "type": "Seq(Float)",
        "desc": "List of tick locations.",
        "name": "ticks",
        "default": []
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"695d7fb0-6357-4d16-90aa-d4971902fe3e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"ticks\": []}",
    "desc": "Generate ticks at fixed, explicitly supplied locations.\n\n    .. note::\n        The ``desired_num_ticks`` property is ignored by this Ticker.",
    "name": "FixedTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ]
  },
  "CheckboxGroup": {
    "props": [
      {
        "type": "Bool",
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "name": "inline",
        "default": false
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Int)",
        "desc": "The list of indices of selected check boxes.",
        "name": "active",
        "default": []
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"active\": [], \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"b3ef7024-6fa0-47d2-90fb-bcb2991baad3\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of check boxes.",
    "name": "CheckboxGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ]
  },
  "Transform": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"8914730d-e04d-4448-81dc-0de3d07ae129\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for ``Transform`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Transform",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "BBoxTileSource": {
    "props": [
      {
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "default": 30
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Bool",
        "desc": "Flag which indicates option to output {XMIN},{YMIN},{XMAX},{YMAX} in meters or latitude and longitude.",
        "name": "use_latlon",
        "default": false
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "default": 156543.03392804097
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "default": 0
      },
      {
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "default": ""
      },
      {
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "default": 256
      },
      {
        "type": "Float",
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "type": "Float",
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "default": 20037508.34
      }
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"bb0d5705-3f93-4ef2-a81f-4e130902a515\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"use_latlon\": false, \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The BBoxTileSource has the same default tile origin as the\n    WMTSTileSource but requested tiles use a ``{XMIN}``, ``{YMIN}``,\n    ``{XMAX}``, ``{YMAX}`` e.g. ``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``.",
    "name": "BBoxTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ]
  },
  "Diamond": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"047b1338-7309-4364-8819-c0498f0afd8d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render diamond markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Diamond.py\n        :source-position: below",
    "name": "Diamond",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "Segment": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the starting points.",
        "name": "y0",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the segments.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the segments.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the segments.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the ending points.",
        "name": "y1",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the segments.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the segments.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the ending points.",
        "name": "x1",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the segments.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the starting points.",
        "name": "x0",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the segments.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"id\": \"ab596b30-d0f7-4fa2-8b53-8b65baea36b5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "desc": "Render segments.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Segment.py\n        :source-position: below",
    "name": "Segment",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "DataRange1d": {
    "props": [
      {
        "type": "MinMaxBounds(Auto, Tuple(Float, Float))",
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the DataRange1d.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether\n    your range is increasing or decreasing, the first item should be the\n    minimum value of the range and the second item should be the maximum.\n    Setting ``min > max`` will result in a ``ValueError``.\n\n    If you only want to constrain one end of the plot, you can set ``min`` or\n    ``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``",
        "name": "bounds",
        "default": null
      },
      {
        "type": "Enum('percent', 'absolute')",
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)",
        "name": "range_padding_units",
        "default": "percent"
      },
      {
        "type": "Float",
        "desc": "A default width for the interval, in case ``start`` is equal to ``end``\n    (if used with a log axis, default_span is in powers of 10).",
        "name": "default_span",
        "default": 2.0
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\n    always be constrained to that::\n\n         abs(r.start - r.end) <= follow_interval\n\n    is maintained.",
        "name": "follow_interval",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether the range should be \"flipped\" from its normal direction when\n    auto-ranging.",
        "name": "flipped",
        "default": false
      },
      {
        "type": "Float",
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Note that ``bounds`` can impose an\n    implicit constraint on the maximum interval as well.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Float",
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound.",
        "name": "min_interval",
        "default": null
      },
      {
        "type": "Enum('start', 'end')",
        "desc": "Configure the data to follow one or the other data extreme, with a\n    maximum range size of ``follow_interval``.\n\n    If set to ``\"start\"`` then the range will adjust so that ``start`` always\n    corresponds to the minimum data value (or maximum, if ``flipped`` is\n    ``True``).\n\n    If set to ``\"end\"`` then the range will adjust so that ``end`` always\n    corresponds to the maximum data value (or minimum, if ``flipped`` is\n    ``True``).\n\n    If set to ``None`` (default), then auto-ranging does not follow, and\n    the range will encompass both the minimum and maximum data values.\n\n    ``follow`` cannot be used with bounds, and if set, bounds will be set to\n    ``None``.",
        "name": "follow",
        "default": null
      },
      {
        "type": "Float",
        "desc": "An explicitly supplied range end. If provided, will override\n    automatically computed end value.",
        "name": "end",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.",
        "name": "names",
        "default": []
      },
      {
        "type": "Float",
        "desc": "How much padding to add around the computed data bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``.",
        "name": "range_padding",
        "default": 0.1
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "An explicitly supplied range start. If provided, will override\n    automatically computed start value.",
        "name": "start",
        "default": null
      }
    ],
    "proto": "{\"bounds\": null, \"callback\": null, \"default_span\": 2.0, \"end\": null, \"flipped\": false, \"follow\": null, \"follow_interval\": null, \"id\": \"b07c0577-a8a2-4b58-b9d5-006d8e59c999\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"names\": [], \"range_padding\": 0.1, \"range_padding_units\": \"percent\", \"renderers\": [], \"start\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "An auto-fitting range in a continuous scalar dimension.\n    The upper and lower bounds are set to the min and max of the data.",
    "name": "DataRange1d",
    "bases": [
      "bokeh.models.ranges.DataRange"
    ]
  },
  "RemoteSource": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "The URL to the endpoint for the data.",
        "name": "data_url",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Int",
        "desc": "polling interval for updating data source in milliseconds",
        "name": "polling_interval",
        "default": null
      },
      {
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "name": "data",
        "default": {}
      },
      {
        "type": "Dict(String, Dict(String, Any))",
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "default": {
          "1d": {
            "indices": []
          },
          "2d": {
            "indices": {}
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"data\": {}, \"data_url\": null, \"id\": \"d0d6df4e-514e-4da4-8cc5-e96c051adc8c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"polling_interval\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "RemoteSource",
    "bases": [
      "bokeh.models.sources.ColumnDataSource"
    ]
  },
  "GuideRenderer": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      }
    ],
    "proto": "{\"id\": \"4dea02cd-f5f4-4457-a8cd-ef3bfa2fac85\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "A base class for all guide renderer types. ``GuideRenderer`` is\n    not generally useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "GuideRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ]
  },
  "AdaptiveTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "default": 10.0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "type": "Float",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"7f049b9e-834a-41d9-8143-86441dd9d466\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate \"nice\" round ticks at any magnitude.\n\n    Creates ticks that are \"base\" multiples of a set of given\n    mantissas. For example, with ``base=10`` and\n    ``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n        ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ...",
    "name": "AdaptiveTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ]
  },
  "TileSource": {
    "props": [
      {
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "default": 30
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "default": 0
      },
      {
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "default": ""
      },
      {
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "default": 256
      },
      {
        "type": "Float",
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "default": null
      },
      {
        "type": "Float",
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "default": null
      }
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"82559a33-9364-41a7-84f8-262f8748e29d\", \"initial_resolution\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"x_origin_offset\": null, \"y_origin_offset\": null}",
    "desc": "A base class for all tile source types.\n\n    In general, tile sources are used as a required input for ``TileRenderer``.",
    "name": "TileSource",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "CellEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"7251fc55-7efb-456a-8464-5663ad9881ac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Abstract base class for data table's cell editors.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "CellEditor",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "MultiLine": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the lines.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the lines.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the lines.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates for all the lines, given as a \"list of lists\".",
        "name": "xs",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the lines.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the lines.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates for all the lines, given as a \"list of lists\".",
        "name": "ys",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the lines.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the lines.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"id\": \"ef58b02d-ac31-4516-9e22-9c1e623644d6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}",
    "desc": "Render several lines.\n\n    The data for the ``MultiLine`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/MultiLine.py\n        :source-position: below",
    "name": "MultiLine",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Grid": {
    "props": [
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the Grid lines.",
        "name": "grid_line_join",
        "default": "miter"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the Grid lines.",
        "name": "grid_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "Which dimension the Axis Grid lines will intersect. The\n    x-axis is dimension 0 (vertical Grid lines) and the y-axis\n    is dimension 1 (horizontal Grid lines).",
        "name": "dimension",
        "default": 0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor Grid lines.",
        "name": "minor_grid_line_dash",
        "default": []
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "underlay"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Instance(Ticker)",
        "desc": "The Ticker to use for computing locations for the Grid lines.",
        "name": "ticker",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor Grid lines.",
        "name": "minor_grid_line_dash_offset",
        "default": 0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the Grid lines.",
        "name": "grid_line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the Grid lines.",
        "name": "grid_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor Grid lines.",
        "name": "minor_grid_line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color of alternating bands between Grid lines.",
        "name": "band_fill_color",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the Grid lines.",
        "name": "grid_line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor Grid lines.",
        "name": "minor_grid_line_color",
        "default": null
      },
      {
        "type": "Either(Auto, Tuple(Float, Float))",
        "desc": "Bounds for the rendered grid lines. If unset, the grid\n    lines will span the entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor Grid lines.",
        "name": "minor_grid_line_width",
        "default": 1
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the Grid lines.",
        "name": "grid_line_color",
        "default": "#e5e5e5"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor Grid lines.",
        "name": "minor_grid_line_join",
        "default": "miter"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor Grid lines.",
        "name": "minor_grid_line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha of alternating bands between Grid lines.",
        "name": "band_fill_alpha",
        "default": 0
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the Grid lines.",
        "name": "grid_line_width",
        "default": 1
      }
    ],
    "proto": "{\"band_fill_alpha\": {\"value\": 0}, \"band_fill_color\": {\"value\": null}, \"bounds\": \"auto\", \"dimension\": 0, \"grid_line_alpha\": {\"value\": 1.0}, \"grid_line_cap\": \"butt\", \"grid_line_color\": {\"value\": \"#e5e5e5\"}, \"grid_line_dash\": [], \"grid_line_dash_offset\": 0, \"grid_line_join\": \"miter\", \"grid_line_width\": {\"value\": 1}, \"id\": \"756f69db-b2d0-4521-b7e4-9f04d58e5519\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"minor_grid_line_alpha\": {\"value\": 1.0}, \"minor_grid_line_cap\": \"butt\", \"minor_grid_line_color\": {\"value\": null}, \"minor_grid_line_dash\": [], \"minor_grid_line_dash_offset\": 0, \"minor_grid_line_join\": \"miter\", \"minor_grid_line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Display horizontal or vertical grid lines at locations\n    given by a supplied ``Ticker``.",
    "name": "Grid",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ]
  },
  "Wedge": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the wedges.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the wedges.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "Radii of the wedges.",
        "name": "radius",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to end the wedges, as measured from the horizontal.",
        "name": "end_angle",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the wedges.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the points of the wedges.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the wedges.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the wedges.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the wedges.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "radius_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the wedges.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the wedges.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the wedges.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "start_angle_units",
        "default": "rad"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to start the wedges, as measured from the horizontal.",
        "name": "start_angle",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the points of the wedges.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "end_angle_units",
        "default": "rad"
      },
      {
        "type": "Enum('clock', 'anticlock')",
        "desc": "Which direction to stroke between the start and end angles.",
        "name": "direction",
        "default": "anticlock"
      }
    ],
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"3189449b-db1f-473f-a972-32e70f89899d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Wedge.py\n        :source-position: below",
    "name": "Wedge",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Tool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"f5a8747b-568a-4cec-8986-d982fd9baa3e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all interactive tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Tool",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "DataRange": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.",
        "name": "names",
        "default": []
      }
    ],
    "proto": "{\"callback\": null, \"id\": \"a0cad3d2-7696-40da-b94d-7935dd22afac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for all data range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "DataRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ]
  },
  "Label": {
    "props": [
      {
        "type": "Float",
        "desc": "Offset value to apply to the y-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "y_offset",
        "default": 0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size values for the text.",
        "name": "text_font_size",
        "default": {
          "value": "12pt"
        }
      },
      {
        "type": "String",
        "desc": "The text font values for the text.",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the text bounding box.",
        "name": "border_line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "Float",
        "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "y",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the text bounding box.",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the text bounding box.",
        "name": "border_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style values for the text.",
        "name": "text_font_style",
        "default": "normal"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the text bounding box.",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha values for the text.",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "type": "Angle",
        "desc": "The angle to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center.",
        "name": "angle",
        "default": 0
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the text bounding box.",
        "name": "border_line_dash",
        "default": []
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the text.",
        "name": "text_align",
        "default": "left"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the y attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "y_units",
        "default": "data"
      },
      {
        "type": "String",
        "desc": "The text value to render.",
        "name": "text",
        "default": null
      },
      {
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "type": "Float",
        "desc": "Offset value to apply to the x-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "x_offset",
        "default": 0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the x attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "x_units",
        "default": "data"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the text bounding box.",
        "name": "border_line_color",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color values for the text.",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the text bounding box.",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the text bounding box.",
        "name": "background_fill_color",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the text bounding box.",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the text.",
        "name": "text_baseline",
        "default": "bottom"
      }
    ],
    "proto": "{\"angle\": 0, \"angle_units\": \"rad\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"12a7da5c-dc7c-4cfd-a616-bbbc51d45149\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"visible\": true, \"x\": null, \"x_offset\": 0, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": 0, \"y_range_name\": \"default\", \"y_units\": \"data\"}",
    "desc": "Render a single text label as an annotation.\n\n    ``Label`` will render a single text label at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\n    Additionally, the label can be rotated with the ``angle`` property.\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.",
    "name": "Label",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ]
  },
  "CategoricalScale": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"acb2889e-b4ce-43fb-be1c-285780eb2d1e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "name": "CategoricalScale",
    "bases": [
      "bokeh.models.scales.LinearScale"
    ]
  },
  "CategoricalTicker": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"b5616ccb-dbea-4c4d-955f-67f89ebcb8f4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks for categorical ranges.",
    "name": "CategoricalTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ]
  },
  "GeoJSONDataSource": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, Dict(String, Any))",
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "default": {
          "1d": {
            "indices": []
          },
          "2d": {
            "indices": {}
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "JSON",
        "desc": "GeoJSON that contains features for plotting. Currently GeoJSONDataSource can\n    only process a FeatureCollection or GeometryCollection.",
        "name": "geojson",
        "default": null
      }
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"geojson\": null, \"id\": \"2acfe396-301e-4a6c-971e-607d5c918127\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "name": "GeoJSONDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ]
  },
  "ToolEvents": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "List(Dict(String, Any))",
        "desc": "",
        "name": "geometries",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"geometries\": [], \"id\": \"fea41f57-6420-4ddb-a29e-216255753236\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A class for reporting tools geometries from BokehJS.\n\n    .. warning::\n        This class will be superceded by a new general events system in the\n        near future.",
    "name": "ToolEvents",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "TableWidget": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Instance(DataSource)",
        "desc": "The source of data for the widget.",
        "name": "source",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"7bde77f8-d714-468e-8964-a676adb507ec\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"source\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for data table (data grid) widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "TableWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "LinearColorMapper": {
    "props": [
      {
        "type": "Color",
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "name": "high_color",
        "default": null
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "name": "low_color",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "name": "high",
        "default": null
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "type": "Float",
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "name": "low",
        "default": null
      },
      {
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "default": null
      }
    ],
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"f9966b64-fe59-40ff-95ec-77b0a0672ab6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Map numbers in a range [*low*, *high*] linearly into a\n    sequence of colors (a palette).\n\n    For example, if the range is [0, 99] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as\n    follows::\n\n             x < 0  : 'red'     # values < low are clamped\n        0 >= x < 33 : 'red'\n       33 >= x < 66 : 'green'\n       66 >= x < 99 : 'blue'\n       99 >= x      : 'blue'    # values > high are clamped",
    "name": "LinearColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ]
  },
  "PanTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the pan tool is constrained to act in. By default\n    the pan tool will pan in any dimension, but can be configured to only\n    pan horizontally across the width of the plot, or vertically across the\n    height of the plot.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"1bf32724-ad6e-4d3e-b141-6611af1c357b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |pan_icon|\n\n    The pan tool allows the user to pan a Plot by left-dragging\n    a mouse, or on touch devices by dragging a finger or stylus, across\n    the plot region.\n\n    The pan tool also activates the border regions of a Plot for \"single\n    axis\" panning. For instance, dragging in the vertical border or axis\n    will effect a pan in the vertical direction only, with the horizontal\n    dimension kept fixed.\n\n    .. |pan_icon| image:: /_images/icons/Pan.png\n        :height: 18pt",
    "name": "PanTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ]
  },
  "CheckboxEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"209f1d7e-4d4c-4d08-9dd3-0aadc97c5b63\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Boolean value cell editor.",
    "name": "CheckboxEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "GMapOptions": {
    "props": [
      {
        "type": "Int",
        "desc": "The initial zoom level to use when displaying the map.",
        "name": "zoom",
        "default": 12
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the Google map should display its distance scale control.",
        "name": "scale_control",
        "default": false
      },
      {
        "type": "Float",
        "desc": "The longitude where the map should be centered.",
        "name": "lng",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The latitude where the map should be centered.",
        "name": "lat",
        "default": null
      },
      {
        "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')",
        "desc": "The `map type`_ to use for the GMapPlot.\n\n    .. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId",
        "name": "map_type",
        "default": "roadmap"
      },
      {
        "type": "JSON",
        "desc": "A JSON array of `map styles`_ to use for the GMapPlot. Many example styles can\n    `be found here`_.\n\n    .. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n    .. _be found here: https://snazzymaps.com",
        "name": "styles",
        "default": null
      }
    ],
    "proto": "{\"id\": \"01b02034-3665-4b97-9a2f-edd5af610fd6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"map_type\": \"roadmap\", \"name\": null, \"scale_control\": false, \"styles\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}",
    "desc": "Options for GMapPlot objects.",
    "name": "GMapOptions",
    "bases": [
      "bokeh.models.map_plots.MapOptions"
    ]
  },
  "ContinuousColorMapper": {
    "props": [
      {
        "type": "Color",
        "desc": "Color to be used if data is lower than ``high`` value. If None,\n    values lower than ``high`` are mapped to the last color in the palette.",
        "name": "high_color",
        "default": null
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.",
        "name": "low_color",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``.",
        "name": "high",
        "default": null
      },
      {
        "type": "Color",
        "desc": "Color to be used if data is NaN. Default: 'gray'",
        "name": "nan_color",
        "default": "gray"
      },
      {
        "type": "Float",
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``.",
        "name": "low",
        "default": null
      },
      {
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of\n    any of the palettes shown in :ref:`bokeh.palettes`.",
        "name": "palette",
        "default": null
      }
    ],
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"26b6b365-9b6f-4f3e-9e9c-734a9028b643\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for continuous color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ContinuousColorMapper",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ]
  },
  "MercatorTickFormatter": {
    "props": [
      {
        "type": "Bool",
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.",
        "name": "use_scientific",
        "default": true
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('lat', 'lon')",
        "desc": "Specify whether to format ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick labels from Web Mercator requires considering coordinates from both\n    dimensions together. Use this property to specify which result should be\n    used for display.\n\n    Typically, if the formatter is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the formatter is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTickFormatter will result in\n    a validation error and a JavaScript console error.",
        "name": "dimension",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Either(Auto, Int)",
        "desc": "How many digits of precision to display in tick labels.",
        "name": "precision",
        "default": "auto"
      },
      {
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low",
        "name": "power_limit_low",
        "default": -3
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high",
        "name": "power_limit_high",
        "default": 5
      }
    ],
    "proto": "{\"dimension\": null, \"id\": \"29f57d2e-a884-45c5-8588-8599d229fc62\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}",
    "desc": "TickFormatter for values in WebMercator units.\n\n    Some map plot types internally use WebMercator to describe coordinates,\n    plot bounds, etc. These units are not very human-friendly. This tick\n    formatter will convert WebMercator units into Latitude and Longitude\n    for display on axes.",
    "name": "MercatorTickFormatter",
    "bases": [
      "bokeh.models.formatters.BasicTickFormatter"
    ]
  },
  "SaveTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"39ed8a45-cde2-41ac-b799-c608a61a8ed5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |save_icon|\n\n    The save tool is an action. When activated, the tool opens a download dialog\n    which allows to save an image reproduction of the plot in PNG format. If\n    automatic download is not support by a web browser, the tool falls back to\n    opening the generated image in a new tab or window. User then can manually\n    save it by right clicking on the image and choosing \"Save As\" (or similar)\n    menu item.\n\n    .. |save_icon| image:: /_images/icons/Save.png\n        :height: 18pt",
    "name": "SaveTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "Rect": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the rectangles.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the rectangles.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall heights of the rectangles.",
        "name": "height",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the rectangles.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the centers of the rectangles.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the rectangles.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the rectangles bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    rectangles to have a gap between them, when they should appear\n    flush.",
        "name": "dilate",
        "default": false
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the rectangles.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the rectangles.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the rectangles.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the rectangles, as measured from the horizontal.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the rectangles.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the rectangles.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "width_units",
        "default": "data"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall widths of the rectangles.",
        "name": "width",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the centers of the rectangles.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "height_units",
        "default": "data"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"dilate\": false, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"cc73405a-4e4f-4d23-bc87-bcb7df4240ce\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "desc": "Render rectangles.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Rect.py\n        :source-position: below",
    "name": "Rect",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Bezier": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the starting points.",
        "name": "y0",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the B\u00e9zier curves.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of second control points.",
        "name": "cx1",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the B\u00e9zier curves.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of second control points.",
        "name": "cy1",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of first control points.",
        "name": "cx0",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the B\u00e9zier curves.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the ending points.",
        "name": "y1",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the B\u00e9zier curves.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of first control points.",
        "name": "cy0",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the B\u00e9zier curves.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the ending points.",
        "name": "x1",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the B\u00e9zier curves.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the starting points.",
        "name": "x0",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the B\u00e9zier curves.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"cx0\": null, \"cx1\": null, \"cy0\": null, \"cy1\": null, \"id\": \"65be3e30-958c-4e04-bbce-f9c8ef8da9ec\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}",
    "desc": "Render B\u00e9zier curves.\n\n    For more information consult the `Wikipedia article for B\u00e9zier curve`_.\n\n    .. _Wikipedia article for B\u00e9zier curve: http://en.wikipedia.org/wiki/B\u00e9zier_curve\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Bezier.py\n        :source-position: below",
    "name": "Bezier",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "WheelZoomTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the wheel zoom tool is constrained to act in. By\n    default the wheel zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.",
        "name": "dimensions",
        "default": "both"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"dimensions\": \"both\", \"id\": \"8c7a4515-9917-44f2-b67b-061c96a5c491\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |wheel_zoom_icon|\n\n    The wheel zoom tool will zoom the plot in and out, centered on the\n    current mouse location.\n\n    The wheel zoom tool also activates the border regions of a Plot for\n    \"single axis\" zooming. For instance, zooming in the vertical border or\n    axis will effect a zoom in the vertical direction only, with the\n    horizontal dimension kept fixed.\n\n    .. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n        :height: 18pt",
    "name": "WheelZoomTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ]
  },
  "Glyph": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"7c4bbb26-f6ef-4d7d-b949-e28a5f3cabd2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for all glyph models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Glyph",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "PrintfTickFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "The number format, as defined as follows: the placeholder in the format\n    string is marked by % and is followed by one or more of these elements,\n    in this order:\n\n    * An optional ``+`` sign\n        Causes the result to be preceded with a plus or minus sign on numeric\n        values. By default, only the ``-`` sign is used on negative numbers.\n\n    * An optional padding specifier\n        Specifies what (if any) character to use for padding. Possible values\n        are 0 or any other character preceded by a ``'`` (single quote). The\n        default is to pad with spaces.\n\n    * An optional ``-`` sign\n        Causes sprintf to left-align the result of this placeholder. The default\n        is to right-align the result.\n\n    * An optional number\n        Specifies how many characters the result should have. If the value to be\n        returned is shorter than this number, the result will be padded.\n\n    * An optional precision modifier\n        Consists of a ``.`` (dot) followed by a number, specifies how many digits\n        should be displayed for floating point numbers. When used on a string, it\n        causes the result to be truncated.\n\n    * A type specifier\n        Can be any of:\n\n        - ``%`` --- yields a literal ``%`` character\n        - ``b`` --- yields an integer as a binary number\n        - ``c`` --- yields an integer as the character with that ASCII value\n        - ``d`` or ``i`` --- yields an integer as a signed decimal number\n        - ``e`` --- yields a float using scientific notation\n        - ``u`` --- yields an integer as an unsigned decimal number\n        - ``f`` --- yields a float as is\n        - ``o`` --- yields an integer as an octal number\n        - ``s`` --- yields a string as is\n        - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n        - ``X`` --- yields an integer as a hexadecimal number (upper-case)",
        "name": "format",
        "default": "%s"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"format\": \"%s\", \"id\": \"e430a0af-dfbf-4888-9a7d-6856a7c90ba3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Tick formatter based on a printf-style format string.",
    "name": "PrintfTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "TextEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"b70eaf6f-454f-4583-afd4-b96131afcb68\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Multi-line string cell editor.",
    "name": "TextEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "LinearInterpolator": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Either(String, Seq(Float))",
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "name": "y",
        "default": null
      },
      {
        "type": "Instance(ColumnarDataSource)",
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "name": "data",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Either(String, Seq(Float))",
        "desc": "Independant coordiante denoting the location of a point.",
        "name": "x",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "name": "clip",
        "default": true
      }
    ],
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"22222538-c55d-4bc3-8ef9-83e6d262d90d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Compute a linear interpolation between the control points provided through\n    the ``x``, ``y``, and ``data`` parameters.",
    "name": "LinearInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ]
  },
  "Circle": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The radius values for circle markers (in \"data space\" units, by default).\n\n    .. note::\n        Circle markers are slightly unusual in that they support specifying\n        a radius in addition to a size. Only one of ``radius`` or ``size``\n        should be given.\n\n    .. warning::\n        Note that ``Circle`` glyphs are always drawn as circles on the screen,\n        even in cases where the data space aspect ratio is not 1-1. In all\n        cases where radius values are specified, the \"distance\" for the radius\n        is measured along the dimension specified by ``radius_dimension``. If\n        the aspect ratio is very large or small, the drawn circles may appear\n        much larger or smaller than expected. See :bokeh-issue:`626` for more\n        information.",
        "name": "radius",
        "default": null
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "radius_units",
        "default": "data"
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('x', 'y')",
        "desc": "What dimension to measure circle radii along.\n\n    When the data space aspect ratio is not 1-1, then the size of the drawn\n    circles depends on what direction is used to measure the \"distance\" of\n    the radius. This property allows that direction to be controlled.",
        "name": "radius_dimension",
        "default": "x"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"7e15a548-9a37-4142-90f2-7bbb23b40e92\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"radius_dimension\": \"x\", \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render circle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Circle.py\n        :source-position: below",
    "name": "Circle",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "CheckboxButtonGroup": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Int)",
        "desc": "The list of indices of selected check boxes.",
        "name": "active",
        "default": []
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"active\": [], \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"445e6d2a-cd26-47a4-8e7f-e6e110be906a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of check boxes rendered as toggle buttons.",
    "name": "CheckboxButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ]
  },
  "LinearAxis": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "default": "{\"id\": \"eb7acad3-1eed-43bb-96fa-c1ddfcb3b88a\"}"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "default": "{\"id\": \"149b2dc6-cd5c-4829-96a2-36d39cbf269a\"}"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "default": ""
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(Either(Float, String), String)",
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "type": "String",
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "default": 5
      }
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"4a489e4b-6989-4215-a3fd-48649cd67d97\", \"type\": \"BasicTickFormatter\"}, \"id\": \"f5f2376d-72a1-452d-8836-ca73857e53d9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"171900ac-bdf5-4565-b189-05d9c85e0bcb\", \"type\": \"BasicTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An axis that picks nice numbers for tick locations on a\n    linear scale. Configured with a ``BasicTickFormatter`` by default.",
    "name": "LinearAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ]
  },
  "ColumnarDataSource": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, Dict(String, Any))",
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "default": {
          "1d": {
            "indices": []
          },
          "2d": {
            "indices": {}
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"id\": \"3658dde7-74aa-4403-9861-ef98c2a9f39c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for data source types, which can be mapped onto\n    a columnar format.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "ColumnarDataSource",
    "bases": [
      "bokeh.models.sources.DataSource"
    ]
  },
  "WidgetBox": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(Instance(Widget))",
        "desc": "The list of widgets to put in the layout box.",
        "name": "children",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"de71b226-e02e-4f70-bfd2-5957c1e19e29\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A container for widgets that are part of a layout.",
    "name": "WidgetBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ]
  },
  "RangeSlider": {
    "props": [
      {
        "type": "Enum('continuous', 'throttle', 'mouseup')",
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time.",
        "name": "callback_policy",
        "default": "throttle"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the current Slider value changes.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Float",
        "desc": "The maximum allowable value.",
        "name": "end",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Float",
        "desc": "Number of microseconds to pause between callback calls as the slider is moved.",
        "name": "callback_throttle",
        "default": 200
      },
      {
        "type": "Float",
        "desc": "The step between consecutive values.",
        "name": "step",
        "default": 0.1
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "The minimum allowable value.",
        "name": "start",
        "default": 0
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "name": "orientation",
        "default": "horizontal"
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Tuple(Float, Float)",
        "desc": "Initial or selected range.",
        "name": "range",
        "default": [
          0.1,
          0.9
        ]
      }
    ],
    "proto": "{\"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": null, \"disabled\": false, \"end\": 1, \"height\": null, \"id\": \"8ef674a0-dc58-4aa4-b460-e596420b8e06\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"range\": [0.1, 0.9], \"sizing_mode\": \"fixed\", \"start\": 0, \"step\": 0.1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "desc": "Range-slider based range selection widget",
    "name": "RangeSlider",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "DatetimeAxis": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "default": "{\"id\": \"5938c1cd-e383-4e90-bf55-149631d0329a\"}"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "default": "{\"id\": \"9226c06f-fec1-4ce4-b013-f9bb1006c3b6\"}"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "default": ""
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(Either(Float, String), String)",
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "type": "String",
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "default": 5
      }
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"604a1837-076d-486d-92c3-70ea6a847ed5\", \"type\": \"DatetimeTickFormatter\"}, \"id\": \"88039e0c-12f5-41d4-bef2-6f9cf1b4b711\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"b1007cb0-14a6-42a8-a0d1-7add14a323d8\", \"type\": \"DatetimeTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An LinearAxis that picks nice numbers for tick locations on\n    a datetime scale. Configured with a ``DatetimeTickFormatter`` by\n    default.",
    "name": "DatetimeAxis",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ]
  },
  "TimeEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"c50d8c32-9c14-4a54-8bc1-f4fc2a979d61\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Spinner-based time cell editor.",
    "name": "TimeEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "StringEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "An optional list of completion strings.",
        "name": "completions",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"completions\": [], \"id\": \"7b3a5699-4533-4601-af77-02f80e0fd351\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Basic string cell editor with auto-completion.",
    "name": "StringEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "LabelSet": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "y_offset",
        "default": 0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size values for the text.",
        "name": "text_font_size",
        "default": {
          "value": "12pt"
        }
      },
      {
        "type": "String",
        "desc": "The text font values for the text.",
        "name": "text_font",
        "default": "helvetica"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the text bounding box.",
        "name": "border_line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the text anchors.",
        "name": "y",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the text bounding box.",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the text bounding box.",
        "name": "border_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style values for the text.",
        "name": "text_font_style",
        "default": "normal"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the text bounding box.",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha values for the text.",
        "name": "text_alpha",
        "default": 1.0
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center.",
        "name": "angle",
        "default": 0
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the text bounding box.",
        "name": "border_line_dash",
        "default": []
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the text.",
        "name": "text_align",
        "default": "left"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "y_units",
        "default": "data"
      },
      {
        "type": "StringSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text values to render.",
        "name": "text",
        "default": "text"
      },
      {
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position.",
        "name": "x_offset",
        "default": 0
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default.",
        "name": "x_units",
        "default": "data"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the text bounding box.",
        "name": "border_line_color",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color values for the text.",
        "name": "text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "default": "{\"data\": {}, \"id\": \"ea587d9c-db00-4023-8254-89b625e44d66\"}"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the text anchors.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the text bounding box.",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the text bounding box.",
        "name": "background_fill_color",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the text bounding box.",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the text.",
        "name": "text_baseline",
        "default": "bottom"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"id\": \"6e26d677-f6fa-4f03-b709-254c992dc58d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"source\": {\"id\": \"cc9554b4-5e75-4951-9448-7dc5e240e91c\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"visible\": true, \"x\": null, \"x_offset\": {\"value\": 0}, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": {\"value\": 0}, \"y_range_name\": \"default\", \"y_units\": \"data\"}",
    "desc": "Render multiple text labels as annotations.\n\n    ``LabelSet`` will render multiple text labels at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space. In this case (as opposed to the single ``Label`` model),\n    ``x`` and ``y`` can also be the name of a column from a\n    :class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\n    will be \"vectorized\" using coordinate values from the specified columns.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\n    may be vectorized by giving the name of a data source column.\n\n    Additionally, the label can be rotated with the ``angle`` property (which\n    may also be a column name.)\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.\n\n    The data source is provided by setting the ``source`` property.",
    "name": "LabelSet",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ]
  },
  "Div": {
    "props": [
      {
        "type": "Bool",
        "desc": "Whether the contents should be rendered as raw text or as interpreted HTML.\n    The default value is ``False``, meaning contents are rendered as HTML.",
        "name": "render_as_text",
        "default": false
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The contents of the widget.",
        "name": "text",
        "default": ""
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"ddfb7d61-ea95-430e-b113-5aa7cc4dfce4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"render_as_text\": false, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "A block (div) of text.\n\n    This Bokeh model corresponds to an HTML ``<div>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_div.py\n        :source-position: below",
    "name": "Div",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ]
  },
  "DateRangeSlider": {
    "props": [
      {
        "type": "Bool",
        "desc": "Whether to show clickable arrows on both ends of the slider.",
        "name": "arrows",
        "default": true
      },
      {
        "type": "Tuple(Date, Date)",
        "desc": "The earliest and latest allowable dates.",
        "name": "bounds",
        "default": null
      },
      {
        "type": "Enum('show', 'hide', 'change')",
        "desc": "Show or hide value labels on both sides of the slider.",
        "name": "value_labels",
        "default": "show"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever either slider's value changes.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Enum('scroll', 'zoom')",
        "desc": "Whether mouse zoom should scroll or zoom selected range (or\n    do nothing).",
        "name": "wheel_mode",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Tuple(Date, Date)",
        "desc": "The initial or selected date range.",
        "name": "value",
        "default": null
      },
      {
        "type": "RelativeDelta",
        "desc": "The step between consecutive dates.",
        "name": "step",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Bool",
        "desc": "Enable or disable this widget.",
        "name": "enabled",
        "default": true
      },
      {
        "type": "Tuple(RelativeDelta, RelativeDelta)",
        "desc": "[TDB]",
        "name": "range",
        "default": null
      }
    ],
    "proto": "{\"arrows\": true, \"bounds\": null, \"callback\": null, \"css_classes\": null, \"disabled\": false, \"enabled\": true, \"height\": null, \"id\": \"8ffdd804-69b6-4e5d-ba0d-e4d23a0d2543\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"range\": null, \"sizing_mode\": \"fixed\", \"step\": {}, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": null, \"value_labels\": \"show\", \"wheel_mode\": null, \"width\": null}",
    "desc": "Slider-based date range selection widget.",
    "name": "DateRangeSlider",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ]
  },
  "Band": {
    "props": [
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "upper_units",
        "default": "data"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the band.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the band.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('width', 'height')",
        "desc": "The direction of the band.",
        "name": "dimension",
        "default": "height"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the band.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the band.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the band.",
        "name": "fill_color",
        "default": "#fff9ba"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the band.",
        "name": "line_alpha",
        "default": 0.3
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the band.",
        "name": "fill_alpha",
        "default": 0.4
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the band.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the band.",
        "name": "line_color",
        "default": "#cccccc"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "name": "base",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "base_units",
        "default": "data"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "lower_units",
        "default": "data"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "name": "source",
        "default": "{\"data\": {}, \"id\": \"1daefbd6-1537-4f75-8a50-7e0ff2278ef9\"}"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The coordinations of the upper portion of the filled area band.",
        "name": "upper",
        "default": null
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The coordinates of the lower portion of the filled area band.",
        "name": "lower",
        "default": null
      }
    ],
    "proto": "{\"base\": null, \"dimension\": \"height\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"e1fd55ce-a8d0-45b2-a5bf-12c818c0bb4e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"lower\": null, \"name\": null, \"plot\": null, \"source\": {\"id\": \"b29bcda1-2ea5-403e-9334-52076c4b5bac\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a filled area band along a dimension.",
    "name": "Band",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "InputWidget": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"08174cee-8a25-4027-b241-7a904d0a3b95\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "desc": "Abstract base class for input widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "InputWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "DateEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"9db36b56-ac7d-4d4d-81ca-44c7bdc19d71\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Calendar-based date cell editor.",
    "name": "DateEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "NumberEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Float",
        "desc": "The major step value.",
        "name": "step",
        "default": 0.01
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"6bf329fe-d1e4-4da9-80ef-45ceb59eaccd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 0.01, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Spinner-based number cell editor.",
    "name": "NumberEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "Jitter": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The width (absolute for uniform distribution and sigma for the normal distribution) of the random sample.",
        "name": "width",
        "default": 1
      },
      {
        "type": "Enum('uniform', 'normal')",
        "desc": "The random distribution upon which to pull the random scatter",
        "name": "distribution",
        "default": "uniform"
      },
      {
        "type": "Float",
        "desc": "The central value for the random sample",
        "name": "mean",
        "default": 0
      }
    ],
    "proto": "{\"distribution\": \"uniform\", \"id\": \"03412061-ff9f-409a-989e-07065d37b6f8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mean\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": 1}",
    "desc": "Apply either a uniform or normally sampled random jitter to data.",
    "name": "Jitter",
    "bases": [
      "bokeh.models.transforms.Transform"
    ]
  },
  "Row": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"139efbd6-c088-4434-95ba-11b1b211fd68\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Lay out child components in a single horizontal row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.",
    "name": "Row",
    "bases": [
      "bokeh.models.layouts.Box"
    ]
  },
  "Panel": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether this panel is closeable or not. If True, an \"x\" button will\n    appear.",
        "name": "closable",
        "default": false
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Instance(LayoutDOM)",
        "desc": "The child widget. If you need more children, use a layout widget,\n    e.g. ``Row`` or ``Column``.",
        "name": "child",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "An optional text title of the panel.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"child\": null, \"closable\": false, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c94503e5-b775-4d2f-9fc8-b02500a2fd1f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}",
    "desc": "A single-widget container with title bar and controls.",
    "name": "Panel",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ]
  },
  "Group": {
    "props": [
      {
        "type": "Bool",
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).",
        "name": "inline",
        "default": false
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"cbe4e5fb-0725-40fe-aea7-0ac2753d8afd\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for groups with items rendered as check/radio\n    boxes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Group",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup"
    ]
  },
  "BooleanFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')",
        "desc": "The icon visualizing the check mark.",
        "name": "icon",
        "default": "check"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"icon\": \"check\", \"id\": \"ba8aca06-a6a6-4142-b407-edc67fb40b0c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Boolean (check mark) cell formatter.",
    "name": "BooleanFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ]
  },
  "Ray": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the rays.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The length to extend the ray. Note that this ``length`` defaults\n    to screen units.",
        "name": "length",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the rays.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "length_units",
        "default": "data"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to start the rays.",
        "name": "y",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the rays.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the rays.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the rays.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to start the rays.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles in radians to extend the rays, as measured from the horizontal.",
        "name": "angle",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the rays.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the rays.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": null, \"id\": \"7618f947-2d39-4155-804a-ae016220f600\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"length\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render rays.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Ray.py\n        :source-position: below",
    "name": "Ray",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "Widget": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"545ccc37-9459-49b6-9b60-130d99668ed6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A base class for all interactive widget types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Widget",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ]
  },
  "FactorRange": {
    "props": [
      {
        "type": "Either(Auto, List(String), List(Int))",
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    Unlike Range1d and DataRange1d, factors do not have an order and so a\n    min and max cannot be proved in the same way. bounds accepts a list of\n    factors, that constrain the displayed factors.\n\n    By default, bounds are ``None``, allows unlimited panning or zooming.\n\n    If ``bounds='auto'``, bounds will be the same as factors and the plot\n    will not be able to pan or zoom beyond the first and last factors.\n\n    If you provide a list, then only the factors that are in that list will\n    be displayed on the plot and the plot will not pan or zoom outside the\n    first and last items in the shortened factors list. Note the order of\n    factors is the defining order for your plot.\n\n    Values of bounds that are not in factors are acceptable and will simply\n    have no impact on the plot.\n\n    Examples:\n\n    Auto behavior:\n\n    .. code-block:: python\n\n        x_range = FactorRange(\n            factors=[\"apples\", \"dogs\", \"peaches\", \"bananas\", \"pigs\"],\n            bounds='auto'\n        )\n\n        The plot will display all the factors and you will not be able to\n        pan left of apples or right of pigs.\n\n    Constraining behavior:\n\n    .. code-block:: python\n\n        x_range = FactorRange(\n            factors=[\"apples\", \"dogs\", \"peaches\", \"bananas\", \"pigs\"],\n            bounds=[\"apples\", \"bananas\", \"peaches\"]\n        )\n\n        Only the factors ``[\"apples\", \"peaches\", \"bananas\"]`` (in that\n        order) will appear in the plot, and the plot will not pan left of\n        ``\"apples\"`` or right of ``\"bananas\"``.",
        "name": "bounds",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Either(List(String), List(Int))",
        "desc": "A list of string or integer factors (categories) to comprise\n    this categorical range.",
        "name": "factors",
        "default": []
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum number of visible categories. If set to ``None`` (default),\n    the minimum interval is not bound.",
        "name": "min_interval",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum number of visible categories. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Float",
        "desc": "An offset to the (synthetic) range (default: 0)\n\n    .. note::\n        The primary usage of this is to support compatibility and integration\n        with other plotting systems, and will not generally of interest to\n        most users.",
        "name": "offset",
        "default": 0
      }
    ],
    "proto": "{\"bounds\": null, \"callback\": null, \"factors\": [], \"id\": \"f34f62c2-cda0-4403-a18e-8b790e823943\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"offset\": 0, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A range in a categorical dimension.\n\n    In addition to supplying ``factors`` keyword argument to the\n    ``FactorRange`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\n    .. note::\n        ``FactorRange`` may be renamed to ``CategoricalRange`` in\n        the future.",
    "name": "FactorRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ]
  },
  "QUADKEYTileSource": {
    "props": [
      {
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "default": 30
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "default": 156543.03392804097
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "default": 0
      },
      {
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "default": ""
      },
      {
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "default": 256
      },
      {
        "type": "Float",
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "type": "Float",
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "default": 20037508.34
      }
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"288d9a9e-4b2a-4261-9929-12f2d3ee6363\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The QUADKEYTileSource has the same tile origin as the WMTSTileSource\n    but requests tiles using a `quadkey` argument instead of X, Y, Z e.g. ``http://your.quadkey.tile.host/{Q}.png``",
    "name": "QUADKEYTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ]
  },
  "CategoricalAxis": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the axis label.",
        "name": "axis_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks.",
        "name": "formatter",
        "default": "{\"id\": \"9b8d23f2-9b0c-40e9-a562-10d512c33c42\"}"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "overlay"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "name": "ticker",
        "default": "{\"id\": \"0cf0066a-7823-4f6b-a151-19464d22e7a3\"}"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the axis label.",
        "name": "axis_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the axis line.",
        "name": "axis_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the axis line.",
        "name": "axis_line_alpha",
        "default": 1.0
      },
      {
        "type": "String",
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute.",
        "name": "axis_label",
        "default": ""
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "name": "axis_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.",
        "name": "bounds",
        "default": "auto"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "name": "axis_label_text_baseline",
        "default": "bottom"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 4
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(Either(Float, String), String)",
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting.",
        "name": "major_label_overrides",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.",
        "name": "major_label_orientation",
        "default": "horizontal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": "black"
      },
      {
        "type": "String",
        "desc": "The text font of the axis label.",
        "name": "axis_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 2
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the axis label.",
        "name": "axis_label_text_font_style",
        "default": "italic"
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "name": "axis_line_dash",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 6
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "name": "axis_label_text_align",
        "default": "left"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "alphabetic"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "name": "axis_line_cap",
        "default": "butt"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "name": "axis_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "black"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this guide renderer is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the axis label.",
        "name": "axis_label_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels.",
        "name": "axis_label_standoff",
        "default": 5
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the axis line.",
        "name": "axis_line_color",
        "default": "black"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks.",
        "name": "major_label_standoff",
        "default": 5
      }
    ],
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"miter\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"formatter\": {\"id\": \"c93c7dba-308a-45ca-9f0d-07618c2d22a4\", \"type\": \"CategoricalTickFormatter\"}, \"id\": \"9ebd91ab-6549-4d3b-8425-0a9b8797b04a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"2fcd941a-33a7-4b1a-8dc8-05ab5bc44e99\", \"type\": \"CategoricalTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "An axis that picks evenly spaced tick locations for a\n    collection of categories/factors.",
    "name": "CategoricalAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ]
  },
  "Triangle": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"e3e7f7e0-c69b-453f-9ba0-8aa888d8e4af\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Triangle.py\n        :source-position: below",
    "name": "Triangle",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "Action": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"3e0447b4-13fd-4318-a485-119322f2929a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A base class for tools that are buttons in the toolbar.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Action",
    "bases": [
      "bokeh.models.tools.Tool"
    ]
  },
  "Interpolator": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Either(String, Seq(Float))",
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "name": "y",
        "default": null
      },
      {
        "type": "Instance(ColumnarDataSource)",
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "name": "data",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Either(String, Seq(Float))",
        "desc": "Independant coordiante denoting the location of a point.",
        "name": "x",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.",
        "name": "clip",
        "default": true
      }
    ],
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"cd441acc-f973-407a-8fff-99abc7ceef2f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Base class for interpolator transforms.\n\n    Interpolators return the value of a function which has been evaluated\n    between specified (x, y) pairs of data.  As an example, if two control\n    point pairs were provided to the interpolator, a linear interpolaction\n    at a specific value of 'x' would result in the value of 'y' which existed\n    on the line conneting the two control points.\n\n    The control point pairs for the interpolators can be specified through either\n\n    * A literal sequence of values:\n\n    .. code-block: python\n\n        interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n    * or a pair of columns defined in a `ColumnDataSource` object:\n\n    .. code-block: python\n\n        interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\n    This is the base class and is not intended to end use.  Please see the\n    documentation for the final derived classes (Jitter, LineraInterpolator,\n    StepInterpolator) for mor information on their specific methods of\n    interpolation.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Interpolator",
    "bases": [
      "bokeh.models.transforms.Transform"
    ]
  },
  "Callback": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"b52d93a5-2655-4967-a9b8-1ce74fc2e0b6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Base class for interactive callback.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Callback",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "MercatorTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "default": 10.0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('lat', 'lon')",
        "desc": "Specify whether to generate ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick locations from Web Mercator requires considering coordinates from\n    both dimensions together. Use this property to specify which result should\n    be returned.\n\n    Typically, if the ticker is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the ticker is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTicker will result in a\n    validation error and a JavaScript console error.",
        "name": "dimension",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "type": "Float",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"dimension\": null, \"id\": \"2512c696-33b9-4115-8322-190556e9f9a1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate nice lat/lon ticks form underlying WebMercator coordinates.",
    "name": "MercatorTicker",
    "bases": [
      "bokeh.models.tickers.BasicTicker"
    ]
  },
  "GMapPlot": {
    "props": [
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_right",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the plot border outline.",
        "name": "outline_line_join",
        "default": "miter"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "name": "left",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha for the plot border outline.",
        "name": "outline_line_alpha",
        "default": 1.0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "name": "lod_interval",
        "default": 300
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_top",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether to use HiDPI mode when available.",
        "name": "hidpi",
        "default": true
      },
      {
        "type": "Bool",
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "name": "toolbar_sticky",
        "default": true
      },
      {
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "name": "output_backend",
        "default": "canvas"
      },
      {
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_x_ranges",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the plot border style.",
        "name": "border_fill_alpha",
        "default": 1.0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color for the plot border outline.",
        "name": "outline_line_color",
        "default": "#e5e5e5"
      },
      {
        "type": "String",
        "desc": "Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\n    for more information on how to obtain your own.",
        "name": "api_key",
        "default": null
      },
      {
        "type": "Instance(Title)",
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "name": "title",
        "default": "{\"id\": \"dda42822-4864-48be-9f16-fc08f15943f9\", \"text\": \"\"}"
      },
      {
        "type": "Bool",
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "name": "h_symmetry",
        "default": true
      },
      {
        "type": "Int",
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_height",
        "default": null
      },
      {
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "name": "x_scale",
        "default": "{\"id\": \"71a44149-9c6c-426f-93ae-df448769aea5\"}"
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area below of the plot.",
        "name": "below",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The line dash offset for the plot border outline.",
        "name": "outline_line_dash_offset",
        "default": 0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash for the plot border outline.",
        "name": "outline_line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width for the plot border outline.",
        "name": "outline_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "name": "plot_height",
        "default": 600
      },
      {
        "type": "Int",
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_width",
        "default": null
      },
      {
        "type": "Int",
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "name": "lod_factor",
        "default": 10
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the plot border style.",
        "name": "border_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the plot background style.",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Instance(ToolEvents)",
        "desc": "A ToolEvents object to share and report tool events.",
        "name": "tool_events",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Int",
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_height",
        "default": null
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "name": "min_border",
        "default": 5
      },
      {
        "type": "Int",
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "name": "lod_timeout",
        "default": 500
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "name": "right",
        "default": []
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_left",
        "default": null
      },
      {
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_y_ranges",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "name": "lod_threshold",
        "default": 2000
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_bottom",
        "default": null
      },
      {
        "type": "Instance(Range)",
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "name": "x_range",
        "default": null
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "name": "title_location",
        "default": "above"
      },
      {
        "type": "Instance(GMapOptions)",
        "desc": "Options for displaying the plot.",
        "name": "map_options",
        "default": null
      },
      {
        "type": "Int",
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "name": "plot_width",
        "default": 600
      },
      {
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "name": "y_scale",
        "default": "{\"id\": \"7185fe85-9976-4311-823d-c7f5f608d505\"}"
      },
      {
        "type": "Int",
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_width",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the plot border outline.",
        "name": "outline_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area above of the plot.",
        "name": "above",
        "default": []
      },
      {
        "type": "Instance(Range)",
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "name": "y_range",
        "default": null
      },
      {
        "type": "Instance(Toolbar)",
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "name": "toolbar",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the plot background style.",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "type": "Bool",
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "name": "v_symmetry",
        "default": false
      }
    ],
    "proto": "{\"above\": [], \"api_key\": null, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"a7abf37d-3890-4b9d-a661-2a2d8b15f544\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"map_options\": null, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"4a105c02-4fe8-438d-83a2-13d1467d90c2\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"b942da49-6662-426a-8380-65c04508d75e\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"72495817-1c43-4502-a945-397d6cd6dde8\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"8de8086e-e179-4050-b7b1-1bea1684ed96\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"4096ad42-40fe-493f-999e-0ba14599bfaa\", \"type\": \"LinearScale\"}}",
    "desc": "A Bokeh Plot with a `Google Map`_ displayed underneath.\n\n    Data placed on this plot should be specified in decimal lat long coordinates e.g. 37.123, -122.404.\n    It will be automatically converted into the web mercator projection to display properly over\n    google maps tiles.\n\n    .. _Google Map: https://www.google.com/maps/",
    "name": "GMapPlot",
    "bases": [
      "bokeh.models.map_plots.MapPlot"
    ]
  },
  "ColorBar": {
    "props": [
      {
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "name": "minor_tick_line_dash",
        "default": []
      },
      {
        "type": "Instance(TickFormatter)",
        "desc": "A TickFormatter to use for formatting the visual appearance of ticks.",
        "name": "formatter",
        "default": "{\"id\": \"db0c6eb7-dabd-4dfb-9791-99285181b805\"}"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width for the color bar border outline.",
        "name": "border_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) to separate the title from the color bar.",
        "name": "title_standoff",
        "default": 2
      },
      {
        "type": "Float",
        "desc": "The alpha with which to render the color scale.",
        "name": "scale_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the color scale bar outline.",
        "name": "bar_line_cap",
        "default": "butt"
      },
      {
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.",
        "name": "ticker",
        "default": "{\"id\": \"e1f05bb6-d31b-43a4-ba62-5da9cb80a0c4\"}"
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha for the color bar border outline.",
        "name": "border_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) that minor ticks should extend into the\n    main plot area.",
        "name": "minor_tick_in",
        "default": 0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "name": "minor_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "String",
        "desc": "The title text to render.",
        "name": "title",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha for the color scale bar outline.",
        "name": "bar_line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "name": "major_tick_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style of the major tick labels.",
        "name": "major_label_text_font_style",
        "default": "normal"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color values for the title text.",
        "name": "title_text_color",
        "default": "#444444"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the minor ticks.",
        "name": "minor_tick_line_width",
        "default": 1
      },
      {
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "name": "major_tick_line_dash",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area.",
        "name": "minor_tick_out",
        "default": 0
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "name": "major_label_text_align",
        "default": "center"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color for the color bar border outline.",
        "name": "border_line_color",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Either(Auto, Int)",
        "desc": "The width (in pixels) that the color scale should occupy.",
        "name": "width",
        "default": "auto"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "name": "minor_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the minor ticks.",
        "name": "minor_tick_line_color",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the color bar background style.",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Whether the color bar should be oriented vertically or horizontally.",
        "name": "orientation",
        "default": "vertical"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha values for the title text.",
        "name": "title_text_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) that major ticks should extend into the\n    main plot area.",
        "name": "major_tick_in",
        "default": 5
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the major ticks.",
        "name": "major_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size of the major tick labels.",
        "name": "major_label_text_font_size",
        "default": {
          "value": "8pt"
        }
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The text color of the major tick labels.",
        "name": "major_label_text_color",
        "default": "#444444"
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the title text.",
        "name": "title_text_baseline",
        "default": "bottom"
      },
      {
        "type": "Either(Auto, Int)",
        "desc": "The height (in pixels) that the color scale should occupy.",
        "name": "height",
        "default": "auto"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "name": "major_tick_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area.",
        "name": "major_tick_out",
        "default": 0
      },
      {
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the title text.",
        "name": "title_text_align",
        "default": "left"
      },
      {
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "name": "major_label_text_font",
        "default": "helvetica"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the color bar border outline.",
        "name": "border_line_cap",
        "default": "butt"
      },
      {
        "type": "Int",
        "desc": "Amount of margin (in pixels) around the outside of the color bar.",
        "name": "margin",
        "default": 30
      },
      {
        "type": "Int",
        "desc": "The line dash offset for the color bar border outline.",
        "name": "border_line_dash_offset",
        "default": 0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash for the color bar border outline.",
        "name": "border_line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha of the minor ticks.",
        "name": "minor_tick_line_alpha",
        "default": 1.0
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "name": "major_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "String",
        "desc": "The text font values for the title text.",
        "name": "title_text_font",
        "default": "helvetica"
      },
      {
        "type": "Int",
        "desc": "The distance (in pixels) to separate the tick labels from the color bar.",
        "name": "label_standoff",
        "default": 5
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width for the color scale bar outline.",
        "name": "bar_line_width",
        "default": 1
      },
      {
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "name": "major_label_text_baseline",
        "default": "middle"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width of the major ticks.",
        "name": "major_tick_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "The line dash offset for the color scale bar outline.",
        "name": "bar_line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color for the color scale bar outline.",
        "name": "bar_line_color",
        "default": null
      },
      {
        "type": "FontSizeSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), List(String))), List(String))",
        "desc": "The text font size values for the title text.",
        "name": "title_text_font_size",
        "default": {
          "value": "10pt"
        }
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color of the major ticks.",
        "name": "major_tick_line_color",
        "default": "#ffffff"
      },
      {
        "type": "Instance(ContinuousColorMapper)",
        "desc": "A continuous color mapper containing a color palette to render.\n\n    .. warning::\n        If the `low` and `high` attributes of the ColorMapper aren't set, ticks\n        and tick labels won't be rendered. Additionally, if a LogTicker is\n        passed to the `ticker` argument and either or both of the logarithms\n        of `low` and `high` values of the color_mapper are non-numeric\n        (i.e. `low=0`), the tick and tick labels won't be rendered.",
        "name": "color_mapper",
        "default": null
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))",
        "desc": "The location where the color bar should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).\n\n    .. warning::\n        If the color bar is placed in a side panel, the location will likely\n        have to be set to `(0,0)`.",
        "name": "location",
        "default": "top_right"
      },
      {
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "name": "minor_tick_line_dash_offset",
        "default": 0
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the color bar border outline.",
        "name": "border_line_join",
        "default": "miter"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the color scale bar outline.",
        "name": "bar_line_join",
        "default": "miter"
      },
      {
        "type": "Int",
        "desc": "Amount of padding (in pixels) between the color scale and color bar border.",
        "name": "padding",
        "default": 10
      },
      {
        "type": "DashPattern",
        "desc": "The line dash for the color scale bar outline.",
        "name": "bar_line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the color bar background style.",
        "name": "background_fill_alpha",
        "default": 0.95
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The text alpha of the major tick labels.",
        "name": "major_label_text_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('normal', 'italic', 'bold')",
        "desc": "The text font style values for the title text.",
        "name": "title_text_font_style",
        "default": "italic"
      }
    ],
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"bar_line_alpha\": {\"value\": 1.0}, \"bar_line_cap\": \"butt\", \"bar_line_color\": {\"value\": null}, \"bar_line_dash\": [], \"bar_line_dash_offset\": 0, \"bar_line_join\": \"miter\", \"bar_line_width\": {\"value\": 1}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"miter\", \"border_line_width\": {\"value\": 1}, \"color_mapper\": null, \"formatter\": {\"id\": \"f060c038-41ba-42e2-8ec3-320e0916b259\", \"type\": \"BasicTickFormatter\"}, \"height\": \"auto\", \"id\": \"f6f5aeda-42e8-4757-a87c-6957c723309d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_standoff\": 5, \"level\": \"annotation\", \"location\": \"top_right\", \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"middle\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_tick_in\": 5, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"#ffffff\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"miter\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 0, \"margin\": 30, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": null}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"miter\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 0, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"scale_alpha\": 1.0, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"d529abb7-4efc-406d-b4cf-e8387f3f54b2\", \"type\": \"BasicTicker\"}, \"title\": null, \"title_standoff\": 2, \"title_text_align\": \"left\", \"title_text_alpha\": {\"value\": 1.0}, \"title_text_baseline\": \"bottom\", \"title_text_color\": {\"value\": \"#444444\"}, \"title_text_font\": \"helvetica\", \"title_text_font_size\": {\"value\": \"10pt\"}, \"title_text_font_style\": \"italic\", \"visible\": true, \"width\": \"auto\"}",
    "desc": "Render a color bar based on a color mapper.",
    "name": "ColorBar",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "TMSTileSource": {
    "props": [
      {
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "default": 30
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "default": 156543.03392804097
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "default": 0
      },
      {
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "default": ""
      },
      {
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "default": 256
      },
      {
        "type": "Float",
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "type": "Float",
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "default": 20037508.34
      }
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"3ac3d5c6-eaa9-4247-a267-f0d4c71f6c8c\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The TMSTileSource contains tile config info and provides urls for\n    tiles based on a templated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``.\n    The defining feature of TMS is the tile-origin in located at the bottom-left.\n\n    The TMSTileSource can also be helpful in implementing tile renderers for\n    custom tile sets, including non-spatial datasets.",
    "name": "TMSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ]
  },
  "OpenHead": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the arrow head outline.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Float",
        "desc": "The size, in pixels, of the arrow head.",
        "name": "size",
        "default": 25
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the arrow head outline.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the arrow head outline.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the arrow head outline.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the arrow head outline.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"id\": \"57109b0f-7daa-40b3-b13e-e819f9493e29\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Render an open-body arrow head.",
    "name": "OpenHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ]
  },
  "WMTSTileSource": {
    "props": [
      {
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "name": "max_zoom",
        "default": 30
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "name": "attribution",
        "default": ""
      },
      {
        "type": "Float",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.",
        "name": "initial_resolution",
        "default": 156543.03392804097
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.",
        "name": "wrap_around",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "name": "min_zoom",
        "default": 0
      },
      {
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "name": "url",
        "default": ""
      },
      {
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "name": "tile_size",
        "default": 256
      },
      {
        "type": "Float",
        "desc": "A y-offset in plot coordinates",
        "name": "y_origin_offset",
        "default": 20037508.34
      },
      {
        "type": "Float",
        "desc": "An x-offset in plot coordinates",
        "name": "x_origin_offset",
        "default": 20037508.34
      }
    ],
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"d3f6c82f-e0f6-4885-a78e-f91713d5978e\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}",
    "desc": "The ``WMTSTileSource`` behaves much like ``TMSTileSource`` but has its\n    tile-origin in the top-left.\n\n    This is the most common used tile source for web mapping applications.\n    Such companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\n    service which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``.",
    "name": "WMTSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ]
  },
  "DatetimeTickFormatter": {
    "props": [
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``seconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "seconds",
        "default": [
          "%Ss"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``days`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "days",
        "default": [
          "%m/%d",
          "%a%d"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``milliseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "milliseconds",
        "default": [
          "%3Nms",
          "%S.%3Ns"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``years`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "years",
        "default": [
          "%Y"
        ]
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``minutes`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "minutes",
        "default": [
          ":%M",
          "%Mm"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "minsec",
        "default": [
          ":%M:%S"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``microseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "microseconds",
        "default": [
          "%fus"
        ]
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``hours`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "hours",
        "default": [
          "%Hh",
          "%H:%M"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "hourmin",
        "default": [
          "%H:%M"
        ]
      },
      {
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``months`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "name": "months",
        "default": [
          "%m/%Y",
          "%b%y"
        ]
      }
    ],
    "proto": "{\"days\": [\"%m/%d\", \"%a%d\"], \"hourmin\": [\"%H:%M\"], \"hours\": [\"%Hh\", \"%H:%M\"], \"id\": \"80ff0f0e-5793-45ed-b8c6-2343e33c2a54\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"microseconds\": [\"%fus\"], \"milliseconds\": [\"%3Nms\", \"%S.%3Ns\"], \"minsec\": [\":%M:%S\"], \"minutes\": [\":%M\", \"%Mm\"], \"months\": [\"%m/%Y\", \"%b%y\"], \"name\": null, \"seconds\": [\"%Ss\"], \"subscribed_events\": [], \"tags\": [], \"years\": [\"%Y\"]}",
    "desc": "A ``TickFormatter`` for displaying datetime values nicely across a\n    range of scales.\n\n    ``DatetimeTickFormatter`` has the following properties (listed together\n    with their default values) that can be used to control the formatting\n    of axis ticks at different scales scales:\n\n    .. code-block:: python\n\n        microseconds = ['%fus']\n\n        milliseconds = ['%3Nms', '%S.%3Ns']\n\n        seconds = ['%Ss']\n\n        minsec = [':%M:%S']\n\n        minutes = [':%M', '%Mm']\n\n        hourmin = ['%H:%M']\n\n        hours = ['%Hh', '%H:%M']\n\n        days = ['%m/%d', '%a%d']\n\n        months = ['%m/%Y', '%b%y']\n\n        years = ['%Y']\n\n    Each scale property can be set to format or list of formats to use for\n    formatting datetime tick values that fall in in that \"time scale\".\n    By default, only the first format string passed for each time scale\n    will be used. By default, all leading zeros are stripped away from\n    the formatted labels.\n\n    This list of supported `strftime`_ formats is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues",
    "name": "DatetimeTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "Span": {
    "props": [
      {
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the location attribute. Interpreted as \"data space\"\n    units by default.",
        "name": "location_units",
        "default": "data"
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the span is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\"",
        "name": "render_mode",
        "default": "canvas"
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the span.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the span.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('width', 'height')",
        "desc": "The direction of the span.",
        "name": "dimension",
        "default": "width"
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the span.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the span.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Float",
        "desc": "The location of the span, along ``dimension``.",
        "name": "location",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range.",
        "name": "y_range_name",
        "default": "default"
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the span.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range.",
        "name": "x_range_name",
        "default": "default"
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the span.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the span.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"dimension\": \"width\", \"id\": \"98ed1f17-6284-46c6-8cfe-db5e11a335c0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"location\": null, \"location_units\": \"data\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}",
    "desc": "Render a horizontal or vertical line span.",
    "name": "Span",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "Paragraph": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "String",
        "desc": "The contents of the widget.",
        "name": "text",
        "default": ""
      }
    ],
    "proto": "{\"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"d86a0aa6-a4cd-40c0-bd26-61975482321c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}",
    "desc": "A block (paragraph) of text.\n\n    This Bokeh model corresponds to an HTML ``<p>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_paragraph.py\n        :source-position: below",
    "name": "Paragraph",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ]
  },
  "SquareCross": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"0e3f27c7-5892-4c74-b22c-79ff93f8f71c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render square markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/SquareCross.py\n        :source-position: below",
    "name": "SquareCross",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "CustomJSTransform": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n    ``x`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            func = '''\n            return Math.floor(x) + 0.5\n            '''",
        "name": "func",
        "default": ""
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Dict(String, Instance(Model))",
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback.",
        "name": "args",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A snippet of JavaScript code to transform an array of values. The variable\n    ``xs`` will contain the untransformed array and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            v_func = '''\n            new_xs = new Array(xs.length)\n            for(i = 0; i < xs.length; i++) {\n                new_xs[i] = xs[i] + 0.5\n            }\n            return new_xs\n            '''\n\n    .. warning::\n        The vectorized function, ``v_func``, must return an array of the\n        same length as the input ``xs`` array.",
        "name": "v_func",
        "default": ""
      }
    ],
    "proto": "{\"args\": {}, \"func\": \"\", \"id\": \"bff45153-7af4-4d04-b878-e0fcba12314d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"v_func\": \"\"}",
    "desc": "Apply a custom defined transform to data.",
    "name": "CustomJSTransform",
    "bases": [
      "bokeh.models.transforms.Transform"
    ]
  },
  "Plot": {
    "props": [
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_right",
        "default": null
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the plot border outline.",
        "name": "outline_line_join",
        "default": "miter"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "name": "left",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha for the plot border outline.",
        "name": "outline_line_alpha",
        "default": 1.0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.",
        "name": "lod_interval",
        "default": 300
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_top",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether to use HiDPI mode when available.",
        "name": "hidpi",
        "default": true
      },
      {
        "type": "Bool",
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.",
        "name": "toolbar_sticky",
        "default": true
      },
      {
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.",
        "name": "output_backend",
        "default": "canvas"
      },
      {
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_x_ranges",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the plot border style.",
        "name": "border_fill_alpha",
        "default": 1.0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color for the plot border outline.",
        "name": "outline_line_color",
        "default": "#e5e5e5"
      },
      {
        "type": "Instance(Title)",
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "name": "title",
        "default": "{\"id\": \"b7eb4ed8-908e-4e04-af50-23d0b1d5a4ff\", \"text\": \"\"}"
      },
      {
        "type": "Bool",
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger).",
        "name": "h_symmetry",
        "default": true
      },
      {
        "type": "Int",
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_height",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.",
        "name": "x_scale",
        "default": "{\"id\": \"55b85f96-a1d3-4950-8ef4-de3ac5ad7b0b\"}"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area below of the plot.",
        "name": "below",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The line dash offset for the plot border outline.",
        "name": "outline_line_dash_offset",
        "default": 0
      },
      {
        "type": "DashPattern",
        "desc": "The line dash for the plot border outline.",
        "name": "outline_line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width for the plot border outline.",
        "name": "outline_line_width",
        "default": 1
      },
      {
        "type": "Int",
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used.",
        "name": "plot_height",
        "default": 600
      },
      {
        "type": "Int",
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_width",
        "default": null
      },
      {
        "type": "Int",
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "name": "lod_factor",
        "default": 10
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the plot border style.",
        "name": "border_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color for the plot background style.",
        "name": "background_fill_color",
        "default": "#ffffff"
      },
      {
        "type": "Instance(ToolEvents)",
        "desc": "A ToolEvents object to share and report tool events.",
        "name": "tool_events",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Int",
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "layout_height",
        "default": null
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.",
        "name": "min_border",
        "default": 5
      },
      {
        "type": "Int",
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.",
        "name": "lod_timeout",
        "default": 500
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "name": "right",
        "default": []
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_left",
        "default": null
      },
      {
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.",
        "name": "extra_y_ranges",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.",
        "name": "lod_threshold",
        "default": 2000
      },
      {
        "type": "Int",
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.",
        "name": "min_border_bottom",
        "default": null
      },
      {
        "type": "Instance(Range)",
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "name": "x_range",
        "default": null
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated.",
        "name": "title_location",
        "default": "above"
      },
      {
        "type": "Int",
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used.",
        "name": "plot_width",
        "default": 600
      },
      {
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.",
        "name": "y_scale",
        "default": "{\"id\": \"5ab7575c-c940-4961-9adc-5d56dcbfa66a\"}"
      },
      {
        "type": "Int",
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.",
        "name": "inner_width",
        "default": null
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the plot border outline.",
        "name": "outline_line_cap",
        "default": "butt"
      },
      {
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.",
        "name": "toolbar_location",
        "default": "right"
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area above of the plot.",
        "name": "above",
        "default": []
      },
      {
        "type": "Instance(Range)",
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "name": "y_range",
        "default": null
      },
      {
        "type": "Instance(Toolbar)",
        "desc": "The toolbar associated with this plot which holds all the tools.\n\n        The toolbar is automatically created with the plot.",
        "name": "toolbar",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha for the plot background style.",
        "name": "background_fill_alpha",
        "default": 1.0
      },
      {
        "type": "Bool",
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger).",
        "name": "v_symmetry",
        "default": false
      }
    ],
    "proto": "{\"above\": [], \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": null, \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"45d1d905-9b6f-419b-b882-eb01247cbf0a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"miter\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"dd32cfc5-b672-4b61-ade9-f7b2c23345ab\", \"type\": \"Title\"}, \"title_location\": \"above\", \"tool_events\": {\"id\": \"b278b96c-d82e-4415-a2b1-5d3d59462d20\", \"type\": \"ToolEvents\"}, \"toolbar\": {\"id\": \"097e0cd4-65df-4c6f-8d7b-c21714d95a25\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": null, \"x_scale\": {\"id\": \"37aae758-1c4b-4d09-a37a-36c488e69c0a\", \"type\": \"LinearScale\"}, \"y_range\": null, \"y_scale\": {\"id\": \"366d34a6-a8ac-4379-bb21-6886a3d43a1a\", \"type\": \"LinearScale\"}}",
    "desc": "Model representing a plot, containing glyphs, guides, annotations.",
    "name": "Plot",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ]
  },
  "ImageSource": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n    These variables are useful for parts of tile urls which do not change from tile to tile (e.g. server host name, or layer name).",
        "name": "extra_url_vars",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "String",
        "desc": "tile service url (example: http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png)",
        "name": "url",
        "default": ""
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"extra_url_vars\": {}, \"id\": \"77063bf9-f960-4c0b-85a7-2ad0a8377761\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"\"}",
    "desc": "A base class for all image source types.",
    "name": "ImageSource",
    "bases": [
      "bokeh.model.Model"
    ]
  },
  "DiamondCross": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"53676d44-9d47-4f39-b97b-4882281ceecb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render diamond markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/DiamondCross.py\n        :source-position: below",
    "name": "DiamondCross",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "IntEditor": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Int",
        "desc": "The major step value.",
        "name": "step",
        "default": 1
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"260405e3-2833-48b7-9c5f-7d6917c44ae8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Spinner-based integer cell editor.",
    "name": "IntEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ]
  },
  "ResizeTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"1a55308f-defb-42b3-9fdf-80afd9876e86\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |resize_icon|\n\n    The resize tool allows the user to left-drag a mouse or drag a finger\n    to resize the entire plot area on the screen.\n\n    .. |resize_icon| image:: /_images/icons/Resize.png\n        :height: 18pt",
    "name": "ResizeTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ]
  },
  "WheelPanTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('width', 'height')",
        "desc": "Which dimension the wheel pan tool is constrained to act in. By\n    default the wheel pan tool will pan the plot along the x-axis.",
        "name": "dimension",
        "default": "width"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"dimension\": \"width\", \"id\": \"c52cbab5-0e43-40c0-b6d9-36ce46a52710\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |wheel_pan_icon|\n\n    The wheel pan tool allows the user to pan the plot along the configured\n    dimension using the scroll wheel.\n\n    .. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n        :height: 18pt",
    "name": "WheelPanTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ]
  },
  "DataTable": {
    "props": [
      {
        "type": "Bool",
        "desc": "Whether columns should be fit to the available width. This results in no\n    horizontal scrollbar showing up, but data can get unreadable if there is\n    no enough space available. If set to ``True``, columns' width is\n    understood as maximum width.",
        "name": "fit_columns",
        "default": true
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": 400
      },
      {
        "type": "Bool",
        "desc": "Whenever a selection is made on the data source, scroll the selected\n    rows into the table's viewport if none of the selected rows are already\n    in the viewport.",
        "name": "scroll_to_selection",
        "default": true
      },
      {
        "type": "Either(Bool, Enum('checkbox'))",
        "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\n    equivalent  to ``True``, but makes selection visible through a checkbox\n    for each row,  instead of highlighting rows. Multiple selection is\n    allowed and can be achieved by either clicking multiple checkboxes (if\n    enabled) or using Shift + click on rows.",
        "name": "selectable",
        "default": true
      },
      {
        "type": "Bool",
        "desc": "Allows to sort table's contents. By default natural order is preserved.\n    To sort a column, click on it's header. Clicking one more time changes\n    sort direction. Use Ctrl + click to return to natural order. Use\n    Shift + click to sort multiple columns simultaneously.",
        "name": "sortable",
        "default": true
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Enable or disable row headers, i.e. the index column.",
        "name": "row_headers",
        "default": true
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "List(Instance(TableColumn))",
        "desc": "The list of child column widgets.",
        "name": "columns",
        "default": []
      },
      {
        "type": "Instance(DataSource)",
        "desc": "The source of data for the widget.",
        "name": "source",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Allows to edit table's contents. Needs cell editors to be configured on\n    columns that are required to be editable.",
        "name": "editable",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      },
      {
        "type": "Bool",
        "desc": "Allows the reordering of a tables's columns. To reorder a column,\n    click and drag a table's header to the desired location in the table.\n    The columns on either side will remain in their previous order.",
        "name": "reorderable",
        "default": true
      }
    ],
    "proto": "{\"columns\": [], \"css_classes\": null, \"disabled\": false, \"editable\": false, \"fit_columns\": true, \"height\": 400, \"id\": \"fca52c5e-a44a-495a-acbc-6c965c7b5a75\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"reorderable\": true, \"row_headers\": true, \"scroll_to_selection\": true, \"selectable\": true, \"sizing_mode\": \"fixed\", \"sortable\": true, \"source\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Two dimensional grid for visualisation and editing large amounts\n    of data.",
    "name": "DataTable",
    "bases": [
      "bokeh.models.widgets.tables.TableWidget"
    ]
  },
  "SingleIntervalTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The interval between adjacent ticks.",
        "name": "interval",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"a4a02884-fe93-4ea1-a3db-a6c4e86bceba\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate evenly spaced ticks at a fixed interval regardless of\n    scale.",
    "name": "SingleIntervalTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ]
  },
  "FuncTickFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Dict(String, Instance(Model))",
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the formatter code snippet as the values of named\n    parameters to the callback.",
        "name": "args",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A snippet of JavaScript code that reformats a single tick to the desired\n    format. The variable ``tick`` will contain the unformatted tick value and\n    can be expected to be present in the code snippet namespace at render time.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            return Math.floor(tick) + \" + \" + (tick % 1).toFixed(2)\n            '''",
        "name": "code",
        "default": ""
      }
    ],
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"2a15e828-1a3d-4de5-9ebc-90f21b137558\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Display tick values that are formatted by a user-defined function.",
    "name": "FuncTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "TextAnnotation": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "name": "level",
        "default": "annotation"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The plot to which this annotation is attached.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "name": "visible",
        "default": true
      }
    ],
    "proto": "{\"id\": \"c068fa84-2d83-4d51-b029-d7ae0cbdc682\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}",
    "desc": "Base class for text annotation models such as labels and titles.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "TextAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ]
  },
  "HTMLTemplateFormatter": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "String",
        "desc": "Template string to be used by Underscore's template method.",
        "name": "template",
        "default": "<%= value %>"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"520be6cd-8796-4a73-b166-d2ebb57d42ef\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"template\": \"<%= value %>\"}",
    "desc": "HTML formatter using a template.\n    This uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\n    The formatter has access other items in the row via the `dataContext` object passed to the formatter.\n    So, for example, if another column in the datasource was named `url`, the template could access it as:\n\n        <a href=\"<%= url %>\"><%= value %></a>\n\n    To use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\n    or `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\n    Example: Simple HTML template to format the column value as code.\n\n        HTMLTemplateFormatter(template='<code><%= value %></code>')\n\n    Example: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n        HTMLTemplateFormatter(template='<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>')",
    "name": "HTMLTemplateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ]
  },
  "OpenURL": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "String",
        "desc": "The URL to direct the web browser to. This can be a template string,\n    which will be formatted with data from the data source.",
        "name": "url",
        "default": "http://"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      }
    ],
    "proto": "{\"id\": \"ce9ab9ff-5a83-4e44-baa7-aac4399cf660\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"http://\"}",
    "desc": "Open a URL in a new tab or window (browser dependent).",
    "name": "OpenURL",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ]
  },
  "RadioButtonGroup": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever a button group is manipulated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')",
        "desc": "A style for the button, signifying it's role.",
        "name": "button_type",
        "default": "default"
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected.",
        "name": "active",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "name": "labels",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"active\": null, \"button_type\": \"default\", \"callback\": null, \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"73b2df09-fdab-44e7-80e5-ee27ca2221f7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "A group of radio boxes rendered as toggle buttons.",
    "name": "RadioButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ]
  },
  "InvertedTriangle": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the markers.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the markers.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "ScreenDistanceSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "name": "size",
        "default": 4
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the markers.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the markers.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the markers.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "name": "x",
        "default": null
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the markers.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the markers.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"633ad986-f1b9-4e8b-bc07-358536f586f7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render upside-down triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/InvertedTriangle.py\n        :source-position: below",
    "name": "InvertedTriangle",
    "bases": [
      "bokeh.models.markers.Marker"
    ]
  },
  "Box": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"7311a40c-1d7f-4a6d-8a03-04012b45172f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Abstract base class for Row and Column. Do not use directly.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**",
    "name": "Box",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ]
  },
  "HBar": {
    "props": [
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the left edges.",
        "name": "left",
        "default": 0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the horizontal bars.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the horizontal bars.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The heights of the vertical bars.",
        "name": "height",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the horizontal bars.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the centers of the horizontal bars.",
        "name": "y",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the right edges.",
        "name": "right",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the horizontal bars.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the horizontal bars.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the horizontal bars.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the horizontal bars.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the horizontal bars.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the horizontal bars.",
        "name": "line_color",
        "default": "black"
      }
    ],
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"324aaf97-0b26-4165-ac3b-190250b2f132\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": {\"value\": 0}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"y\": null}",
    "desc": "Render horizontal bars, given a center coordinate, ``height`` and\n    (``left``, ``right``) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/HBar.py\n        :source-position: below",
    "name": "HBar",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "LogTicker": {
    "props": [
      {
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "name": "base",
        "default": 10.0
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "name": "mantissas",
        "default": [
          1,
          5
        ]
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values.",
        "name": "num_minor_ticks",
        "default": 5
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "name": "min_interval",
        "default": 0.0
      },
      {
        "type": "Float",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.",
        "name": "desired_num_ticks",
        "default": 6
      }
    ],
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"cfa4b7cf-3998-4e12-8bcb-ca99800fab2c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Generate ticks on a log scale.",
    "name": "LogTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ]
  },
  "Column": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "name": "children",
        "default": []
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"children\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"c1e74caf-47eb-4eb8-9173-5062d9e317c7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}",
    "desc": "Lay out child components in a single vertical row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.",
    "name": "Column",
    "bases": [
      "bokeh.models.layouts.Box"
    ]
  },
  "Image": {
    "props": [
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "dw_units",
        "default": "data"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.",
        "name": "dh",
        "default": null
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.",
        "name": "dw",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The arrays of scalar data for the images to be colormapped.",
        "name": "image",
        "default": null
      },
      {
        "type": "Instance(ColorMapper)",
        "desc": "A ``ColorMapper`` to use to map the scalar data from ``image``\n    into RGBA values for display.\n\n    .. note::\n        The color mapping step happens on the client.",
        "name": "color_mapper",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates to locate the image anchors.",
        "name": "y",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.",
        "name": "dilate",
        "default": false
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates to locate the image anchors.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "dh_units",
        "default": "data"
      }
    ],
    "proto": "{\"color_mapper\": {\"id\": \"9204d078-2990-453e-90a5-4774d7a5c645\", \"type\": \"LinearColorMapper\"}, \"dh\": null, \"dilate\": false, \"dw\": null, \"id\": \"3f317838-f020-4eee-86ed-91e47948bee8\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}",
    "desc": "Render images given as scalar data together with a color mapper.\n\n    In addition to the defined model properties, ``Image`` also can accept\n    a keyword argument ``palette`` in place of an explicit ``color_mapper``.\n    The value should be a list of colors, or the name of one of the built-in\n    palettes in ``bokeh.palettes``. This palette will be used to automatically\n    construct a ``ColorMapper`` model for the ``color_mapper`` property.\n\n    If both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\n    exception will be raised. If neither is passed, then the ``Greys9``\n    palette will be used as a default.",
    "name": "Image",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "LogScale": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      }
    ],
    "proto": "{\"id\": \"9fbcff7f-846d-4193-8305-5c6193ce6a83\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "name": "LogScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ]
  },
  "CustomJS": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Dict(String, Instance(Model))",
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback.",
        "name": "args",
        "default": {}
      },
      {
        "type": "String",
        "desc": "A snippet of JavaScript code to execute in the browser. The\n    code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. Additionally,\n    a ``cb_obj`` parameter contains the object that triggered the callback\n    and an optional ``cb_data`` parameter that contains any tool-specific data\n    (i.e. mouse coordinates and hovered glyph indices for the HoverTool).\n\n    .. note:: Use ``CustomJS.from_coffeescript()`` for CoffeeScript source code.",
        "name": "code",
        "default": ""
      }
    ],
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"b10824a4-c28c-44bb-a4d0-667b80c42f49\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "Execute a JavaScript function.",
    "name": "CustomJS",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ]
  },
  "TapTool": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A client-side action specification, like opening a URL, showing\n    a dialog box, etc. See :class:`~bokeh.models.actions.Action` for details.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "default": []
      },
      {
        "type": "Enum('select', 'inspect')",
        "desc": "This tool can be configured to either make selections or inspections\n    on associated data sources. The difference is that selection changes\n    propagate across bokeh and other components (e.g. selection glyph)\n    will be notified. Inspecions don't act like this, so it's useful to\n    configure `callback` when setting `behavior='inspect'`.",
        "name": "behavior",
        "default": "select"
      }
    ],
    "proto": "{\"behavior\": \"select\", \"callback\": null, \"id\": \"b6547dcd-843a-4bdc-87d3-da7a79a02808\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"plot\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |tap_select_icon|\n\n    The tap selection tool allows the user to select at single points by\n    left-clicking a mouse, or tapping with a finger.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. |tap_select_icon| image:: /_images/icons/TapSelect.png\n        :height: 18pt\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.",
    "name": "TapTool",
    "bases": [
      "bokeh.models.tools.Tap"
    ]
  },
  "UndoTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"0fd46e8c-d396-445f-80f1-b60ec29f0d5b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |undo_icon|\n\n    Undo tool allows to restore previous state of the plot.\n\n    .. |undo_icon| image:: /_images/icons/Undo.png\n        :height: 18pt",
    "name": "UndoTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "AutocompleteInput": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "An optional height for the component (in pixels).",
        "name": "height",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "String",
        "desc": "Placeholder for empty input field",
        "name": "placeholder",
        "default": ""
      },
      {
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events.",
        "name": "disabled",
        "default": false
      },
      {
        "type": "Int",
        "desc": "An optional width for the component (in pixels).",
        "name": "width",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "A list of completion strings. This will be used to guide the\n    user upon typing the beginning of a desired value.",
        "name": "completions",
        "default": []
      },
      {
        "type": "String",
        "desc": "Initial or entered text value.",
        "name": "value",
        "default": ""
      },
      {
        "type": "Seq(String)",
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.",
        "name": "css_classes",
        "default": null
      },
      {
        "type": "String",
        "desc": "Widget's label.",
        "name": "title",
        "default": ""
      },
      {
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')",
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*.",
        "name": "sizing_mode",
        "default": "fixed"
      }
    ],
    "proto": "{\"callback\": null, \"completions\": [], \"css_classes\": null, \"disabled\": false, \"height\": null, \"id\": \"b85bc337-438c-4541-a0f8-f659868d0a50\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}",
    "desc": "Single-line input widget with auto-completion.",
    "name": "AutocompleteInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ]
  },
  "BasicTickFormatter": {
    "props": [
      {
        "type": "Bool",
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.",
        "name": "use_scientific",
        "default": true
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Either(Auto, Int)",
        "desc": "How many digits of precision to display in tick labels.",
        "name": "precision",
        "default": "auto"
      },
      {
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low",
        "name": "power_limit_low",
        "default": -3
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high",
        "name": "power_limit_high",
        "default": 5
      }
    ],
    "proto": "{\"id\": \"03ed993c-fd71-4615-9a65-07f34a406458\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}",
    "desc": "Display tick values from continuous ranges as \"basic numbers\",\n    using scientific notation when appropriate by default.",
    "name": "BasicTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ]
  },
  "Oval": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the ovals.",
        "name": "line_join",
        "default": "miter"
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line width values for the ovals.",
        "name": "line_width",
        "default": 1
      },
      {
        "type": "Enum('deg', 'rad')",
        "desc": "",
        "name": "angle_units",
        "default": "rad"
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall height of each oval.",
        "name": "height",
        "default": null
      },
      {
        "type": "DashPattern",
        "desc": "The line dash values for the ovals.",
        "name": "line_dash",
        "default": []
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The y-coordinates of the centers of the ovals.",
        "name": "y",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Int",
        "desc": "The line dash offset values for the ovals.",
        "name": "line_dash_offset",
        "default": 0
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The fill color values for the ovals.",
        "name": "fill_color",
        "default": "gray"
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The line alpha values for the ovals.",
        "name": "line_alpha",
        "default": 1.0
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The fill alpha values for the ovals.",
        "name": "fill_alpha",
        "default": 1.0
      },
      {
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angle the ovals are rotated from horizontal. [rad]",
        "name": "angle",
        "default": 0.0
      },
      {
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the ovals.",
        "name": "line_cap",
        "default": "butt"
      },
      {
        "type": "ColorSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Color)), Color)",
        "desc": "The line color values for the ovals.",
        "name": "line_color",
        "default": "black"
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "width_units",
        "default": "data"
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall widths of each oval.",
        "name": "width",
        "default": null
      },
      {
        "type": "NumberSpec(String, Dict(Enum('field', 'value', 'transform'), Either(String, Instance(Transform), Float)), Float)",
        "desc": "The x-coordinates of the centers of the ovals.",
        "name": "x",
        "default": null
      },
      {
        "type": "Enum('screen', 'data')",
        "desc": "",
        "name": "height_units",
        "default": "data"
      }
    ],
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"f2345827-9f6a-49d3-8fe6-63969084cb2e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"miter\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}",
    "desc": "Render ovals.\n\n    This glyph renders ovals using B\u00e9zier curves, which are similar,\n    but not identical to ellipses. In particular, widths equal to heights\n    will not render circles. Use the ``Ellipse`` glyph for that.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../tests/glyphs/Oval.py\n        :source-position: below",
    "name": "Oval",
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ]
  },
  "RedoTool": {
    "props": [
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      }
    ],
    "proto": "{\"id\": \"67a96ad8-a481-4866-803f-e6efd1db0d27\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": []}",
    "desc": "*toolbar icon*: |redo_icon|\n\n    Redo tool reverses the last action performed by undo tool.\n\n    .. |redo_icon| image:: /_images/icons/Redo.png\n        :height: 18pt",
    "name": "RedoTool",
    "bases": [
      "bokeh.models.tools.Action"
    ]
  },
  "AjaxDataSource": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "Enum('POST', 'GET')",
        "desc": "http method - GET or POST",
        "name": "method",
        "default": "POST"
      },
      {
        "type": "Int",
        "desc": "Maximum size of the data array being kept after each pull requests.\n    Larger than that size, the data will be right shifted.",
        "name": "max_size",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "An list of names for all the columns in this DataSource.",
        "name": "column_names",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "String",
        "desc": "The URL to the endpoint for the data.",
        "name": "data_url",
        "default": null
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the selection is changed.",
        "name": "callback",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Enum('replace', 'append')",
        "desc": "Whether to append new data to existing data (up to ``max_size``),\n    or to replace existing data entirely.",
        "name": "mode",
        "default": "replace"
      },
      {
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.",
        "name": "data",
        "default": {}
      },
      {
        "type": "Int",
        "desc": "polling interval for updating data source in milliseconds",
        "name": "polling_interval",
        "default": null
      },
      {
        "type": "Dict(String, Dict(String, Any))",
        "desc": "A dict to indicate selected indices on different dimensions on this DataSource. Keys are:\n\n    .. code-block:: python\n\n        # selection information for line and patch glyphs\n        '0d' : {\n          # the glyph that was selected\n          'glyph': None\n\n          # array with the [smallest] index of the segment of the line that was hit\n          'indices': []\n        }\n\n        # selection for most (point-like) glyphs, except lines and patches\n        '1d': {\n          # indices of the points included in the selection\n          indices: []\n        }\n\n        # selection information for multiline and patches glyphs\n        '2d': {\n          # mapping of indices of the multiglyph to array of glyph indices that were hit\n          # e.g. {3: [5, 6], 4: [5]}\n          indices: {}\n        }",
        "name": "selected",
        "default": {
          "1d": {
            "indices": []
          },
          "2d": {
            "indices": {}
          },
          "0d": {
            "glyph": null,
            "indices": []
          }
        }
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, String)",
        "desc": "HTTP headers to set for the Ajax request.",
        "name": "http_headers",
        "default": {}
      },
      {
        "type": "Bool",
        "desc": "Whether to include an ``If-Modified-Since`` header in AJAX requests\n    to the server. If this header is supported by the server, then only\n    new data since the last request will be returned.",
        "name": "if_modified",
        "default": false
      },
      {
        "type": "String",
        "desc": "Set the \"contentType\" parameter for the Ajax request.",
        "name": "content_type",
        "default": "application/json"
      }
    ],
    "proto": "{\"callback\": null, \"column_names\": [], \"content_type\": \"application/json\", \"data\": {}, \"data_url\": null, \"http_headers\": {}, \"id\": \"9c1c4e63-b8c1-4b3d-8dae-bf4f4a5047ba\", \"if_modified\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_size\": null, \"method\": \"POST\", \"mode\": \"replace\", \"name\": null, \"polling_interval\": null, \"selected\": {\"0d\": {\"glyph\": null, \"indices\": []}, \"1d\": {\"indices\": []}, \"2d\": {\"indices\": {}}}, \"subscribed_events\": [], \"tags\": []}",
    "desc": "",
    "name": "AjaxDataSource",
    "bases": [
      "bokeh.models.sources.RemoteSource"
    ]
  },
  "HoverTool": {
    "props": [
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Instance(Renderer))",
        "desc": "An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.",
        "name": "renderers",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the input's value changes. The\n    cb_data parameter that is available to the Callback code will contain two\n    HoverTool specific fields:\n\n    :index: object containing the indices of the hovered points in the data source\n    :geometry: object containing the coordinates of the hover cursor",
        "name": "callback",
        "default": null
      },
      {
        "type": "Bool",
        "desc": "Whether tooltip's arrow should be showed.",
        "name": "show_arrow",
        "default": true
      },
      {
        "type": "Enum('mouse', 'hline', 'vline')",
        "desc": "Whether to consider hover pointer as a point (x/y values), or a\n    span on h or v directions.",
        "name": "mode",
        "default": "mouse"
      },
      {
        "type": "Enum('snap_to_data', 'follow_mouse', 'none')",
        "desc": "Whether the tooltip position should snap to the \"center\" (or other anchor)\n    position of the associated glyph, or always follow the current mouse cursor\n    position.",
        "name": "point_policy",
        "default": "snap_to_data"
      },
      {
        "type": "Instance(Plot)",
        "desc": "The Plot that this tool will act on.",
        "name": "plot",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')",
        "desc": "When showing tooltips for lines, designates whether the tooltip position\n    should be the \"previous\" or \"next\" points on the line, the \"nearest\" point\n    to the current mouse position, or \"interpolate\" along the line to the\n    current mouse position.",
        "name": "line_policy",
        "default": "nearest"
      },
      {
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.",
        "name": "names",
        "default": []
      },
      {
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Whether tooltip's arrow should appear in the horizontal or vertical dimension.",
        "name": "attachment",
        "default": "horizontal"
      },
      {
        "type": "Bool",
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.",
        "name": "toggleable",
        "default": true
      },
      {
        "type": "Either(String, List(Tuple(String, String)))",
        "desc": "The (name, field) pairs describing what the hover tool should\n    display when there is a hit.\n\n    Field names starting with \"@\" are interpreted as columns on the\n    data source. For instance, \"@temp\" would look up values to display\n    from the \"temp\" column of the data source.\n\n    Field names starting with \"$\" are special, known fields:\n\n    :$index: index of selected point in the data source\n    :$x: x-coordinate under the cursor in data space\n    :$y: y-coordinate under the cursor in data space\n    :$sx: x-coordinate under the cursor in screen (canvas) space\n    :$sy: y-coordinate under the cursor in screen (canvas) space\n    :$color: color data from data source, with the syntax:\n        ``$color[options]:field_name``. The available options\n        are: 'hex' (to display the color as a hex value), and\n        'swatch' to also display a small color swatch.\n\n    Field names that begin with ``@`` are associated with columns in a\n    ``ColumnDataSource``. For instance the field name ``\"@price\"`` will\n    display values from the ``\"price\"`` column whenever a hover is triggered.\n    If the hover is for the 17th glyph, then the hover tooltip will\n    correspondingly display the 17th price value.\n\n    Note that if a column name contains spaces, the it must be supplied by\n    surrounding it in curly braces, e.g. ``@{adjusted close}`` will display\n    values from a column named ``\"adjusted close\"``.\n\n    By default, values for fields (e.g. ``@foo``) are displayed in a basic\n    numeric format. However it is possible to control the formatting of values\n    more precisely. Fields can be modified by appending a format specified to\n    the end in curly braces. Some examples are below.\n\n    .. code-block:: python\n\n        \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n        \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n        \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\n    Specifying a format ``{safe}`` after a field name will override automatic\n    escaping of the tooltip data source. Any HTML tags in the data tags will\n    be rendered as HTML in the resulting HoverTool output. See\n    :ref:`custom_hover_tooltip` for a more detailed example.\n\n    ``None`` is also a valid value for tooltips. This turns off the\n    rendering of tooltips. This is mostly useful when supplying other\n    actions on hover via the callback property.\n\n    .. note::\n        The tooltips attribute can also be configured with a mapping type,\n        e.g. ``dict`` or ``OrderedDict``. However, if a ``dict`` is used,\n        the visual presentation order is unspecified.",
        "name": "tooltips",
        "default": [
          [
            "index",
            "$index"
          ],
          [
            "data (x, y)",
            "($x, $y)"
          ],
          [
            "canvas (x, y)",
            "($sx, $sy)"
          ]
        ]
      },
      {
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')",
        "desc": "If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\n    point of a tooltip. The default is to attach to the center of a glyph.",
        "name": "anchor",
        "default": "center"
      },
      {
        "type": "Dict(String, Enum('numeral', 'datetime', 'printf'))",
        "desc": "Specify the formatting scheme for data source columns, e.g.\n\n    .. code-block:: python\n\n        tool.formatters = dict(date=\"datetime\")\n\n    will cause format specifications for the \"date\" column to be interpreted\n    according to the \"datetime\" formatting scheme. The following schemed are\n    available:\n\n    :``\"numeral\"``:\n        Provides a wide variety of formats for numbers, currency, bytes, times,\n        and percentages. The full set of formats can be found in the\n        |NumeralTickFormatter| reference documentation.\n\n    :``\"datetime\"``:\n        Provides formats for date and time values. The full set of formats is\n        listed in the |DatetimeTickFormatter| reference documentation.\n\n    :``\"printf\"``:\n        Provides formats similar to C-style \"printf\" type specifiers. See the\n        |PrintfTickFormatter| reference documentation for complete details.\n\n    If no formatter is specified for a column name, the default ``\"numeral\"``\n    formatter is assumed.\n\n    .. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n    .. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n    .. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`",
        "name": "formatters",
        "default": {}
      }
    ],
    "proto": "{\"anchor\": \"center\", \"attachment\": \"horizontal\", \"callback\": null, \"formatters\": {}, \"id\": \"9c27370f-92ce-485a-bec8-7364386077fe\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_policy\": \"nearest\", \"mode\": \"mouse\", \"name\": null, \"names\": [], \"plot\": null, \"point_policy\": \"snap_to_data\", \"renderers\": [], \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true, \"tooltips\": [[\"index\", \"$index\"], [\"data (x, y)\", \"($x, $y)\"], [\"canvas (x, y)\", \"($sx, $sy)\"]]}",
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The hover tool is a passive inspector tool. It is generally on at\n    all times, but can be configured in the inspector's menu associated\n    with the *toolbar icon* shown above.\n\n    By default, the hover tool displays informational tooltips whenever\n    the cursor is directly over a glyph. The data to show comes from the\n    glyph's data source, and what is to be displayed is configurable with\n    the ``tooltips`` attribute that maps display names to columns in the\n    data source, or to special known variables.\n\n    Here is an example of how to configure and use the hover tool::\n\n        # Add tooltip (name, field) pairs to the tool. See below for a\n        # description of possible field values.\n        hover.tooltips = [\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"radius\", \"@radius\"),\n            (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n            (\"foo\", \"@foo\"),\n            (\"bar\", \"@bar\"),\n            (\"baz\", \"@baz{safe}\"),\n            (\"total\", \"@total{$0,0.00}\"\n        ]\n\n    You can also supply a ``Callback`` to the HoverTool, to build custom\n    interactions on hover. In this case you may want to turn the tooltips\n    off by setting ``tooltips=None``.\n\n    .. warning::\n\n        Hover tool does not currently work with the following glyphs:\n\n        .. hlist::\n            :columns: 3\n\n            * annulus\n            * arc\n            * bezier\n            * image\n            * image_rgba\n            * image_url\n            * oval\n            * patch\n            * quadratic\n            * ray\n            * text\n\n    .. |hover_icon| image:: /_images/icons/Hover.png\n        :height: 18pt",
    "name": "HoverTool",
    "bases": [
      "bokeh.models.tools.Inspection"
    ]
  },
  "Range1d": {
    "props": [
      {
        "type": "MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "The bounds that the range is allowed to go to - typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    If set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\n    increasing or decreasing, the first item should be the minimum value of the range and the\n    second item should be the maximum. Setting min > max will result in a ``ValueError``.\n\n    By default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\n    want to constrain one end of the plot, you can set min or max to None.\n\n    Examples:\n\n        Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n        Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0",
        "name": "bounds",
        "default": null
      },
      {
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.",
        "name": "subscribed_events",
        "default": []
      },
      {
        "type": "List(Any)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.",
        "name": "tags",
        "default": []
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)",
        "name": "js_property_callbacks",
        "default": {}
      },
      {
        "type": "Instance(Callback)",
        "desc": "A callback to run in the browser whenever the range is updated.",
        "name": "callback",
        "default": null
      },
      {
        "type": "String",
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.",
        "name": "name",
        "default": null
      },
      {
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)",
        "name": "js_event_callbacks",
        "default": {}
      },
      {
        "type": "Either(Float, TimeDelta, Int)",
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound. Can be a timedelta.",
        "name": "min_interval",
        "default": null
      },
      {
        "type": "Either(Float, Datetime, Int)",
        "desc": "The end of the range.",
        "name": "end",
        "default": 1
      },
      {
        "type": "Either(Float, TimeDelta, Int)",
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Can be a timedelta. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well.",
        "name": "max_interval",
        "default": null
      },
      {
        "type": "Either(Float, Datetime, Int)",
        "desc": "The start of the range.",
        "name": "start",
        "default": 0
      }
    ],
    "proto": "{\"bounds\": null, \"callback\": null, \"end\": 1, \"id\": \"98e51318-0d4d-4092-9369-5652f99f4bbc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}",
    "desc": "A fixed, closed range [start, end] in a continuous scalar\n    dimension.\n\n    In addition to supplying ``start`` and ``end`` keyword arguments\n    to the ``Range1d`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        Range(0, 10) # equivalent to Range(start=0, end=10)",
    "name": "Range1d",
    "bases": [
      "bokeh.models.ranges.Range"
    ]
  }
}
